// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OBF.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OsmAnd {
namespace OBF {

namespace {

const ::google::obf_protobuf::Descriptor* OsmAndStructure_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndStructure_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndTileBox_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndTileBox_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* StringTable_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  StringTable_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* IndexedStringTable_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  IndexedStringTable_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndMapIndex_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndMapIndex_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndMapIndex_MapEncodingRule_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndMapIndex_MapEncodingRule_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndMapIndex_MapRootLevel_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndMapIndex_MapRootLevel_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndMapIndex_MapDataBox_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndMapIndex_MapDataBox_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* MapDataBlock_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  MapDataBlock_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* MapData_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  MapData_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndAddressIndex_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndAddressIndex_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndAddressIndex_CitiesIndex_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndAddressIndex_CitiesIndex_reflection_ = NULL;
const ::google::obf_protobuf::EnumDescriptor* OsmAndAddressIndex_CitiesIndex_CitiesType_descriptor_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndAddressNameIndexData_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndAddressNameIndexData_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndAddressNameIndexData_AddressNameIndexData_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndAddressNameIndexData_AddressNameIndexData_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* AddressNameIndexDataAtom_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  AddressNameIndexDataAtom_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* CityIndex_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  CityIndex_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* CityBlockIndex_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  CityBlockIndex_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* StreetIndex_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  StreetIndex_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* StreetIntersection_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  StreetIntersection_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* BuildingIndex_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  BuildingIndex_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* TransportRoutes_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  TransportRoutes_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* TransportRoute_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  TransportRoute_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* TransportRouteStop_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  TransportRouteStop_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* TransportStop_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  TransportStop_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* TransportStopsTree_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  TransportStopsTree_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndTransportIndex_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndTransportIndex_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndPoiIndex_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndPoiIndex_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndPoiNameIndex_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndPoiNameIndex_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndPoiNameIndex_OsmAndPoiNameIndexData_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndPoiNameIndex_OsmAndPoiNameIndexData_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndPoiNameIndexDataAtom_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndPoiNameIndexDataAtom_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndCategoryTable_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndCategoryTable_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndSubtypesTable_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndSubtypesTable_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndPoiSubtype_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndPoiSubtype_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndPoiBox_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndPoiBox_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndPoiCategories_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndPoiCategories_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndPoiBoxData_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndPoiBoxData_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndPoiBoxDataAtom_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndPoiBoxDataAtom_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* IdTable_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  IdTable_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* RestrictionData_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  RestrictionData_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* RouteData_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  RouteData_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndRoutingIndex_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndRoutingIndex_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndRoutingIndex_RouteEncodingRule_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndRoutingIndex_RouteEncodingRule_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndRoutingIndex_RouteDataBox_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndRoutingIndex_RouteDataBox_reflection_ = NULL;
const ::google::obf_protobuf::Descriptor* OsmAndRoutingIndex_RouteDataBlock_descriptor_ = NULL;
const ::google::obf_protobuf::internal::GeneratedMessageReflection*
  OsmAndRoutingIndex_RouteDataBlock_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OBF_2eproto() {
  protobuf_AddDesc_OBF_2eproto();
  const ::google::obf_protobuf::FileDescriptor* file =
    ::google::obf_protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OBF.proto");
  GOOGLE_CHECK(file != NULL);
  OsmAndStructure_descriptor_ = file->message_type(0);
  static const int OsmAndStructure_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndStructure, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndStructure, datecreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndStructure, addressindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndStructure, transportindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndStructure, poiindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndStructure, mapindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndStructure, routingindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndStructure, versionconfirm_),
  };
  OsmAndStructure_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndStructure_descriptor_,
      OsmAndStructure::default_instance_,
      OsmAndStructure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndStructure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndStructure, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndStructure));
  OsmAndTileBox_descriptor_ = file->message_type(1);
  static const int OsmAndTileBox_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTileBox, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTileBox, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTileBox, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTileBox, bottom_),
  };
  OsmAndTileBox_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndTileBox_descriptor_,
      OsmAndTileBox::default_instance_,
      OsmAndTileBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTileBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTileBox, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndTileBox));
  StringTable_descriptor_ = file->message_type(2);
  static const int StringTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, s_),
  };
  StringTable_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      StringTable_descriptor_,
      StringTable::default_instance_,
      StringTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(StringTable));
  IndexedStringTable_descriptor_ = file->message_type(3);
  static const int IndexedStringTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, subtables_),
  };
  IndexedStringTable_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      IndexedStringTable_descriptor_,
      IndexedStringTable::default_instance_,
      IndexedStringTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(IndexedStringTable));
  OsmAndMapIndex_descriptor_ = file->message_type(4);
  static const int OsmAndMapIndex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex, rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex, levels_),
  };
  OsmAndMapIndex_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndMapIndex_descriptor_,
      OsmAndMapIndex::default_instance_,
      OsmAndMapIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndMapIndex));
  OsmAndMapIndex_MapEncodingRule_descriptor_ = OsmAndMapIndex_descriptor_->nested_type(0);
  static const int OsmAndMapIndex_MapEncodingRule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapEncodingRule, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapEncodingRule, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapEncodingRule, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapEncodingRule, minzoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapEncodingRule, type_),
  };
  OsmAndMapIndex_MapEncodingRule_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndMapIndex_MapEncodingRule_descriptor_,
      OsmAndMapIndex_MapEncodingRule::default_instance_,
      OsmAndMapIndex_MapEncodingRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapEncodingRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapEncodingRule, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndMapIndex_MapEncodingRule));
  OsmAndMapIndex_MapRootLevel_descriptor_ = OsmAndMapIndex_descriptor_->nested_type(1);
  static const int OsmAndMapIndex_MapRootLevel_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapRootLevel, maxzoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapRootLevel, minzoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapRootLevel, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapRootLevel, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapRootLevel, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapRootLevel, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapRootLevel, boxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapRootLevel, blocks_),
  };
  OsmAndMapIndex_MapRootLevel_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndMapIndex_MapRootLevel_descriptor_,
      OsmAndMapIndex_MapRootLevel::default_instance_,
      OsmAndMapIndex_MapRootLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapRootLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapRootLevel, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndMapIndex_MapRootLevel));
  OsmAndMapIndex_MapDataBox_descriptor_ = OsmAndMapIndex_descriptor_->nested_type(2);
  static const int OsmAndMapIndex_MapDataBox_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapDataBox, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapDataBox, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapDataBox, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapDataBox, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapDataBox, shifttomapdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapDataBox, ocean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapDataBox, boxes_),
  };
  OsmAndMapIndex_MapDataBox_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndMapIndex_MapDataBox_descriptor_,
      OsmAndMapIndex_MapDataBox::default_instance_,
      OsmAndMapIndex_MapDataBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapDataBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndMapIndex_MapDataBox, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndMapIndex_MapDataBox));
  MapDataBlock_descriptor_ = file->message_type(5);
  static const int MapDataBlock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDataBlock, baseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDataBlock, dataobjects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDataBlock, stringtable_),
  };
  MapDataBlock_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      MapDataBlock_descriptor_,
      MapDataBlock::default_instance_,
      MapDataBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDataBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDataBlock, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(MapDataBlock));
  MapData_descriptor_ = file->message_type(6);
  static const int MapData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, coordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, areacoordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, polygoninnercoordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, additionaltypes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, stringnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, rasterbytes_),
  };
  MapData_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      MapData_descriptor_,
      MapData::default_instance_,
      MapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(MapData));
  OsmAndAddressIndex_descriptor_ = file->message_type(7);
  static const int OsmAndAddressIndex_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex, boundaries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex, attributetagstable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex, cities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex, nameindex_),
  };
  OsmAndAddressIndex_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndAddressIndex_descriptor_,
      OsmAndAddressIndex::default_instance_,
      OsmAndAddressIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndAddressIndex));
  OsmAndAddressIndex_CitiesIndex_descriptor_ = OsmAndAddressIndex_descriptor_->nested_type(0);
  static const int OsmAndAddressIndex_CitiesIndex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex_CitiesIndex, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex_CitiesIndex, cities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex_CitiesIndex, blocks_),
  };
  OsmAndAddressIndex_CitiesIndex_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndAddressIndex_CitiesIndex_descriptor_,
      OsmAndAddressIndex_CitiesIndex::default_instance_,
      OsmAndAddressIndex_CitiesIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex_CitiesIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressIndex_CitiesIndex, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndAddressIndex_CitiesIndex));
  OsmAndAddressIndex_CitiesIndex_CitiesType_descriptor_ = OsmAndAddressIndex_CitiesIndex_descriptor_->enum_type(0);
  OsmAndAddressNameIndexData_descriptor_ = file->message_type(8);
  static const int OsmAndAddressNameIndexData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressNameIndexData, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressNameIndexData, atom_),
  };
  OsmAndAddressNameIndexData_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndAddressNameIndexData_descriptor_,
      OsmAndAddressNameIndexData::default_instance_,
      OsmAndAddressNameIndexData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressNameIndexData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressNameIndexData, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndAddressNameIndexData));
  OsmAndAddressNameIndexData_AddressNameIndexData_descriptor_ = OsmAndAddressNameIndexData_descriptor_->nested_type(0);
  static const int OsmAndAddressNameIndexData_AddressNameIndexData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressNameIndexData_AddressNameIndexData, atom_),
  };
  OsmAndAddressNameIndexData_AddressNameIndexData_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndAddressNameIndexData_AddressNameIndexData_descriptor_,
      OsmAndAddressNameIndexData_AddressNameIndexData::default_instance_,
      OsmAndAddressNameIndexData_AddressNameIndexData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressNameIndexData_AddressNameIndexData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndAddressNameIndexData_AddressNameIndexData, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndAddressNameIndexData_AddressNameIndexData));
  AddressNameIndexDataAtom_descriptor_ = file->message_type(9);
  static const int AddressNameIndexDataAtom_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, nameen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, shifttoindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, shifttocityindex_),
  };
  AddressNameIndexDataAtom_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      AddressNameIndexDataAtom_descriptor_,
      AddressNameIndexDataAtom::default_instance_,
      AddressNameIndexDataAtom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(AddressNameIndexDataAtom));
  CityIndex_descriptor_ = file->message_type(10);
  static const int CityIndex_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, city_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, attributetagids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, attributevalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, shifttocityblockindex_),
  };
  CityIndex_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      CityIndex_descriptor_,
      CityIndex::default_instance_,
      CityIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(CityIndex));
  CityBlockIndex_descriptor_ = file->message_type(11);
  static const int CityBlockIndex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityBlockIndex, shifttocityindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityBlockIndex, buildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityBlockIndex, streets_),
  };
  CityBlockIndex_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      CityBlockIndex_descriptor_,
      CityBlockIndex::default_instance_,
      CityBlockIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityBlockIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityBlockIndex, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(CityBlockIndex));
  StreetIndex_descriptor_ = file->message_type(12);
  static const int StreetIndex_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, attributetagids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, attributevalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, buildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, intersections_),
  };
  StreetIndex_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      StreetIndex_descriptor_,
      StreetIndex::default_instance_,
      StreetIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(StreetIndex));
  StreetIntersection_descriptor_ = file->message_type(13);
  static const int StreetIntersection_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, intersectedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, intersectedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, attributetagids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, attributevalues_),
  };
  StreetIntersection_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      StreetIntersection_descriptor_,
      StreetIntersection::default_instance_,
      StreetIntersection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(StreetIntersection));
  BuildingIndex_descriptor_ = file->message_type(14);
  static const int BuildingIndex_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, name2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, name_en2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, interpolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, postcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, attributetagids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, attributevalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, attributetagids2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, attributevalues2_),
  };
  BuildingIndex_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      BuildingIndex_descriptor_,
      BuildingIndex::default_instance_,
      BuildingIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingIndex));
  TransportRoutes_descriptor_ = file->message_type(15);
  static const int TransportRoutes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoutes, routes_),
  };
  TransportRoutes_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      TransportRoutes_descriptor_,
      TransportRoutes::default_instance_,
      TransportRoutes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoutes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoutes, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(TransportRoutes));
  TransportRoute_descriptor_ = file->message_type(16);
  static const int TransportRoute_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, directstops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, reversestops_),
  };
  TransportRoute_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      TransportRoute_descriptor_,
      TransportRoute::default_instance_,
      TransportRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(TransportRoute));
  TransportRouteStop_descriptor_ = file->message_type(17);
  static const int TransportRouteStop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, name_en_),
  };
  TransportRouteStop_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      TransportRouteStop_descriptor_,
      TransportRouteStop::default_instance_,
      TransportRouteStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(TransportRouteStop));
  TransportStop_descriptor_ = file->message_type(18);
  static const int TransportStop_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, routes_),
  };
  TransportStop_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      TransportStop_descriptor_,
      TransportStop::default_instance_,
      TransportStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(TransportStop));
  TransportStopsTree_descriptor_ = file->message_type(19);
  static const int TransportStopsTree_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, subtrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, leafs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, baseid_),
  };
  TransportStopsTree_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      TransportStopsTree_descriptor_,
      TransportStopsTree::default_instance_,
      TransportStopsTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(TransportStopsTree));
  OsmAndTransportIndex_descriptor_ = file->message_type(20);
  static const int OsmAndTransportIndex_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTransportIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTransportIndex, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTransportIndex, stops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTransportIndex, stringtable_),
  };
  OsmAndTransportIndex_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndTransportIndex_descriptor_,
      OsmAndTransportIndex::default_instance_,
      OsmAndTransportIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTransportIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndTransportIndex, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndTransportIndex));
  OsmAndPoiIndex_descriptor_ = file->message_type(21);
  static const int OsmAndPoiIndex_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiIndex, boundaries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiIndex, categoriestable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiIndex, nameindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiIndex, subtypestable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiIndex, boxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiIndex, poidata_),
  };
  OsmAndPoiIndex_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndPoiIndex_descriptor_,
      OsmAndPoiIndex::default_instance_,
      OsmAndPoiIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiIndex, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndPoiIndex));
  OsmAndPoiNameIndex_descriptor_ = file->message_type(22);
  static const int OsmAndPoiNameIndex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndex, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndex, data_),
  };
  OsmAndPoiNameIndex_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndPoiNameIndex_descriptor_,
      OsmAndPoiNameIndex::default_instance_,
      OsmAndPoiNameIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndex, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndPoiNameIndex));
  OsmAndPoiNameIndex_OsmAndPoiNameIndexData_descriptor_ = OsmAndPoiNameIndex_descriptor_->nested_type(0);
  static const int OsmAndPoiNameIndex_OsmAndPoiNameIndexData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndex_OsmAndPoiNameIndexData, atoms_),
  };
  OsmAndPoiNameIndex_OsmAndPoiNameIndexData_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndPoiNameIndex_OsmAndPoiNameIndexData_descriptor_,
      OsmAndPoiNameIndex_OsmAndPoiNameIndexData::default_instance_,
      OsmAndPoiNameIndex_OsmAndPoiNameIndexData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndex_OsmAndPoiNameIndexData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndex_OsmAndPoiNameIndexData, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndPoiNameIndex_OsmAndPoiNameIndexData));
  OsmAndPoiNameIndexDataAtom_descriptor_ = file->message_type(23);
  static const int OsmAndPoiNameIndexDataAtom_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndexDataAtom, zoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndexDataAtom, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndexDataAtom, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndexDataAtom, shiftto_),
  };
  OsmAndPoiNameIndexDataAtom_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndPoiNameIndexDataAtom_descriptor_,
      OsmAndPoiNameIndexDataAtom::default_instance_,
      OsmAndPoiNameIndexDataAtom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndexDataAtom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiNameIndexDataAtom, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndPoiNameIndexDataAtom));
  OsmAndCategoryTable_descriptor_ = file->message_type(24);
  static const int OsmAndCategoryTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndCategoryTable, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndCategoryTable, subcategories_),
  };
  OsmAndCategoryTable_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndCategoryTable_descriptor_,
      OsmAndCategoryTable::default_instance_,
      OsmAndCategoryTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndCategoryTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndCategoryTable, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndCategoryTable));
  OsmAndSubtypesTable_descriptor_ = file->message_type(25);
  static const int OsmAndSubtypesTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndSubtypesTable, subtypes_),
  };
  OsmAndSubtypesTable_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndSubtypesTable_descriptor_,
      OsmAndSubtypesTable::default_instance_,
      OsmAndSubtypesTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndSubtypesTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndSubtypesTable, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndSubtypesTable));
  OsmAndPoiSubtype_descriptor_ = file->message_type(26);
  static const int OsmAndPoiSubtype_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiSubtype, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiSubtype, tagname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiSubtype, istext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiSubtype, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiSubtype, subtypevaluessize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiSubtype, subtypevalue_),
  };
  OsmAndPoiSubtype_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndPoiSubtype_descriptor_,
      OsmAndPoiSubtype::default_instance_,
      OsmAndPoiSubtype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiSubtype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiSubtype, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndPoiSubtype));
  OsmAndPoiBox_descriptor_ = file->message_type(27);
  static const int OsmAndPoiBox_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBox, zoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBox, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBox, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBox, categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBox, subboxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBox, shifttodata_),
  };
  OsmAndPoiBox_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndPoiBox_descriptor_,
      OsmAndPoiBox::default_instance_,
      OsmAndPoiBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBox, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndPoiBox));
  OsmAndPoiCategories_descriptor_ = file->message_type(28);
  static const int OsmAndPoiCategories_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiCategories, categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiCategories, subcategories_),
  };
  OsmAndPoiCategories_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndPoiCategories_descriptor_,
      OsmAndPoiCategories::default_instance_,
      OsmAndPoiCategories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiCategories, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiCategories, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndPoiCategories));
  OsmAndPoiBoxData_descriptor_ = file->message_type(29);
  static const int OsmAndPoiBoxData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxData, zoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxData, poidata_),
  };
  OsmAndPoiBoxData_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndPoiBoxData_descriptor_,
      OsmAndPoiBoxData::default_instance_,
      OsmAndPoiBoxData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxData, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndPoiBoxData));
  OsmAndPoiBoxDataAtom_descriptor_ = file->message_type(30);
  static const int OsmAndPoiBoxDataAtom_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, subcategories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, nameen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, openinghours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, textcategories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, textvalues_),
  };
  OsmAndPoiBoxDataAtom_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndPoiBoxDataAtom_descriptor_,
      OsmAndPoiBoxDataAtom::default_instance_,
      OsmAndPoiBoxDataAtom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndPoiBoxDataAtom, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndPoiBoxDataAtom));
  IdTable_descriptor_ = file->message_type(31);
  static const int IdTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdTable, routeid_),
  };
  IdTable_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      IdTable_descriptor_,
      IdTable::default_instance_,
      IdTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdTable, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(IdTable));
  RestrictionData_descriptor_ = file->message_type(32);
  static const int RestrictionData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, via_),
  };
  RestrictionData_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      RestrictionData_descriptor_,
      RestrictionData::default_instance_,
      RestrictionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(RestrictionData));
  RouteData_descriptor_ = file->message_type(33);
  static const int RouteData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, pointtypes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, stringnames_),
  };
  RouteData_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      RouteData_descriptor_,
      RouteData::default_instance_,
      RouteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(RouteData));
  OsmAndRoutingIndex_descriptor_ = file->message_type(34);
  static const int OsmAndRoutingIndex_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex, rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex, rootboxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex, basemapboxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex, blocks_),
  };
  OsmAndRoutingIndex_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndRoutingIndex_descriptor_,
      OsmAndRoutingIndex::default_instance_,
      OsmAndRoutingIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndRoutingIndex));
  OsmAndRoutingIndex_RouteEncodingRule_descriptor_ = OsmAndRoutingIndex_descriptor_->nested_type(0);
  static const int OsmAndRoutingIndex_RouteEncodingRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteEncodingRule, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteEncodingRule, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteEncodingRule, id_),
  };
  OsmAndRoutingIndex_RouteEncodingRule_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndRoutingIndex_RouteEncodingRule_descriptor_,
      OsmAndRoutingIndex_RouteEncodingRule::default_instance_,
      OsmAndRoutingIndex_RouteEncodingRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteEncodingRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteEncodingRule, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndRoutingIndex_RouteEncodingRule));
  OsmAndRoutingIndex_RouteDataBox_descriptor_ = OsmAndRoutingIndex_descriptor_->nested_type(1);
  static const int OsmAndRoutingIndex_RouteDataBox_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBox, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBox, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBox, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBox, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBox, shifttodata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBox, boxes_),
  };
  OsmAndRoutingIndex_RouteDataBox_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndRoutingIndex_RouteDataBox_descriptor_,
      OsmAndRoutingIndex_RouteDataBox::default_instance_,
      OsmAndRoutingIndex_RouteDataBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBox, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndRoutingIndex_RouteDataBox));
  OsmAndRoutingIndex_RouteDataBlock_descriptor_ = OsmAndRoutingIndex_descriptor_->nested_type(2);
  static const int OsmAndRoutingIndex_RouteDataBlock_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBlock, idtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBlock, dataobjects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBlock, restrictions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBlock, stringtable_),
  };
  OsmAndRoutingIndex_RouteDataBlock_reflection_ =
    new ::google::obf_protobuf::internal::GeneratedMessageReflection(
      OsmAndRoutingIndex_RouteDataBlock_descriptor_,
      OsmAndRoutingIndex_RouteDataBlock::default_instance_,
      OsmAndRoutingIndex_RouteDataBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsmAndRoutingIndex_RouteDataBlock, _unknown_fields_),
      -1,
      ::google::obf_protobuf::DescriptorPool::generated_pool(),
      ::google::obf_protobuf::MessageFactory::generated_factory(),
      sizeof(OsmAndRoutingIndex_RouteDataBlock));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::obf_protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OBF_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndStructure_descriptor_, &OsmAndStructure::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndTileBox_descriptor_, &OsmAndTileBox::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringTable_descriptor_, &StringTable::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexedStringTable_descriptor_, &IndexedStringTable::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndMapIndex_descriptor_, &OsmAndMapIndex::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndMapIndex_MapEncodingRule_descriptor_, &OsmAndMapIndex_MapEncodingRule::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndMapIndex_MapRootLevel_descriptor_, &OsmAndMapIndex_MapRootLevel::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndMapIndex_MapDataBox_descriptor_, &OsmAndMapIndex_MapDataBox::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapDataBlock_descriptor_, &MapDataBlock::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapData_descriptor_, &MapData::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndAddressIndex_descriptor_, &OsmAndAddressIndex::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndAddressIndex_CitiesIndex_descriptor_, &OsmAndAddressIndex_CitiesIndex::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndAddressNameIndexData_descriptor_, &OsmAndAddressNameIndexData::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndAddressNameIndexData_AddressNameIndexData_descriptor_, &OsmAndAddressNameIndexData_AddressNameIndexData::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressNameIndexDataAtom_descriptor_, &AddressNameIndexDataAtom::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityIndex_descriptor_, &CityIndex::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityBlockIndex_descriptor_, &CityBlockIndex::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreetIndex_descriptor_, &StreetIndex::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreetIntersection_descriptor_, &StreetIntersection::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingIndex_descriptor_, &BuildingIndex::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportRoutes_descriptor_, &TransportRoutes::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportRoute_descriptor_, &TransportRoute::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportRouteStop_descriptor_, &TransportRouteStop::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportStop_descriptor_, &TransportStop::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportStopsTree_descriptor_, &TransportStopsTree::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndTransportIndex_descriptor_, &OsmAndTransportIndex::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndPoiIndex_descriptor_, &OsmAndPoiIndex::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndPoiNameIndex_descriptor_, &OsmAndPoiNameIndex::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndPoiNameIndex_OsmAndPoiNameIndexData_descriptor_, &OsmAndPoiNameIndex_OsmAndPoiNameIndexData::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndPoiNameIndexDataAtom_descriptor_, &OsmAndPoiNameIndexDataAtom::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndCategoryTable_descriptor_, &OsmAndCategoryTable::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndSubtypesTable_descriptor_, &OsmAndSubtypesTable::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndPoiSubtype_descriptor_, &OsmAndPoiSubtype::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndPoiBox_descriptor_, &OsmAndPoiBox::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndPoiCategories_descriptor_, &OsmAndPoiCategories::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndPoiBoxData_descriptor_, &OsmAndPoiBoxData::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndPoiBoxDataAtom_descriptor_, &OsmAndPoiBoxDataAtom::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IdTable_descriptor_, &IdTable::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestrictionData_descriptor_, &RestrictionData::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteData_descriptor_, &RouteData::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndRoutingIndex_descriptor_, &OsmAndRoutingIndex::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndRoutingIndex_RouteEncodingRule_descriptor_, &OsmAndRoutingIndex_RouteEncodingRule::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndRoutingIndex_RouteDataBox_descriptor_, &OsmAndRoutingIndex_RouteDataBox::default_instance());
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsmAndRoutingIndex_RouteDataBlock_descriptor_, &OsmAndRoutingIndex_RouteDataBlock::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OBF_2eproto() {
  delete OsmAndStructure::default_instance_;
  delete OsmAndStructure_reflection_;
  delete OsmAndTileBox::default_instance_;
  delete OsmAndTileBox_reflection_;
  delete StringTable::default_instance_;
  delete StringTable_reflection_;
  delete IndexedStringTable::default_instance_;
  delete IndexedStringTable_reflection_;
  delete OsmAndMapIndex::default_instance_;
  delete OsmAndMapIndex_reflection_;
  delete OsmAndMapIndex_MapEncodingRule::default_instance_;
  delete OsmAndMapIndex_MapEncodingRule_reflection_;
  delete OsmAndMapIndex_MapRootLevel::default_instance_;
  delete OsmAndMapIndex_MapRootLevel_reflection_;
  delete OsmAndMapIndex_MapDataBox::default_instance_;
  delete OsmAndMapIndex_MapDataBox_reflection_;
  delete MapDataBlock::default_instance_;
  delete MapDataBlock_reflection_;
  delete MapData::default_instance_;
  delete MapData_reflection_;
  delete OsmAndAddressIndex::default_instance_;
  delete OsmAndAddressIndex_reflection_;
  delete OsmAndAddressIndex_CitiesIndex::default_instance_;
  delete OsmAndAddressIndex_CitiesIndex_reflection_;
  delete OsmAndAddressNameIndexData::default_instance_;
  delete OsmAndAddressNameIndexData_reflection_;
  delete OsmAndAddressNameIndexData_AddressNameIndexData::default_instance_;
  delete OsmAndAddressNameIndexData_AddressNameIndexData_reflection_;
  delete AddressNameIndexDataAtom::default_instance_;
  delete AddressNameIndexDataAtom_reflection_;
  delete CityIndex::default_instance_;
  delete CityIndex_reflection_;
  delete CityBlockIndex::default_instance_;
  delete CityBlockIndex_reflection_;
  delete StreetIndex::default_instance_;
  delete StreetIndex_reflection_;
  delete StreetIntersection::default_instance_;
  delete StreetIntersection_reflection_;
  delete BuildingIndex::default_instance_;
  delete BuildingIndex_reflection_;
  delete TransportRoutes::default_instance_;
  delete TransportRoutes_reflection_;
  delete TransportRoute::default_instance_;
  delete TransportRoute_reflection_;
  delete TransportRouteStop::default_instance_;
  delete TransportRouteStop_reflection_;
  delete TransportStop::default_instance_;
  delete TransportStop_reflection_;
  delete TransportStopsTree::default_instance_;
  delete TransportStopsTree_reflection_;
  delete OsmAndTransportIndex::default_instance_;
  delete OsmAndTransportIndex_reflection_;
  delete OsmAndPoiIndex::default_instance_;
  delete OsmAndPoiIndex_reflection_;
  delete OsmAndPoiNameIndex::default_instance_;
  delete OsmAndPoiNameIndex_reflection_;
  delete OsmAndPoiNameIndex_OsmAndPoiNameIndexData::default_instance_;
  delete OsmAndPoiNameIndex_OsmAndPoiNameIndexData_reflection_;
  delete OsmAndPoiNameIndexDataAtom::default_instance_;
  delete OsmAndPoiNameIndexDataAtom_reflection_;
  delete OsmAndCategoryTable::default_instance_;
  delete OsmAndCategoryTable_reflection_;
  delete OsmAndSubtypesTable::default_instance_;
  delete OsmAndSubtypesTable_reflection_;
  delete OsmAndPoiSubtype::default_instance_;
  delete OsmAndPoiSubtype_reflection_;
  delete OsmAndPoiBox::default_instance_;
  delete OsmAndPoiBox_reflection_;
  delete OsmAndPoiCategories::default_instance_;
  delete OsmAndPoiCategories_reflection_;
  delete OsmAndPoiBoxData::default_instance_;
  delete OsmAndPoiBoxData_reflection_;
  delete OsmAndPoiBoxDataAtom::default_instance_;
  delete OsmAndPoiBoxDataAtom_reflection_;
  delete IdTable::default_instance_;
  delete IdTable_reflection_;
  delete RestrictionData::default_instance_;
  delete RestrictionData_reflection_;
  delete RouteData::default_instance_;
  delete RouteData_reflection_;
  delete OsmAndRoutingIndex::default_instance_;
  delete OsmAndRoutingIndex_reflection_;
  delete OsmAndRoutingIndex_RouteEncodingRule::default_instance_;
  delete OsmAndRoutingIndex_RouteEncodingRule_reflection_;
  delete OsmAndRoutingIndex_RouteDataBox::default_instance_;
  delete OsmAndRoutingIndex_RouteDataBox_reflection_;
  delete OsmAndRoutingIndex_RouteDataBlock::default_instance_;
  delete OsmAndRoutingIndex_RouteDataBlock_reflection_;
}

void protobuf_AddDesc_OBF_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::obf_protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tOBF.proto\022\nOsmAnd.OBF\"\321\002\n\017OsmAndStruct"
    "ure\022\017\n\007version\030\001 \002(\r\022\023\n\013dateCreated\030\022 \002("
    "\003\0224\n\014addressIndex\030\007 \003(\0132\036.OsmAnd.OBF.Osm"
    "AndAddressIndex\0228\n\016transportIndex\030\004 \003(\0132"
    " .OsmAnd.OBF.OsmAndTransportIndex\022,\n\010poi"
    "Index\030\010 \003(\0132\032.OsmAnd.OBF.OsmAndPoiIndex\022"
    ",\n\010mapIndex\030\006 \003(\0132\032.OsmAnd.OBF.OsmAndMap"
    "Index\0224\n\014routingIndex\030\t \003(\0132\036.OsmAnd.OBF"
    ".OsmAndRoutingIndex\022\026\n\016versionConfirm\030  "
    "\002(\r\"I\n\rOsmAndTileBox\022\014\n\004left\030\001 \002(\r\022\r\n\005ri"
    "ght\030\002 \002(\r\022\013\n\003top\030\003 \002(\r\022\016\n\006bottom\030\004 \002(\r\"\030"
    "\n\013StringTable\022\t\n\001s\030\001 \003(\t\"q\n\022IndexedStrin"
    "gTable\022\016\n\006prefix\030\001 \001(\t\022\013\n\003key\030\003 \003(\t\022\013\n\003v"
    "al\030\004 \003(\007\0221\n\tsubtables\030\005 \003(\0132\036.OsmAnd.OBF"
    ".IndexedStringTable\"\337\004\n\016OsmAndMapIndex\022\014"
    "\n\004name\030\002 \002(\t\0229\n\005rules\030\004 \003(\0132*.OsmAnd.OBF"
    ".OsmAndMapIndex.MapEncodingRule\0227\n\006level"
    "s\030\005 \003(\0132\'.OsmAnd.OBF.OsmAndMapIndex.MapR"
    "ootLevel\032X\n\017MapEncodingRule\022\013\n\003tag\030\003 \002(\t"
    "\022\r\n\005value\030\005 \001(\t\022\n\n\002id\030\007 \001(\r\022\017\n\007minZoom\030\t"
    " \001(\r\022\014\n\004type\030\n \001(\r\032\312\001\n\014MapRootLevel\022\017\n\007m"
    "axZoom\030\001 \002(\005\022\017\n\007minZoom\030\002 \002(\005\022\014\n\004left\030\003 "
    "\002(\005\022\r\n\005right\030\004 \002(\005\022\013\n\003top\030\005 \002(\005\022\016\n\006botto"
    "m\030\006 \002(\005\0224\n\005boxes\030\007 \003(\0132%.OsmAnd.OBF.OsmA"
    "ndMapIndex.MapDataBox\022(\n\006blocks\030\017 \003(\0132\030."
    "OsmAnd.OBF.MapDataBlock\032\243\001\n\nMapDataBox\022\014"
    "\n\004left\030\001 \002(\021\022\r\n\005right\030\002 \002(\021\022\013\n\003top\030\003 \002(\021"
    "\022\016\n\006bottom\030\004 \002(\021\022\026\n\016shiftToMapData\030\005 \001(\007"
    "\022\r\n\005ocean\030\006 \001(\010\0224\n\005boxes\030\007 \003(\0132%.OsmAnd."
    "OBF.OsmAndMapIndex.MapDataBox\"v\n\014MapData"
    "Block\022\016\n\006baseId\030\n \001(\004\022(\n\013dataObjects\030\014 \003"
    "(\0132\023.OsmAnd.OBF.MapData\022,\n\013stringTable\030\017"
    " \001(\0132\027.OsmAnd.OBF.StringTable\"\266\001\n\007MapDat"
    "a\022\023\n\013coordinates\030\001 \001(\014\022\027\n\017areaCoordinate"
    "s\030\002 \001(\014\022\037\n\027polygonInnerCoordinates\030\004 \003(\014"
    "\022\027\n\017additionalTypes\030\006 \001(\014\022\r\n\005types\030\007 \002(\014"
    "\022\023\n\013stringNames\030\n \001(\014\022\n\n\002id\030\014 \002(\022\022\023\n\013ras"
    "terBytes\030\017 \001(\014\"\364\003\n\022OsmAndAddressIndex\022\014\n"
    "\004name\030\001 \002(\t\022\017\n\007name_en\030\002 \001(\t\022-\n\nboundari"
    "es\030\003 \001(\0132\031.OsmAnd.OBF.OsmAndTileBox\0223\n\022a"
    "ttributeTagsTable\030\004 \001(\0132\027.OsmAnd.OBF.Str"
    "ingTable\022:\n\006cities\030\006 \003(\0132*.OsmAnd.OBF.Os"
    "mAndAddressIndex.CitiesIndex\0229\n\tnameInde"
    "x\030\007 \001(\0132&.OsmAnd.OBF.OsmAndAddressNameIn"
    "dexData\032\343\001\n\013CitiesIndex\022C\n\004type\030\002 \002(\01625."
    "OsmAnd.OBF.OsmAndAddressIndex.CitiesInde"
    "x.CitiesType\022%\n\006cities\030\005 \003(\0132\025.OsmAnd.OB"
    "F.CityIndex\022*\n\006blocks\030\007 \003(\0132\032.OsmAnd.OBF"
    ".CityBlockIndex\"<\n\nCitiesType\022\021\n\rCitiesO"
    "rTowns\020\001\022\r\n\tPostcodes\020\002\022\014\n\010Villages\020\003\"\342\001"
    "\n\032OsmAndAddressNameIndexData\022-\n\005table\030\004 "
    "\002(\0132\036.OsmAnd.OBF.IndexedStringTable\022I\n\004a"
    "tom\030\007 \003(\0132;.OsmAnd.OBF.OsmAndAddressName"
    "IndexData.AddressNameIndexData\032J\n\024Addres"
    "sNameIndexData\0222\n\004atom\030\004 \003(\0132$.OsmAnd.OB"
    "F.AddressNameIndexDataAtom\"v\n\030AddressNam"
    "eIndexDataAtom\022\014\n\004name\030\001 \001(\t\022\016\n\006nameEn\030\002"
    " \001(\t\022\014\n\004type\030\003 \002(\r\022\024\n\014shiftToIndex\030\005 \003(\005"
    "\022\030\n\020shiftToCityIndex\030\006 \003(\005\"\260\001\n\tCityIndex"
    "\022\021\n\tcity_type\030\001 \001(\r\022\014\n\004name\030\002 \002(\t\022\017\n\007nam"
    "e_en\030\003 \001(\t\022\n\n\002id\030\004 \001(\004\022\t\n\001x\030\005 \002(\r\022\t\n\001y\030\006"
    " \002(\r\022\027\n\017attributeTagIds\030\007 \003(\r\022\027\n\017attribu"
    "teValues\030\010 \003(\t\022\035\n\025shiftToCityBlockIndex\030"
    "\n \001(\007\"\202\001\n\016CityBlockIndex\022\030\n\020shiftToCityI"
    "ndex\030\004 \001(\007\022,\n\tbuildings\030\n \003(\0132\031.OsmAnd.O"
    "BF.BuildingIndex\022(\n\007streets\030\014 \003(\0132\027.OsmA"
    "nd.OBF.StreetIndex\"\345\001\n\013StreetIndex\022\014\n\004na"
    "me\030\001 \002(\t\022\017\n\007name_en\030\002 \001(\t\022\t\n\001x\030\003 \002(\021\022\t\n\001"
    "y\030\004 \002(\021\022\n\n\002id\030\006 \001(\004\022\027\n\017attributeTagIds\030\007"
    " \003(\r\022\027\n\017attributeValues\030\010 \003(\t\022,\n\tbuildin"
    "gs\030\014 \003(\0132\031.OsmAnd.OBF.BuildingIndex\0225\n\ri"
    "ntersections\030\005 \003(\0132\036.OsmAnd.OBF.StreetIn"
    "tersection\"\221\001\n\022StreetIntersection\022\014\n\004nam"
    "e\030\002 \002(\t\022\017\n\007name_en\030\003 \001(\t\022\024\n\014intersectedX"
    "\030\004 \002(\021\022\024\n\014intersectedY\030\005 \002(\021\022\027\n\017attribut"
    "eTagIds\030\007 \003(\r\022\027\n\017attributeValues\030\010 \003(\t\"\230"
    "\002\n\rBuildingIndex\022\014\n\004name\030\001 \002(\t\022\017\n\007name_e"
    "n\030\002 \001(\t\022\r\n\005name2\030\003 \001(\t\022\020\n\010name_en2\030\004 \001(\t"
    "\022\025\n\rinterpolation\030\005 \001(\021\022\t\n\001x\030\007 \002(\021\022\t\n\001y\030"
    "\010 \002(\021\022\n\n\002x2\030\t \001(\021\022\n\n\002y2\030\n \001(\021\022\n\n\002id\030\r \001("
    "\004\022\020\n\010postcode\030\016 \001(\t\022\027\n\017attributeTagIds\030\017"
    " \003(\r\022\027\n\017attributeValues\030\020 \003(\t\022\030\n\020attribu"
    "teTagIds2\030\021 \003(\r\022\030\n\020attributeValues2\030\022 \003("
    "\t\"=\n\017TransportRoutes\022*\n\006routes\030\006 \003(\0132\032.O"
    "smAnd.OBF.TransportRoute\"\345\001\n\016TransportRo"
    "ute\022\n\n\002id\030\001 \002(\004\022\014\n\004type\030\003 \001(\r\022\020\n\010operato"
    "r\030\004 \001(\r\022\013\n\003ref\030\005 \001(\t\022\014\n\004name\030\006 \001(\r\022\017\n\007na"
    "me_en\030\007 \001(\r\022\020\n\010distance\030\010 \001(\r\0223\n\013directS"
    "tops\030\017 \003(\0132\036.OsmAnd.OBF.TransportRouteSt"
    "op\0224\n\014reverseStops\030\020 \003(\0132\036.OsmAnd.OBF.Tr"
    "ansportRouteStop\"W\n\022TransportRouteStop\022\n"
    "\n\002id\030\001 \002(\022\022\n\n\002dx\030\002 \002(\021\022\n\n\002dy\030\003 \002(\021\022\014\n\004na"
    "me\030\006 \002(\r\022\017\n\007name_en\030\007 \001(\r\"b\n\rTransportSt"
    "op\022\n\n\002dx\030\001 \002(\021\022\n\n\002dy\030\002 \002(\021\022\n\n\002id\030\005 \002(\022\022\014"
    "\n\004name\030\006 \002(\r\022\017\n\007name_en\030\007 \001(\r\022\016\n\006routes\030"
    "\020 \003(\r\"\272\001\n\022TransportStopsTree\022\014\n\004left\030\001 \002"
    "(\021\022\r\n\005right\030\002 \002(\021\022\013\n\003top\030\003 \002(\021\022\016\n\006bottom"
    "\030\004 \002(\021\0220\n\010subtrees\030\007 \003(\0132\036.OsmAnd.OBF.Tr"
    "ansportStopsTree\022(\n\005leafs\030\010 \003(\0132\031.OsmAnd"
    ".OBF.TransportStop\022\016\n\006baseId\030\020 \001(\004\"\256\001\n\024O"
    "smAndTransportIndex\022\014\n\004name\030\001 \001(\t\022+\n\006rou"
    "tes\030\003 \001(\0132\033.OsmAnd.OBF.TransportRoutes\022-"
    "\n\005stops\030\006 \001(\0132\036.OsmAnd.OBF.TransportStop"
    "sTree\022,\n\013stringTable\030\t \002(\0132\027.OsmAnd.OBF."
    "StringTable\"\312\002\n\016OsmAndPoiIndex\022\014\n\004name\030\001"
    " \002(\t\022-\n\nboundaries\030\002 \002(\0132\031.OsmAnd.OBF.Os"
    "mAndTileBox\0228\n\017categoriesTable\030\003 \003(\0132\037.O"
    "smAnd.OBF.OsmAndCategoryTable\0221\n\tnameInd"
    "ex\030\004 \001(\0132\036.OsmAnd.OBF.OsmAndPoiNameIndex"
    "\0226\n\rsubtypesTable\030\005 \001(\0132\037.OsmAnd.OBF.Osm"
    "AndSubtypesTable\022\'\n\005boxes\030\006 \003(\0132\030.OsmAnd"
    ".OBF.OsmAndPoiBox\022-\n\007poiData\030\t \003(\0132\034.Osm"
    "And.OBF.OsmAndPoiBoxData\"\331\001\n\022OsmAndPoiNa"
    "meIndex\022-\n\005table\030\003 \002(\0132\036.OsmAnd.OBF.Inde"
    "xedStringTable\022C\n\004data\030\005 \003(\01325.OsmAnd.OB"
    "F.OsmAndPoiNameIndex.OsmAndPoiNameIndexD"
    "ata\032O\n\026OsmAndPoiNameIndexData\0225\n\005atoms\030\003"
    " \003(\0132&.OsmAnd.OBF.OsmAndPoiNameIndexData"
    "Atom\"Q\n\032OsmAndPoiNameIndexDataAtom\022\014\n\004zo"
    "om\030\002 \001(\r\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004 \001(\r\022\017\n\007shiftT"
    "o\030\016 \001(\007\">\n\023OsmAndCategoryTable\022\020\n\010catego"
    "ry\030\001 \002(\t\022\025\n\rsubcategories\030\003 \003(\t\"E\n\023OsmAn"
    "dSubtypesTable\022.\n\010subtypes\030\004 \003(\0132\034.OsmAn"
    "d.OBF.OsmAndPoiSubtype\"\205\001\n\020OsmAndPoiSubt"
    "ype\022\014\n\004name\030\001 \002(\t\022\017\n\007tagname\030\002 \001(\t\022\016\n\006is"
    "Text\030\003 \002(\010\022\021\n\tfrequency\030\005 \001(\r\022\031\n\021subtype"
    "ValuesSize\030\006 \001(\r\022\024\n\014subtypeValue\030\010 \003(\t\"\255"
    "\001\n\014OsmAndPoiBox\022\014\n\004zoom\030\001 \002(\r\022\014\n\004left\030\002 "
    "\002(\021\022\013\n\003top\030\003 \002(\021\0223\n\ncategories\030\004 \001(\0132\037.O"
    "smAnd.OBF.OsmAndPoiCategories\022*\n\010subBoxe"
    "s\030\n \003(\0132\030.OsmAnd.OBF.OsmAndPoiBox\022\023\n\013shi"
    "ftToData\030\016 \001(\007\"@\n\023OsmAndPoiCategories\022\022\n"
    "\ncategories\030\003 \003(\r\022\025\n\rsubcategories\030\005 \003(\r"
    "\"i\n\020OsmAndPoiBoxData\022\014\n\004zoom\030\001 \001(\r\022\t\n\001x\030"
    "\002 \001(\r\022\t\n\001y\030\003 \001(\r\0221\n\007poiData\030\005 \003(\0132 .OsmA"
    "nd.OBF.OsmAndPoiBoxDataAtom\"\360\001\n\024OsmAndPo"
    "iBoxDataAtom\022\n\n\002dx\030\002 \002(\021\022\n\n\002dy\030\003 \002(\021\022\022\n\n"
    "categories\030\004 \003(\r\022\025\n\rsubcategories\030\005 \003(\r\022"
    "\014\n\004name\030\006 \001(\t\022\016\n\006nameEn\030\007 \001(\t\022\n\n\002id\030\010 \001("
    "\004\022\024\n\014openingHours\030\n \001(\t\022\014\n\004site\030\013 \001(\t\022\r\n"
    "\005phone\030\014 \001(\t\022\014\n\004note\030\r \001(\t\022\026\n\016textCatego"
    "ries\030\016 \003(\r\022\022\n\ntextValues\030\017 \003(\t\"\032\n\007IdTabl"
    "e\022\017\n\007routeId\030\001 \003(\022\"F\n\017RestrictionData\022\014\n"
    "\004type\030\001 \002(\005\022\014\n\004from\030\002 \002(\005\022\n\n\002to\030\003 \002(\005\022\013\n"
    "\003via\030\004 \001(\005\"d\n\tRouteData\022\016\n\006points\030\001 \002(\014\022"
    "\022\n\npointTypes\030\004 \001(\014\022\r\n\005types\030\007 \002(\014\022\017\n\007ro"
    "uteId\030\014 \002(\005\022\023\n\013stringNames\030\016 \001(\014\"\304\005\n\022Osm"
    "AndRoutingIndex\022\014\n\004name\030\001 \002(\t\022\?\n\005rules\030\002"
    " \003(\01320.OsmAnd.OBF.OsmAndRoutingIndex.Rou"
    "teEncodingRule\022>\n\trootBoxes\030\003 \003(\0132+.OsmA"
    "nd.OBF.OsmAndRoutingIndex.RouteDataBox\022A"
    "\n\014basemapBoxes\030\004 \003(\0132+.OsmAnd.OBF.OsmAnd"
    "RoutingIndex.RouteDataBox\022=\n\006blocks\030\005 \003("
    "\0132-.OsmAnd.OBF.OsmAndRoutingIndex.RouteD"
    "ataBlock\032;\n\021RouteEncodingRule\022\013\n\003tag\030\003 \002"
    "(\t\022\r\n\005value\030\005 \002(\t\022\n\n\002id\030\007 \001(\r\032\231\001\n\014RouteD"
    "ataBox\022\014\n\004left\030\001 \002(\021\022\r\n\005right\030\002 \002(\021\022\013\n\003t"
    "op\030\003 \002(\021\022\016\n\006bottom\030\004 \002(\021\022\023\n\013shiftToData\030"
    "\005 \001(\007\022:\n\005boxes\030\007 \003(\0132+.OsmAnd.OBF.OsmAnd"
    "RoutingIndex.RouteDataBox\032\303\001\n\016RouteDataB"
    "lock\022$\n\007idTable\030\005 \001(\0132\023.OsmAnd.OBF.IdTab"
    "le\022*\n\013dataObjects\030\006 \003(\0132\025.OsmAnd.OBF.Rou"
    "teData\0221\n\014restrictions\030\007 \003(\0132\033.OsmAnd.OB"
    "F.RestrictionData\022,\n\013stringTable\030\010 \001(\0132\027"
    ".OsmAnd.OBF.StringTableB\036\n\021net.osmand.bi"
    "naryB\tOsmandOdb", 6615);
  ::google::obf_protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OBF.proto", &protobuf_RegisterTypes);
  OsmAndStructure::default_instance_ = new OsmAndStructure();
  OsmAndTileBox::default_instance_ = new OsmAndTileBox();
  StringTable::default_instance_ = new StringTable();
  IndexedStringTable::default_instance_ = new IndexedStringTable();
  OsmAndMapIndex::default_instance_ = new OsmAndMapIndex();
  OsmAndMapIndex_MapEncodingRule::default_instance_ = new OsmAndMapIndex_MapEncodingRule();
  OsmAndMapIndex_MapRootLevel::default_instance_ = new OsmAndMapIndex_MapRootLevel();
  OsmAndMapIndex_MapDataBox::default_instance_ = new OsmAndMapIndex_MapDataBox();
  MapDataBlock::default_instance_ = new MapDataBlock();
  MapData::default_instance_ = new MapData();
  OsmAndAddressIndex::default_instance_ = new OsmAndAddressIndex();
  OsmAndAddressIndex_CitiesIndex::default_instance_ = new OsmAndAddressIndex_CitiesIndex();
  OsmAndAddressNameIndexData::default_instance_ = new OsmAndAddressNameIndexData();
  OsmAndAddressNameIndexData_AddressNameIndexData::default_instance_ = new OsmAndAddressNameIndexData_AddressNameIndexData();
  AddressNameIndexDataAtom::default_instance_ = new AddressNameIndexDataAtom();
  CityIndex::default_instance_ = new CityIndex();
  CityBlockIndex::default_instance_ = new CityBlockIndex();
  StreetIndex::default_instance_ = new StreetIndex();
  StreetIntersection::default_instance_ = new StreetIntersection();
  BuildingIndex::default_instance_ = new BuildingIndex();
  TransportRoutes::default_instance_ = new TransportRoutes();
  TransportRoute::default_instance_ = new TransportRoute();
  TransportRouteStop::default_instance_ = new TransportRouteStop();
  TransportStop::default_instance_ = new TransportStop();
  TransportStopsTree::default_instance_ = new TransportStopsTree();
  OsmAndTransportIndex::default_instance_ = new OsmAndTransportIndex();
  OsmAndPoiIndex::default_instance_ = new OsmAndPoiIndex();
  OsmAndPoiNameIndex::default_instance_ = new OsmAndPoiNameIndex();
  OsmAndPoiNameIndex_OsmAndPoiNameIndexData::default_instance_ = new OsmAndPoiNameIndex_OsmAndPoiNameIndexData();
  OsmAndPoiNameIndexDataAtom::default_instance_ = new OsmAndPoiNameIndexDataAtom();
  OsmAndCategoryTable::default_instance_ = new OsmAndCategoryTable();
  OsmAndSubtypesTable::default_instance_ = new OsmAndSubtypesTable();
  OsmAndPoiSubtype::default_instance_ = new OsmAndPoiSubtype();
  OsmAndPoiBox::default_instance_ = new OsmAndPoiBox();
  OsmAndPoiCategories::default_instance_ = new OsmAndPoiCategories();
  OsmAndPoiBoxData::default_instance_ = new OsmAndPoiBoxData();
  OsmAndPoiBoxDataAtom::default_instance_ = new OsmAndPoiBoxDataAtom();
  IdTable::default_instance_ = new IdTable();
  RestrictionData::default_instance_ = new RestrictionData();
  RouteData::default_instance_ = new RouteData();
  OsmAndRoutingIndex::default_instance_ = new OsmAndRoutingIndex();
  OsmAndRoutingIndex_RouteEncodingRule::default_instance_ = new OsmAndRoutingIndex_RouteEncodingRule();
  OsmAndRoutingIndex_RouteDataBox::default_instance_ = new OsmAndRoutingIndex_RouteDataBox();
  OsmAndRoutingIndex_RouteDataBlock::default_instance_ = new OsmAndRoutingIndex_RouteDataBlock();
  OsmAndStructure::default_instance_->InitAsDefaultInstance();
  OsmAndTileBox::default_instance_->InitAsDefaultInstance();
  StringTable::default_instance_->InitAsDefaultInstance();
  IndexedStringTable::default_instance_->InitAsDefaultInstance();
  OsmAndMapIndex::default_instance_->InitAsDefaultInstance();
  OsmAndMapIndex_MapEncodingRule::default_instance_->InitAsDefaultInstance();
  OsmAndMapIndex_MapRootLevel::default_instance_->InitAsDefaultInstance();
  OsmAndMapIndex_MapDataBox::default_instance_->InitAsDefaultInstance();
  MapDataBlock::default_instance_->InitAsDefaultInstance();
  MapData::default_instance_->InitAsDefaultInstance();
  OsmAndAddressIndex::default_instance_->InitAsDefaultInstance();
  OsmAndAddressIndex_CitiesIndex::default_instance_->InitAsDefaultInstance();
  OsmAndAddressNameIndexData::default_instance_->InitAsDefaultInstance();
  OsmAndAddressNameIndexData_AddressNameIndexData::default_instance_->InitAsDefaultInstance();
  AddressNameIndexDataAtom::default_instance_->InitAsDefaultInstance();
  CityIndex::default_instance_->InitAsDefaultInstance();
  CityBlockIndex::default_instance_->InitAsDefaultInstance();
  StreetIndex::default_instance_->InitAsDefaultInstance();
  StreetIntersection::default_instance_->InitAsDefaultInstance();
  BuildingIndex::default_instance_->InitAsDefaultInstance();
  TransportRoutes::default_instance_->InitAsDefaultInstance();
  TransportRoute::default_instance_->InitAsDefaultInstance();
  TransportRouteStop::default_instance_->InitAsDefaultInstance();
  TransportStop::default_instance_->InitAsDefaultInstance();
  TransportStopsTree::default_instance_->InitAsDefaultInstance();
  OsmAndTransportIndex::default_instance_->InitAsDefaultInstance();
  OsmAndPoiIndex::default_instance_->InitAsDefaultInstance();
  OsmAndPoiNameIndex::default_instance_->InitAsDefaultInstance();
  OsmAndPoiNameIndex_OsmAndPoiNameIndexData::default_instance_->InitAsDefaultInstance();
  OsmAndPoiNameIndexDataAtom::default_instance_->InitAsDefaultInstance();
  OsmAndCategoryTable::default_instance_->InitAsDefaultInstance();
  OsmAndSubtypesTable::default_instance_->InitAsDefaultInstance();
  OsmAndPoiSubtype::default_instance_->InitAsDefaultInstance();
  OsmAndPoiBox::default_instance_->InitAsDefaultInstance();
  OsmAndPoiCategories::default_instance_->InitAsDefaultInstance();
  OsmAndPoiBoxData::default_instance_->InitAsDefaultInstance();
  OsmAndPoiBoxDataAtom::default_instance_->InitAsDefaultInstance();
  IdTable::default_instance_->InitAsDefaultInstance();
  RestrictionData::default_instance_->InitAsDefaultInstance();
  RouteData::default_instance_->InitAsDefaultInstance();
  OsmAndRoutingIndex::default_instance_->InitAsDefaultInstance();
  OsmAndRoutingIndex_RouteEncodingRule::default_instance_->InitAsDefaultInstance();
  OsmAndRoutingIndex_RouteDataBox::default_instance_->InitAsDefaultInstance();
  OsmAndRoutingIndex_RouteDataBlock::default_instance_->InitAsDefaultInstance();
  ::google::obf_protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OBF_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OBF_2eproto {
  StaticDescriptorInitializer_OBF_2eproto() {
    protobuf_AddDesc_OBF_2eproto();
  }
} static_descriptor_initializer_OBF_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int OsmAndStructure::kVersionFieldNumber;
const int OsmAndStructure::kDateCreatedFieldNumber;
const int OsmAndStructure::kAddressIndexFieldNumber;
const int OsmAndStructure::kTransportIndexFieldNumber;
const int OsmAndStructure::kPoiIndexFieldNumber;
const int OsmAndStructure::kMapIndexFieldNumber;
const int OsmAndStructure::kRoutingIndexFieldNumber;
const int OsmAndStructure::kVersionConfirmFieldNumber;
#endif  // !_MSC_VER

OsmAndStructure::OsmAndStructure()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndStructure::InitAsDefaultInstance() {
}

OsmAndStructure::OsmAndStructure(const OsmAndStructure& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndStructure::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  datecreated_ = GOOGLE_LONGLONG(0);
  versionconfirm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndStructure::~OsmAndStructure() {
  SharedDtor();
}

void OsmAndStructure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndStructure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndStructure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndStructure_descriptor_;
}

const OsmAndStructure& OsmAndStructure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndStructure* OsmAndStructure::default_instance_ = NULL;

OsmAndStructure* OsmAndStructure::New() const {
  return new OsmAndStructure;
}

void OsmAndStructure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    datecreated_ = GOOGLE_LONGLONG(0);
    versionconfirm_ = 0u;
  }
  addressindex_.Clear();
  transportindex_.Clear();
  poiindex_.Clear();
  mapindex_.Clear();
  routingindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndStructure::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_transportIndex;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndTransportIndex transportIndex = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transportIndex:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transportindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_transportIndex;
        if (input->ExpectTag(50)) goto parse_mapIndex;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndMapIndex mapIndex = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapIndex:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mapIndex;
        if (input->ExpectTag(58)) goto parse_addressIndex;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndAddressIndex addressIndex = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addressIndex:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addressindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_addressIndex;
        if (input->ExpectTag(66)) goto parse_poiIndex;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndPoiIndex poiIndex = 8;
      case 8: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiIndex:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poiindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_poiIndex;
        if (input->ExpectTag(74)) goto parse_routingIndex;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndRoutingIndex routingIndex = 9;
      case 9: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routingIndex:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routingindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_routingIndex;
        if (input->ExpectTag(144)) goto parse_dateCreated;
        break;
      }
      
      // required int64 dateCreated = 18;
      case 18: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateCreated:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datecreated_)));
          set_has_datecreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_versionConfirm;
        break;
      }
      
      // required uint32 versionConfirm = 32;
      case 32: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_versionConfirm:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &versionconfirm_)));
          set_has_versionconfirm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndStructure::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndTransportIndex transportIndex = 4;
  for (int i = 0; i < this->transportindex_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transportindex(i), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex mapIndex = 6;
  for (int i = 0; i < this->mapindex_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mapindex(i), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndAddressIndex addressIndex = 7;
  for (int i = 0; i < this->addressindex_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->addressindex(i), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiIndex poiIndex = 8;
  for (int i = 0; i < this->poiindex_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->poiindex(i), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex routingIndex = 9;
  for (int i = 0; i < this->routingindex_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->routingindex(i), output);
  }
  
  // required int64 dateCreated = 18;
  if (has_datecreated()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt64(18, this->datecreated(), output);
  }
  
  // required uint32 versionConfirm = 32;
  if (has_versionconfirm()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(32, this->versionconfirm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndStructure::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndTransportIndex transportIndex = 4;
  for (int i = 0; i < this->transportindex_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transportindex(i), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex mapIndex = 6;
  for (int i = 0; i < this->mapindex_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mapindex(i), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndAddressIndex addressIndex = 7;
  for (int i = 0; i < this->addressindex_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->addressindex(i), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiIndex poiIndex = 8;
  for (int i = 0; i < this->poiindex_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->poiindex(i), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex routingIndex = 9;
  for (int i = 0; i < this->routingindex_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->routingindex(i), target);
  }
  
  // required int64 dateCreated = 18;
  if (has_datecreated()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->datecreated(), target);
  }
  
  // required uint32 versionConfirm = 32;
  if (has_versionconfirm()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->versionconfirm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndStructure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // required int64 dateCreated = 18;
    if (has_datecreated()) {
      total_size += 2 +
        ::google::obf_protobuf::internal::WireFormatLite::Int64Size(
          this->datecreated());
    }
    
    // required uint32 versionConfirm = 32;
    if (has_versionconfirm()) {
      total_size += 2 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->versionconfirm());
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndAddressIndex addressIndex = 7;
  total_size += 1 * this->addressindex_size();
  for (int i = 0; i < this->addressindex_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addressindex(i));
  }
  
  // repeated .OsmAnd.OBF.OsmAndTransportIndex transportIndex = 4;
  total_size += 1 * this->transportindex_size();
  for (int i = 0; i < this->transportindex_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transportindex(i));
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiIndex poiIndex = 8;
  total_size += 1 * this->poiindex_size();
  for (int i = 0; i < this->poiindex_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poiindex(i));
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex mapIndex = 6;
  total_size += 1 * this->mapindex_size();
  for (int i = 0; i < this->mapindex_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapindex(i));
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex routingIndex = 9;
  total_size += 1 * this->routingindex_size();
  for (int i = 0; i < this->routingindex_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routingindex(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndStructure::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndStructure* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndStructure*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndStructure::MergeFrom(const OsmAndStructure& from) {
  GOOGLE_CHECK_NE(&from, this);
  addressindex_.MergeFrom(from.addressindex_);
  transportindex_.MergeFrom(from.transportindex_);
  poiindex_.MergeFrom(from.poiindex_);
  mapindex_.MergeFrom(from.mapindex_);
  routingindex_.MergeFrom(from.routingindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_datecreated()) {
      set_datecreated(from.datecreated());
    }
    if (from.has_versionconfirm()) {
      set_versionconfirm(from.versionconfirm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndStructure::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndStructure::CopyFrom(const OsmAndStructure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndStructure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000083) != 0x00000083) return false;
  
  for (int i = 0; i < addressindex_size(); i++) {
    if (!this->addressindex(i).IsInitialized()) return false;
  }
  for (int i = 0; i < transportindex_size(); i++) {
    if (!this->transportindex(i).IsInitialized()) return false;
  }
  for (int i = 0; i < poiindex_size(); i++) {
    if (!this->poiindex(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mapindex_size(); i++) {
    if (!this->mapindex(i).IsInitialized()) return false;
  }
  for (int i = 0; i < routingindex_size(); i++) {
    if (!this->routingindex(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndStructure::Swap(OsmAndStructure* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(datecreated_, other->datecreated_);
    addressindex_.Swap(&other->addressindex_);
    transportindex_.Swap(&other->transportindex_);
    poiindex_.Swap(&other->poiindex_);
    mapindex_.Swap(&other->mapindex_);
    routingindex_.Swap(&other->routingindex_);
    std::swap(versionconfirm_, other->versionconfirm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndStructure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndStructure_descriptor_;
  metadata.reflection = OsmAndStructure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndTileBox::kLeftFieldNumber;
const int OsmAndTileBox::kRightFieldNumber;
const int OsmAndTileBox::kTopFieldNumber;
const int OsmAndTileBox::kBottomFieldNumber;
#endif  // !_MSC_VER

OsmAndTileBox::OsmAndTileBox()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndTileBox::InitAsDefaultInstance() {
}

OsmAndTileBox::OsmAndTileBox(const OsmAndTileBox& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndTileBox::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0u;
  right_ = 0u;
  top_ = 0u;
  bottom_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndTileBox::~OsmAndTileBox() {
  SharedDtor();
}

void OsmAndTileBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndTileBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndTileBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndTileBox_descriptor_;
}

const OsmAndTileBox& OsmAndTileBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndTileBox* OsmAndTileBox::default_instance_ = NULL;

OsmAndTileBox* OsmAndTileBox::New() const {
  return new OsmAndTileBox;
}

void OsmAndTileBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0u;
    right_ = 0u;
    top_ = 0u;
    bottom_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndTileBox::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 left = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }
      
      // required uint32 right = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }
      
      // required uint32 top = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }
      
      // required uint32 bottom = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndTileBox::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required uint32 left = 1;
  if (has_left()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(1, this->left(), output);
  }
  
  // required uint32 right = 2;
  if (has_right()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(2, this->right(), output);
  }
  
  // required uint32 top = 3;
  if (has_top()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(3, this->top(), output);
  }
  
  // required uint32 bottom = 4;
  if (has_bottom()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(4, this->bottom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndTileBox::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required uint32 left = 1;
  if (has_left()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->left(), target);
  }
  
  // required uint32 right = 2;
  if (has_right()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->right(), target);
  }
  
  // required uint32 top = 3;
  if (has_top()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->top(), target);
  }
  
  // required uint32 bottom = 4;
  if (has_bottom()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bottom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndTileBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->left());
    }
    
    // required uint32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->right());
    }
    
    // required uint32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->top());
    }
    
    // required uint32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->bottom());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndTileBox::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndTileBox* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndTileBox*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndTileBox::MergeFrom(const OsmAndTileBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndTileBox::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndTileBox::CopyFrom(const OsmAndTileBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndTileBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void OsmAndTileBox::Swap(OsmAndTileBox* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndTileBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndTileBox_descriptor_;
  metadata.reflection = OsmAndTileBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringTable::kSFieldNumber;
#endif  // !_MSC_VER

StringTable::StringTable()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void StringTable::InitAsDefaultInstance() {
}

StringTable::StringTable(const StringTable& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringTable::~StringTable() {
  SharedDtor();
}

void StringTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* StringTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringTable_descriptor_;
}

const StringTable& StringTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

StringTable* StringTable::default_instance_ = NULL;

StringTable* StringTable::New() const {
  return new StringTable;
}

void StringTable::Clear() {
  s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringTable::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string s = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->add_s()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->s(0).data(), this->s(0).length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringTable::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // repeated string s = 1;
  for (int i = 0; i < this->s_size(); i++) {
  ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
    this->s(i).data(), this->s(i).length(),
    ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      1, this->s(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* StringTable::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // repeated string s = 1;
  for (int i = 0; i < this->s_size(); i++) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->s(i).data(), this->s(i).length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->s(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringTable::ByteSize() const {
  int total_size = 0;
  
  // repeated string s = 1;
  total_size += 1 * this->s_size();
  for (int i = 0; i < this->s_size(); i++) {
    total_size += ::google::obf_protobuf::internal::WireFormatLite::StringSize(
      this->s(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringTable::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringTable* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const StringTable*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringTable::MergeFrom(const StringTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  s_.MergeFrom(from.s_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringTable::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringTable::CopyFrom(const StringTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringTable::IsInitialized() const {
  
  return true;
}

void StringTable::Swap(StringTable* other) {
  if (other != this) {
    s_.Swap(&other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata StringTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = StringTable_descriptor_;
  metadata.reflection = StringTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndexedStringTable::kPrefixFieldNumber;
const int IndexedStringTable::kKeyFieldNumber;
const int IndexedStringTable::kValFieldNumber;
const int IndexedStringTable::kSubtablesFieldNumber;
#endif  // !_MSC_VER

IndexedStringTable::IndexedStringTable()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void IndexedStringTable::InitAsDefaultInstance() {
}

IndexedStringTable::IndexedStringTable(const IndexedStringTable& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndexedStringTable::SharedCtor() {
  _cached_size_ = 0;
  prefix_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexedStringTable::~IndexedStringTable() {
  SharedDtor();
}

void IndexedStringTable::SharedDtor() {
  if (prefix_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete prefix_;
  }
  if (this != default_instance_) {
  }
}

void IndexedStringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* IndexedStringTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexedStringTable_descriptor_;
}

const IndexedStringTable& IndexedStringTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

IndexedStringTable* IndexedStringTable::default_instance_ = NULL;

IndexedStringTable* IndexedStringTable::New() const {
  return new IndexedStringTable;
}

void IndexedStringTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_prefix()) {
      if (prefix_ != &::google::obf_protobuf::internal::kEmptyString) {
        prefix_->clear();
      }
    }
  }
  key_.Clear();
  val_.Clear();
  subtables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexedStringTable::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string prefix = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefix().data(), this->prefix().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }
      
      // repeated string key = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->add_key()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->key(0).data(), this->key(0).length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        if (input->ExpectTag(37)) goto parse_val;
        break;
      }
      
      // repeated fixed32 val = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37, input, this->mutable_val())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_val;
        if (input->ExpectTag(42)) goto parse_subtables;
        break;
      }
      
      // repeated .OsmAnd.OBF.IndexedStringTable subtables = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtables:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subtables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subtables;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IndexedStringTable::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // optional string prefix = 1;
  if (has_prefix()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      1, this->prefix(), output);
  }
  
  // repeated string key = 3;
  for (int i = 0; i < this->key_size(); i++) {
  ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
    this->key(i).data(), this->key(i).length(),
    ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      3, this->key(i), output);
  }
  
  // repeated fixed32 val = 4;
  for (int i = 0; i < this->val_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->val(i), output);
  }
  
  // repeated .OsmAnd.OBF.IndexedStringTable subtables = 5;
  for (int i = 0; i < this->subtables_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subtables(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* IndexedStringTable::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // optional string prefix = 1;
  if (has_prefix()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }
  
  // repeated string key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->key(i).data(), this->key(i).length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->key(i), target);
  }
  
  // repeated fixed32 val = 4;
  for (int i = 0; i < this->val_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(4, this->val(i), target);
  }
  
  // repeated .OsmAnd.OBF.IndexedStringTable subtables = 5;
  for (int i = 0; i < this->subtables_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subtables(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndexedStringTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string prefix = 1;
    if (has_prefix()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }
    
  }
  // repeated string key = 3;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::obf_protobuf::internal::WireFormatLite::StringSize(
      this->key(i));
  }
  
  // repeated fixed32 val = 4;
  {
    int data_size = 0;
    data_size = 4 * this->val_size();
    total_size += 1 * this->val_size() + data_size;
  }
  
  // repeated .OsmAnd.OBF.IndexedStringTable subtables = 5;
  total_size += 1 * this->subtables_size();
  for (int i = 0; i < this->subtables_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subtables(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexedStringTable::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexedStringTable* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const IndexedStringTable*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexedStringTable::MergeFrom(const IndexedStringTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  val_.MergeFrom(from.val_);
  subtables_.MergeFrom(from.subtables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexedStringTable::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexedStringTable::CopyFrom(const IndexedStringTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexedStringTable::IsInitialized() const {
  
  return true;
}

void IndexedStringTable::Swap(IndexedStringTable* other) {
  if (other != this) {
    std::swap(prefix_, other->prefix_);
    key_.Swap(&other->key_);
    val_.Swap(&other->val_);
    subtables_.Swap(&other->subtables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata IndexedStringTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = IndexedStringTable_descriptor_;
  metadata.reflection = IndexedStringTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndMapIndex_MapEncodingRule::kTagFieldNumber;
const int OsmAndMapIndex_MapEncodingRule::kValueFieldNumber;
const int OsmAndMapIndex_MapEncodingRule::kIdFieldNumber;
const int OsmAndMapIndex_MapEncodingRule::kMinZoomFieldNumber;
const int OsmAndMapIndex_MapEncodingRule::kTypeFieldNumber;
#endif  // !_MSC_VER

OsmAndMapIndex_MapEncodingRule::OsmAndMapIndex_MapEncodingRule()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndMapIndex_MapEncodingRule::InitAsDefaultInstance() {
}

OsmAndMapIndex_MapEncodingRule::OsmAndMapIndex_MapEncodingRule(const OsmAndMapIndex_MapEncodingRule& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndMapIndex_MapEncodingRule::SharedCtor() {
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  id_ = 0u;
  minzoom_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndMapIndex_MapEncodingRule::~OsmAndMapIndex_MapEncodingRule() {
  SharedDtor();
}

void OsmAndMapIndex_MapEncodingRule::SharedDtor() {
  if (tag_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (value_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void OsmAndMapIndex_MapEncodingRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndMapIndex_MapEncodingRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndMapIndex_MapEncodingRule_descriptor_;
}

const OsmAndMapIndex_MapEncodingRule& OsmAndMapIndex_MapEncodingRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndMapIndex_MapEncodingRule* OsmAndMapIndex_MapEncodingRule::default_instance_ = NULL;

OsmAndMapIndex_MapEncodingRule* OsmAndMapIndex_MapEncodingRule::New() const {
  return new OsmAndMapIndex_MapEncodingRule;
}

void OsmAndMapIndex_MapEncodingRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tag()) {
      if (tag_ != &::google::obf_protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::obf_protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    id_ = 0u;
    minzoom_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndMapIndex_MapEncodingRule::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }
      
      // optional string value = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_minZoom;
        break;
      }
      
      // optional uint32 minZoom = 9;
      case 9: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minZoom:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minzoom_)));
          set_has_minzoom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 10;
      case 10: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndMapIndex_MapEncodingRule::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required string tag = 3;
  if (has_tag()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      3, this->tag(), output);
  }
  
  // optional string value = 5;
  if (has_value()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      5, this->value(), output);
  }
  
  // optional uint32 id = 7;
  if (has_id()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(7, this->id(), output);
  }
  
  // optional uint32 minZoom = 9;
  if (has_minzoom()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(9, this->minzoom(), output);
  }
  
  // optional uint32 type = 10;
  if (has_type()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(10, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndMapIndex_MapEncodingRule::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required string tag = 3;
  if (has_tag()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }
  
  // optional string value = 5;
  if (has_value()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }
  
  // optional uint32 id = 7;
  if (has_id()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->id(), target);
  }
  
  // optional uint32 minZoom = 9;
  if (has_minzoom()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->minzoom(), target);
  }
  
  // optional uint32 type = 10;
  if (has_type()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndMapIndex_MapEncodingRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }
    
    // optional string value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional uint32 id = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 minZoom = 9;
    if (has_minzoom()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->minzoom());
    }
    
    // optional uint32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndMapIndex_MapEncodingRule::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndMapIndex_MapEncodingRule* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndMapIndex_MapEncodingRule*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndMapIndex_MapEncodingRule::MergeFrom(const OsmAndMapIndex_MapEncodingRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_minzoom()) {
      set_minzoom(from.minzoom());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndMapIndex_MapEncodingRule::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndMapIndex_MapEncodingRule::CopyFrom(const OsmAndMapIndex_MapEncodingRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndMapIndex_MapEncodingRule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OsmAndMapIndex_MapEncodingRule::Swap(OsmAndMapIndex_MapEncodingRule* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(value_, other->value_);
    std::swap(id_, other->id_);
    std::swap(minzoom_, other->minzoom_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndMapIndex_MapEncodingRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndMapIndex_MapEncodingRule_descriptor_;
  metadata.reflection = OsmAndMapIndex_MapEncodingRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OsmAndMapIndex_MapRootLevel::kMaxZoomFieldNumber;
const int OsmAndMapIndex_MapRootLevel::kMinZoomFieldNumber;
const int OsmAndMapIndex_MapRootLevel::kLeftFieldNumber;
const int OsmAndMapIndex_MapRootLevel::kRightFieldNumber;
const int OsmAndMapIndex_MapRootLevel::kTopFieldNumber;
const int OsmAndMapIndex_MapRootLevel::kBottomFieldNumber;
const int OsmAndMapIndex_MapRootLevel::kBoxesFieldNumber;
const int OsmAndMapIndex_MapRootLevel::kBlocksFieldNumber;
#endif  // !_MSC_VER

OsmAndMapIndex_MapRootLevel::OsmAndMapIndex_MapRootLevel()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndMapIndex_MapRootLevel::InitAsDefaultInstance() {
}

OsmAndMapIndex_MapRootLevel::OsmAndMapIndex_MapRootLevel(const OsmAndMapIndex_MapRootLevel& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndMapIndex_MapRootLevel::SharedCtor() {
  _cached_size_ = 0;
  maxzoom_ = 0;
  minzoom_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndMapIndex_MapRootLevel::~OsmAndMapIndex_MapRootLevel() {
  SharedDtor();
}

void OsmAndMapIndex_MapRootLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndMapIndex_MapRootLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndMapIndex_MapRootLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndMapIndex_MapRootLevel_descriptor_;
}

const OsmAndMapIndex_MapRootLevel& OsmAndMapIndex_MapRootLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndMapIndex_MapRootLevel* OsmAndMapIndex_MapRootLevel::default_instance_ = NULL;

OsmAndMapIndex_MapRootLevel* OsmAndMapIndex_MapRootLevel::New() const {
  return new OsmAndMapIndex_MapRootLevel;
}

void OsmAndMapIndex_MapRootLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxzoom_ = 0;
    minzoom_ = 0;
    left_ = 0;
    right_ = 0;
    top_ = 0;
    bottom_ = 0;
  }
  boxes_.Clear();
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndMapIndex_MapRootLevel::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 maxZoom = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxzoom_)));
          set_has_maxzoom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minZoom;
        break;
      }
      
      // required int32 minZoom = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minZoom:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minzoom_)));
          set_has_minzoom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left;
        break;
      }
      
      // required int32 left = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_right;
        break;
      }
      
      // required int32 right = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_top;
        break;
      }
      
      // required int32 top = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bottom;
        break;
      }
      
      // required int32 bottom = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndMapIndex.MapDataBox boxes = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        if (input->ExpectTag(122)) goto parse_blocks;
        break;
      }
      
      // repeated .OsmAnd.OBF.MapDataBlock blocks = 15;
      case 15: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndMapIndex_MapRootLevel::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required int32 maxZoom = 1;
  if (has_maxzoom()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(1, this->maxzoom(), output);
  }
  
  // required int32 minZoom = 2;
  if (has_minzoom()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(2, this->minzoom(), output);
  }
  
  // required int32 left = 3;
  if (has_left()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(3, this->left(), output);
  }
  
  // required int32 right = 4;
  if (has_right()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(4, this->right(), output);
  }
  
  // required int32 top = 5;
  if (has_top()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(5, this->top(), output);
  }
  
  // required int32 bottom = 6;
  if (has_bottom()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(6, this->bottom(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->boxes(i), output);
  }
  
  // repeated .OsmAnd.OBF.MapDataBlock blocks = 15;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->blocks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndMapIndex_MapRootLevel::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required int32 maxZoom = 1;
  if (has_maxzoom()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxzoom(), target);
  }
  
  // required int32 minZoom = 2;
  if (has_minzoom()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minzoom(), target);
  }
  
  // required int32 left = 3;
  if (has_left()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left(), target);
  }
  
  // required int32 right = 4;
  if (has_right()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right(), target);
  }
  
  // required int32 top = 5;
  if (has_top()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->top(), target);
  }
  
  // required int32 bottom = 6;
  if (has_bottom()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bottom(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->boxes(i), target);
  }
  
  // repeated .OsmAnd.OBF.MapDataBlock blocks = 15;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->blocks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndMapIndex_MapRootLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 maxZoom = 1;
    if (has_maxzoom()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::Int32Size(
          this->maxzoom());
    }
    
    // required int32 minZoom = 2;
    if (has_minzoom()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::Int32Size(
          this->minzoom());
    }
    
    // required int32 left = 3;
    if (has_left()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }
    
    // required int32 right = 4;
    if (has_right()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }
    
    // required int32 top = 5;
    if (has_top()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }
    
    // required int32 bottom = 6;
    if (has_bottom()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::Int32Size(
          this->bottom());
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapDataBox boxes = 7;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }
  
  // repeated .OsmAnd.OBF.MapDataBlock blocks = 15;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndMapIndex_MapRootLevel::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndMapIndex_MapRootLevel* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndMapIndex_MapRootLevel*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndMapIndex_MapRootLevel::MergeFrom(const OsmAndMapIndex_MapRootLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxes_.MergeFrom(from.boxes_);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxzoom()) {
      set_maxzoom(from.maxzoom());
    }
    if (from.has_minzoom()) {
      set_minzoom(from.minzoom());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndMapIndex_MapRootLevel::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndMapIndex_MapRootLevel::CopyFrom(const OsmAndMapIndex_MapRootLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndMapIndex_MapRootLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < boxes_size(); i++) {
    if (!this->boxes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndMapIndex_MapRootLevel::Swap(OsmAndMapIndex_MapRootLevel* other) {
  if (other != this) {
    std::swap(maxzoom_, other->maxzoom_);
    std::swap(minzoom_, other->minzoom_);
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    boxes_.Swap(&other->boxes_);
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndMapIndex_MapRootLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndMapIndex_MapRootLevel_descriptor_;
  metadata.reflection = OsmAndMapIndex_MapRootLevel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OsmAndMapIndex_MapDataBox::kLeftFieldNumber;
const int OsmAndMapIndex_MapDataBox::kRightFieldNumber;
const int OsmAndMapIndex_MapDataBox::kTopFieldNumber;
const int OsmAndMapIndex_MapDataBox::kBottomFieldNumber;
const int OsmAndMapIndex_MapDataBox::kShiftToMapDataFieldNumber;
const int OsmAndMapIndex_MapDataBox::kOceanFieldNumber;
const int OsmAndMapIndex_MapDataBox::kBoxesFieldNumber;
#endif  // !_MSC_VER

OsmAndMapIndex_MapDataBox::OsmAndMapIndex_MapDataBox()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndMapIndex_MapDataBox::InitAsDefaultInstance() {
}

OsmAndMapIndex_MapDataBox::OsmAndMapIndex_MapDataBox(const OsmAndMapIndex_MapDataBox& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndMapIndex_MapDataBox::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  shifttomapdata_ = 0u;
  ocean_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndMapIndex_MapDataBox::~OsmAndMapIndex_MapDataBox() {
  SharedDtor();
}

void OsmAndMapIndex_MapDataBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndMapIndex_MapDataBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndMapIndex_MapDataBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndMapIndex_MapDataBox_descriptor_;
}

const OsmAndMapIndex_MapDataBox& OsmAndMapIndex_MapDataBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndMapIndex_MapDataBox* OsmAndMapIndex_MapDataBox::default_instance_ = NULL;

OsmAndMapIndex_MapDataBox* OsmAndMapIndex_MapDataBox::New() const {
  return new OsmAndMapIndex_MapDataBox;
}

void OsmAndMapIndex_MapDataBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0;
    right_ = 0;
    top_ = 0;
    bottom_ = 0;
    shifttomapdata_ = 0u;
    ocean_ = false;
  }
  boxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndMapIndex_MapDataBox::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 left = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }
      
      // required sint32 right = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }
      
      // required sint32 top = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }
      
      // required sint32 bottom = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_shiftToMapData;
        break;
      }
      
      // optional fixed32 shiftToMapData = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shiftToMapData:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shifttomapdata_)));
          set_has_shifttomapdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ocean;
        break;
      }
      
      // optional bool ocean = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ocean:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::obf_protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ocean_)));
          set_has_ocean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndMapIndex.MapDataBox boxes = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndMapIndex_MapDataBox::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required sint32 left = 1;
  if (has_left()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(1, this->left(), output);
  }
  
  // required sint32 right = 2;
  if (has_right()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(2, this->right(), output);
  }
  
  // required sint32 top = 3;
  if (has_top()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(3, this->top(), output);
  }
  
  // required sint32 bottom = 4;
  if (has_bottom()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(4, this->bottom(), output);
  }
  
  // optional fixed32 shiftToMapData = 5;
  if (has_shifttomapdata()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32(5, this->shifttomapdata(), output);
  }
  
  // optional bool ocean = 6;
  if (has_ocean()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBool(6, this->ocean(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->boxes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndMapIndex_MapDataBox::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required sint32 left = 1;
  if (has_left()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->left(), target);
  }
  
  // required sint32 right = 2;
  if (has_right()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->right(), target);
  }
  
  // required sint32 top = 3;
  if (has_top()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->top(), target);
  }
  
  // required sint32 bottom = 4;
  if (has_bottom()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->bottom(), target);
  }
  
  // optional fixed32 shiftToMapData = 5;
  if (has_shifttomapdata()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->shifttomapdata(), target);
  }
  
  // optional bool ocean = 6;
  if (has_ocean()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ocean(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->boxes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndMapIndex_MapDataBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->left());
    }
    
    // required sint32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->right());
    }
    
    // required sint32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->top());
    }
    
    // required sint32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->bottom());
    }
    
    // optional fixed32 shiftToMapData = 5;
    if (has_shifttomapdata()) {
      total_size += 1 + 4;
    }
    
    // optional bool ocean = 6;
    if (has_ocean()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapDataBox boxes = 7;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndMapIndex_MapDataBox::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndMapIndex_MapDataBox* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndMapIndex_MapDataBox*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndMapIndex_MapDataBox::MergeFrom(const OsmAndMapIndex_MapDataBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxes_.MergeFrom(from.boxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
    if (from.has_shifttomapdata()) {
      set_shifttomapdata(from.shifttomapdata());
    }
    if (from.has_ocean()) {
      set_ocean(from.ocean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndMapIndex_MapDataBox::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndMapIndex_MapDataBox::CopyFrom(const OsmAndMapIndex_MapDataBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndMapIndex_MapDataBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < boxes_size(); i++) {
    if (!this->boxes(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndMapIndex_MapDataBox::Swap(OsmAndMapIndex_MapDataBox* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(shifttomapdata_, other->shifttomapdata_);
    std::swap(ocean_, other->ocean_);
    boxes_.Swap(&other->boxes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndMapIndex_MapDataBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndMapIndex_MapDataBox_descriptor_;
  metadata.reflection = OsmAndMapIndex_MapDataBox_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OsmAndMapIndex::kNameFieldNumber;
const int OsmAndMapIndex::kRulesFieldNumber;
const int OsmAndMapIndex::kLevelsFieldNumber;
#endif  // !_MSC_VER

OsmAndMapIndex::OsmAndMapIndex()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndMapIndex::InitAsDefaultInstance() {
}

OsmAndMapIndex::OsmAndMapIndex(const OsmAndMapIndex& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndMapIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndMapIndex::~OsmAndMapIndex() {
  SharedDtor();
}

void OsmAndMapIndex::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void OsmAndMapIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndMapIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndMapIndex_descriptor_;
}

const OsmAndMapIndex& OsmAndMapIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndMapIndex* OsmAndMapIndex::default_instance_ = NULL;

OsmAndMapIndex* OsmAndMapIndex::New() const {
  return new OsmAndMapIndex;
}

void OsmAndMapIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  rules_.Clear();
  levels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndMapIndex::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rules;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndMapIndex.MapEncodingRule rules = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rules;
        if (input->ExpectTag(42)) goto parse_levels;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndMapIndex.MapRootLevel levels = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levels:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_levels;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndMapIndex::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required string name = 2;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapEncodingRule rules = 4;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rules(i), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapRootLevel levels = 5;
  for (int i = 0; i < this->levels_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->levels(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndMapIndex::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required string name = 2;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapEncodingRule rules = 4;
  for (int i = 0; i < this->rules_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rules(i), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapRootLevel levels = 5;
  for (int i = 0; i < this->levels_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->levels(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndMapIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapEncodingRule rules = 4;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rules(i));
  }
  
  // repeated .OsmAnd.OBF.OsmAndMapIndex.MapRootLevel levels = 5;
  total_size += 1 * this->levels_size();
  for (int i = 0; i < this->levels_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levels(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndMapIndex::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndMapIndex* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndMapIndex*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndMapIndex::MergeFrom(const OsmAndMapIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  rules_.MergeFrom(from.rules_);
  levels_.MergeFrom(from.levels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndMapIndex::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndMapIndex::CopyFrom(const OsmAndMapIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndMapIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < rules_size(); i++) {
    if (!this->rules(i).IsInitialized()) return false;
  }
  for (int i = 0; i < levels_size(); i++) {
    if (!this->levels(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndMapIndex::Swap(OsmAndMapIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    rules_.Swap(&other->rules_);
    levels_.Swap(&other->levels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndMapIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndMapIndex_descriptor_;
  metadata.reflection = OsmAndMapIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapDataBlock::kBaseIdFieldNumber;
const int MapDataBlock::kDataObjectsFieldNumber;
const int MapDataBlock::kStringTableFieldNumber;
#endif  // !_MSC_VER

MapDataBlock::MapDataBlock()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void MapDataBlock::InitAsDefaultInstance() {
  stringtable_ = const_cast< ::OsmAnd::OBF::StringTable*>(&::OsmAnd::OBF::StringTable::default_instance());
}

MapDataBlock::MapDataBlock(const MapDataBlock& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapDataBlock::SharedCtor() {
  _cached_size_ = 0;
  baseid_ = GOOGLE_ULONGLONG(0);
  stringtable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapDataBlock::~MapDataBlock() {
  SharedDtor();
}

void MapDataBlock::SharedDtor() {
  if (this != default_instance_) {
    delete stringtable_;
  }
}

void MapDataBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* MapDataBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapDataBlock_descriptor_;
}

const MapDataBlock& MapDataBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

MapDataBlock* MapDataBlock::default_instance_ = NULL;

MapDataBlock* MapDataBlock::New() const {
  return new MapDataBlock;
}

void MapDataBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    baseid_ = GOOGLE_ULONGLONG(0);
    if (has_stringtable()) {
      if (stringtable_ != NULL) stringtable_->::OsmAnd::OBF::StringTable::Clear();
    }
  }
  dataobjects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapDataBlock::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 baseId = 10;
      case 10: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &baseid_)));
          set_has_baseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dataObjects;
        break;
      }
      
      // repeated .OsmAnd.OBF.MapData dataObjects = 12;
      case 12: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataObjects:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataobjects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dataObjects;
        if (input->ExpectTag(122)) goto parse_stringTable;
        break;
      }
      
      // optional .OsmAnd.OBF.StringTable stringTable = 15;
      case 15: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringTable:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapDataBlock::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // optional uint64 baseId = 10;
  if (has_baseid()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64(10, this->baseid(), output);
  }
  
  // repeated .OsmAnd.OBF.MapData dataObjects = 12;
  for (int i = 0; i < this->dataobjects_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dataobjects(i), output);
  }
  
  // optional .OsmAnd.OBF.StringTable stringTable = 15;
  if (has_stringtable()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->stringtable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* MapDataBlock::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // optional uint64 baseId = 10;
  if (has_baseid()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->baseid(), target);
  }
  
  // repeated .OsmAnd.OBF.MapData dataObjects = 12;
  for (int i = 0; i < this->dataobjects_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->dataobjects(i), target);
  }
  
  // optional .OsmAnd.OBF.StringTable stringTable = 15;
  if (has_stringtable()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->stringtable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapDataBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 baseId = 10;
    if (has_baseid()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt64Size(
          this->baseid());
    }
    
    // optional .OsmAnd.OBF.StringTable stringTable = 15;
    if (has_stringtable()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stringtable());
    }
    
  }
  // repeated .OsmAnd.OBF.MapData dataObjects = 12;
  total_size += 1 * this->dataobjects_size();
  for (int i = 0; i < this->dataobjects_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dataobjects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapDataBlock::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapDataBlock* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const MapDataBlock*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapDataBlock::MergeFrom(const MapDataBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  dataobjects_.MergeFrom(from.dataobjects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseid()) {
      set_baseid(from.baseid());
    }
    if (from.has_stringtable()) {
      mutable_stringtable()->::OsmAnd::OBF::StringTable::MergeFrom(from.stringtable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapDataBlock::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapDataBlock::CopyFrom(const MapDataBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapDataBlock::IsInitialized() const {
  
  for (int i = 0; i < dataobjects_size(); i++) {
    if (!this->dataobjects(i).IsInitialized()) return false;
  }
  return true;
}

void MapDataBlock::Swap(MapDataBlock* other) {
  if (other != this) {
    std::swap(baseid_, other->baseid_);
    dataobjects_.Swap(&other->dataobjects_);
    std::swap(stringtable_, other->stringtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata MapDataBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = MapDataBlock_descriptor_;
  metadata.reflection = MapDataBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapData::kCoordinatesFieldNumber;
const int MapData::kAreaCoordinatesFieldNumber;
const int MapData::kPolygonInnerCoordinatesFieldNumber;
const int MapData::kAdditionalTypesFieldNumber;
const int MapData::kTypesFieldNumber;
const int MapData::kStringNamesFieldNumber;
const int MapData::kIdFieldNumber;
const int MapData::kRasterBytesFieldNumber;
#endif  // !_MSC_VER

MapData::MapData()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void MapData::InitAsDefaultInstance() {
}

MapData::MapData(const MapData& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapData::SharedCtor() {
  _cached_size_ = 0;
  coordinates_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  areacoordinates_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  additionaltypes_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  types_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  stringnames_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  id_ = GOOGLE_LONGLONG(0);
  rasterbytes_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapData::~MapData() {
  SharedDtor();
}

void MapData::SharedDtor() {
  if (coordinates_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete coordinates_;
  }
  if (areacoordinates_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete areacoordinates_;
  }
  if (additionaltypes_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete additionaltypes_;
  }
  if (types_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete types_;
  }
  if (stringnames_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete stringnames_;
  }
  if (rasterbytes_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete rasterbytes_;
  }
  if (this != default_instance_) {
  }
}

void MapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* MapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapData_descriptor_;
}

const MapData& MapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

MapData* MapData::default_instance_ = NULL;

MapData* MapData::New() const {
  return new MapData;
}

void MapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_coordinates()) {
      if (coordinates_ != &::google::obf_protobuf::internal::kEmptyString) {
        coordinates_->clear();
      }
    }
    if (has_areacoordinates()) {
      if (areacoordinates_ != &::google::obf_protobuf::internal::kEmptyString) {
        areacoordinates_->clear();
      }
    }
    if (has_additionaltypes()) {
      if (additionaltypes_ != &::google::obf_protobuf::internal::kEmptyString) {
        additionaltypes_->clear();
      }
    }
    if (has_types()) {
      if (types_ != &::google::obf_protobuf::internal::kEmptyString) {
        types_->clear();
      }
    }
    if (has_stringnames()) {
      if (stringnames_ != &::google::obf_protobuf::internal::kEmptyString) {
        stringnames_->clear();
      }
    }
    id_ = GOOGLE_LONGLONG(0);
    if (has_rasterbytes()) {
      if (rasterbytes_ != &::google::obf_protobuf::internal::kEmptyString) {
        rasterbytes_->clear();
      }
    }
  }
  polygoninnercoordinates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapData::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes coordinates = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_coordinates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_areaCoordinates;
        break;
      }
      
      // optional bytes areaCoordinates = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areaCoordinates:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_areacoordinates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_polygonInnerCoordinates;
        break;
      }
      
      // repeated bytes polygonInnerCoordinates = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polygonInnerCoordinates:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_polygoninnercoordinates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_polygonInnerCoordinates;
        if (input->ExpectTag(50)) goto parse_additionalTypes;
        break;
      }
      
      // optional bytes additionalTypes = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additionalTypes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_additionaltypes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_types;
        break;
      }
      
      // required bytes types = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_types:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stringNames;
        break;
      }
      
      // optional bytes stringNames = 10;
      case 10: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringNames:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stringnames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_id;
        break;
      }
      
      // required sint64 id = 12;
      case 12: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_rasterBytes;
        break;
      }
      
      // optional bytes rasterBytes = 15;
      case 15: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rasterBytes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rasterbytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapData::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // optional bytes coordinates = 1;
  if (has_coordinates()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBytes(
      1, this->coordinates(), output);
  }
  
  // optional bytes areaCoordinates = 2;
  if (has_areacoordinates()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBytes(
      2, this->areacoordinates(), output);
  }
  
  // repeated bytes polygonInnerCoordinates = 4;
  for (int i = 0; i < this->polygoninnercoordinates_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBytes(
      4, this->polygoninnercoordinates(i), output);
  }
  
  // optional bytes additionalTypes = 6;
  if (has_additionaltypes()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBytes(
      6, this->additionaltypes(), output);
  }
  
  // required bytes types = 7;
  if (has_types()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBytes(
      7, this->types(), output);
  }
  
  // optional bytes stringNames = 10;
  if (has_stringnames()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBytes(
      10, this->stringnames(), output);
  }
  
  // required sint64 id = 12;
  if (has_id()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt64(12, this->id(), output);
  }
  
  // optional bytes rasterBytes = 15;
  if (has_rasterbytes()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBytes(
      15, this->rasterbytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* MapData::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // optional bytes coordinates = 1;
  if (has_coordinates()) {
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->coordinates(), target);
  }
  
  // optional bytes areaCoordinates = 2;
  if (has_areacoordinates()) {
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->areacoordinates(), target);
  }
  
  // repeated bytes polygonInnerCoordinates = 4;
  for (int i = 0; i < this->polygoninnercoordinates_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->polygoninnercoordinates(i), target);
  }
  
  // optional bytes additionalTypes = 6;
  if (has_additionaltypes()) {
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->additionaltypes(), target);
  }
  
  // required bytes types = 7;
  if (has_types()) {
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->types(), target);
  }
  
  // optional bytes stringNames = 10;
  if (has_stringnames()) {
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->stringnames(), target);
  }
  
  // required sint64 id = 12;
  if (has_id()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt64ToArray(12, this->id(), target);
  }
  
  // optional bytes rasterBytes = 15;
  if (has_rasterbytes()) {
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->rasterbytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes coordinates = 1;
    if (has_coordinates()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::BytesSize(
          this->coordinates());
    }
    
    // optional bytes areaCoordinates = 2;
    if (has_areacoordinates()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::BytesSize(
          this->areacoordinates());
    }
    
    // optional bytes additionalTypes = 6;
    if (has_additionaltypes()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::BytesSize(
          this->additionaltypes());
    }
    
    // required bytes types = 7;
    if (has_types()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::BytesSize(
          this->types());
    }
    
    // optional bytes stringNames = 10;
    if (has_stringnames()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::BytesSize(
          this->stringnames());
    }
    
    // required sint64 id = 12;
    if (has_id()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }
    
    // optional bytes rasterBytes = 15;
    if (has_rasterbytes()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::BytesSize(
          this->rasterbytes());
    }
    
  }
  // repeated bytes polygonInnerCoordinates = 4;
  total_size += 1 * this->polygoninnercoordinates_size();
  for (int i = 0; i < this->polygoninnercoordinates_size(); i++) {
    total_size += ::google::obf_protobuf::internal::WireFormatLite::BytesSize(
      this->polygoninnercoordinates(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapData::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapData* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const MapData*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapData::MergeFrom(const MapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  polygoninnercoordinates_.MergeFrom(from.polygoninnercoordinates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coordinates()) {
      set_coordinates(from.coordinates());
    }
    if (from.has_areacoordinates()) {
      set_areacoordinates(from.areacoordinates());
    }
    if (from.has_additionaltypes()) {
      set_additionaltypes(from.additionaltypes());
    }
    if (from.has_types()) {
      set_types(from.types());
    }
    if (from.has_stringnames()) {
      set_stringnames(from.stringnames());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rasterbytes()) {
      set_rasterbytes(from.rasterbytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapData::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapData::CopyFrom(const MapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000050) != 0x00000050) return false;
  
  return true;
}

void MapData::Swap(MapData* other) {
  if (other != this) {
    std::swap(coordinates_, other->coordinates_);
    std::swap(areacoordinates_, other->areacoordinates_);
    polygoninnercoordinates_.Swap(&other->polygoninnercoordinates_);
    std::swap(additionaltypes_, other->additionaltypes_);
    std::swap(types_, other->types_);
    std::swap(stringnames_, other->stringnames_);
    std::swap(id_, other->id_);
    std::swap(rasterbytes_, other->rasterbytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata MapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = MapData_descriptor_;
  metadata.reflection = MapData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::obf_protobuf::EnumDescriptor* OsmAndAddressIndex_CitiesIndex_CitiesType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndAddressIndex_CitiesIndex_CitiesType_descriptor_;
}
bool OsmAndAddressIndex_CitiesIndex_CitiesType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OsmAndAddressIndex_CitiesIndex_CitiesType OsmAndAddressIndex_CitiesIndex::CitiesOrTowns;
const OsmAndAddressIndex_CitiesIndex_CitiesType OsmAndAddressIndex_CitiesIndex::Postcodes;
const OsmAndAddressIndex_CitiesIndex_CitiesType OsmAndAddressIndex_CitiesIndex::Villages;
const OsmAndAddressIndex_CitiesIndex_CitiesType OsmAndAddressIndex_CitiesIndex::CitiesType_MIN;
const OsmAndAddressIndex_CitiesIndex_CitiesType OsmAndAddressIndex_CitiesIndex::CitiesType_MAX;
const int OsmAndAddressIndex_CitiesIndex::CitiesType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OsmAndAddressIndex_CitiesIndex::kTypeFieldNumber;
const int OsmAndAddressIndex_CitiesIndex::kCitiesFieldNumber;
const int OsmAndAddressIndex_CitiesIndex::kBlocksFieldNumber;
#endif  // !_MSC_VER

OsmAndAddressIndex_CitiesIndex::OsmAndAddressIndex_CitiesIndex()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndAddressIndex_CitiesIndex::InitAsDefaultInstance() {
}

OsmAndAddressIndex_CitiesIndex::OsmAndAddressIndex_CitiesIndex(const OsmAndAddressIndex_CitiesIndex& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndAddressIndex_CitiesIndex::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndAddressIndex_CitiesIndex::~OsmAndAddressIndex_CitiesIndex() {
  SharedDtor();
}

void OsmAndAddressIndex_CitiesIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndAddressIndex_CitiesIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndAddressIndex_CitiesIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndAddressIndex_CitiesIndex_descriptor_;
}

const OsmAndAddressIndex_CitiesIndex& OsmAndAddressIndex_CitiesIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndAddressIndex_CitiesIndex* OsmAndAddressIndex_CitiesIndex::default_instance_ = NULL;

OsmAndAddressIndex_CitiesIndex* OsmAndAddressIndex_CitiesIndex::New() const {
  return new OsmAndAddressIndex_CitiesIndex;
}

void OsmAndAddressIndex_CitiesIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  cities_.Clear();
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndAddressIndex_CitiesIndex::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .OsmAnd.OBF.OsmAndAddressIndex.CitiesIndex.CitiesType type = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::obf_protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OsmAnd::OBF::OsmAndAddressIndex_CitiesIndex_CitiesType_IsValid(value)) {
            set_type(static_cast< ::OsmAnd::OBF::OsmAndAddressIndex_CitiesIndex_CitiesType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cities;
        break;
      }
      
      // repeated .OsmAnd.OBF.CityIndex cities = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cities:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cities;
        if (input->ExpectTag(58)) goto parse_blocks;
        break;
      }
      
      // repeated .OsmAnd.OBF.CityBlockIndex blocks = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndAddressIndex_CitiesIndex::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required .OsmAnd.OBF.OsmAndAddressIndex.CitiesIndex.CitiesType type = 2;
  if (has_type()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // repeated .OsmAnd.OBF.CityIndex cities = 5;
  for (int i = 0; i < this->cities_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cities(i), output);
  }
  
  // repeated .OsmAnd.OBF.CityBlockIndex blocks = 7;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blocks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndAddressIndex_CitiesIndex::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required .OsmAnd.OBF.OsmAndAddressIndex.CitiesIndex.CitiesType type = 2;
  if (has_type()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // repeated .OsmAnd.OBF.CityIndex cities = 5;
  for (int i = 0; i < this->cities_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cities(i), target);
  }
  
  // repeated .OsmAnd.OBF.CityBlockIndex blocks = 7;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->blocks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndAddressIndex_CitiesIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .OsmAnd.OBF.OsmAndAddressIndex.CitiesIndex.CitiesType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated .OsmAnd.OBF.CityIndex cities = 5;
  total_size += 1 * this->cities_size();
  for (int i = 0; i < this->cities_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cities(i));
  }
  
  // repeated .OsmAnd.OBF.CityBlockIndex blocks = 7;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndAddressIndex_CitiesIndex::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndAddressIndex_CitiesIndex* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndAddressIndex_CitiesIndex*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndAddressIndex_CitiesIndex::MergeFrom(const OsmAndAddressIndex_CitiesIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  cities_.MergeFrom(from.cities_);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndAddressIndex_CitiesIndex::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndAddressIndex_CitiesIndex::CopyFrom(const OsmAndAddressIndex_CitiesIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndAddressIndex_CitiesIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < cities_size(); i++) {
    if (!this->cities(i).IsInitialized()) return false;
  }
  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndAddressIndex_CitiesIndex::Swap(OsmAndAddressIndex_CitiesIndex* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    cities_.Swap(&other->cities_);
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndAddressIndex_CitiesIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndAddressIndex_CitiesIndex_descriptor_;
  metadata.reflection = OsmAndAddressIndex_CitiesIndex_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OsmAndAddressIndex::kNameFieldNumber;
const int OsmAndAddressIndex::kNameEnFieldNumber;
const int OsmAndAddressIndex::kBoundariesFieldNumber;
const int OsmAndAddressIndex::kAttributeTagsTableFieldNumber;
const int OsmAndAddressIndex::kCitiesFieldNumber;
const int OsmAndAddressIndex::kNameIndexFieldNumber;
#endif  // !_MSC_VER

OsmAndAddressIndex::OsmAndAddressIndex()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndAddressIndex::InitAsDefaultInstance() {
  boundaries_ = const_cast< ::OsmAnd::OBF::OsmAndTileBox*>(&::OsmAnd::OBF::OsmAndTileBox::default_instance());
  attributetagstable_ = const_cast< ::OsmAnd::OBF::StringTable*>(&::OsmAnd::OBF::StringTable::default_instance());
  nameindex_ = const_cast< ::OsmAnd::OBF::OsmAndAddressNameIndexData*>(&::OsmAnd::OBF::OsmAndAddressNameIndexData::default_instance());
}

OsmAndAddressIndex::OsmAndAddressIndex(const OsmAndAddressIndex& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndAddressIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  name_en_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  boundaries_ = NULL;
  attributetagstable_ = NULL;
  nameindex_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndAddressIndex::~OsmAndAddressIndex() {
  SharedDtor();
}

void OsmAndAddressIndex::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name_en_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_en_;
  }
  if (this != default_instance_) {
    delete boundaries_;
    delete attributetagstable_;
    delete nameindex_;
  }
}

void OsmAndAddressIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndAddressIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndAddressIndex_descriptor_;
}

const OsmAndAddressIndex& OsmAndAddressIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndAddressIndex* OsmAndAddressIndex::default_instance_ = NULL;

OsmAndAddressIndex* OsmAndAddressIndex::New() const {
  return new OsmAndAddressIndex;
}

void OsmAndAddressIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_name_en()) {
      if (name_en_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_en_->clear();
      }
    }
    if (has_boundaries()) {
      if (boundaries_ != NULL) boundaries_->::OsmAnd::OBF::OsmAndTileBox::Clear();
    }
    if (has_attributetagstable()) {
      if (attributetagstable_ != NULL) attributetagstable_->::OsmAnd::OBF::StringTable::Clear();
    }
    if (has_nameindex()) {
      if (nameindex_ != NULL) nameindex_->::OsmAnd::OBF::OsmAndAddressNameIndexData::Clear();
    }
  }
  cities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndAddressIndex::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_en;
        break;
      }
      
      // optional string name_en = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en().data(), this->name_en().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_boundaries;
        break;
      }
      
      // optional .OsmAnd.OBF.OsmAndTileBox boundaries = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boundaries:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundaries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attributeTagsTable;
        break;
      }
      
      // optional .OsmAnd.OBF.StringTable attributeTagsTable = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeTagsTable:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributetagstable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cities;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndAddressIndex.CitiesIndex cities = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cities:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cities;
        if (input->ExpectTag(58)) goto parse_nameIndex;
        break;
      }
      
      // optional .OsmAnd.OBF.OsmAndAddressNameIndexData nameIndex = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameIndex:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nameindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndAddressIndex::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string name_en = 2;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      2, this->name_en(), output);
  }
  
  // optional .OsmAnd.OBF.OsmAndTileBox boundaries = 3;
  if (has_boundaries()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boundaries(), output);
  }
  
  // optional .OsmAnd.OBF.StringTable attributeTagsTable = 4;
  if (has_attributetagstable()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attributetagstable(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndAddressIndex.CitiesIndex cities = 6;
  for (int i = 0; i < this->cities_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cities(i), output);
  }
  
  // optional .OsmAnd.OBF.OsmAndAddressNameIndexData nameIndex = 7;
  if (has_nameindex()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->nameindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndAddressIndex::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string name_en = 2;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name_en(), target);
  }
  
  // optional .OsmAnd.OBF.OsmAndTileBox boundaries = 3;
  if (has_boundaries()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->boundaries(), target);
  }
  
  // optional .OsmAnd.OBF.StringTable attributeTagsTable = 4;
  if (has_attributetagstable()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attributetagstable(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndAddressIndex.CitiesIndex cities = 6;
  for (int i = 0; i < this->cities_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cities(i), target);
  }
  
  // optional .OsmAnd.OBF.OsmAndAddressNameIndexData nameIndex = 7;
  if (has_nameindex()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->nameindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndAddressIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string name_en = 2;
    if (has_name_en()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name_en());
    }
    
    // optional .OsmAnd.OBF.OsmAndTileBox boundaries = 3;
    if (has_boundaries()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundaries());
    }
    
    // optional .OsmAnd.OBF.StringTable attributeTagsTable = 4;
    if (has_attributetagstable()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributetagstable());
    }
    
    // optional .OsmAnd.OBF.OsmAndAddressNameIndexData nameIndex = 7;
    if (has_nameindex()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nameindex());
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndAddressIndex.CitiesIndex cities = 6;
  total_size += 1 * this->cities_size();
  for (int i = 0; i < this->cities_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cities(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndAddressIndex::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndAddressIndex* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndAddressIndex*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndAddressIndex::MergeFrom(const OsmAndAddressIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  cities_.MergeFrom(from.cities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_name_en()) {
      set_name_en(from.name_en());
    }
    if (from.has_boundaries()) {
      mutable_boundaries()->::OsmAnd::OBF::OsmAndTileBox::MergeFrom(from.boundaries());
    }
    if (from.has_attributetagstable()) {
      mutable_attributetagstable()->::OsmAnd::OBF::StringTable::MergeFrom(from.attributetagstable());
    }
    if (from.has_nameindex()) {
      mutable_nameindex()->::OsmAnd::OBF::OsmAndAddressNameIndexData::MergeFrom(from.nameindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndAddressIndex::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndAddressIndex::CopyFrom(const OsmAndAddressIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndAddressIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_boundaries()) {
    if (!this->boundaries().IsInitialized()) return false;
  }
  for (int i = 0; i < cities_size(); i++) {
    if (!this->cities(i).IsInitialized()) return false;
  }
  if (has_nameindex()) {
    if (!this->nameindex().IsInitialized()) return false;
  }
  return true;
}

void OsmAndAddressIndex::Swap(OsmAndAddressIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(boundaries_, other->boundaries_);
    std::swap(attributetagstable_, other->attributetagstable_);
    cities_.Swap(&other->cities_);
    std::swap(nameindex_, other->nameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndAddressIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndAddressIndex_descriptor_;
  metadata.reflection = OsmAndAddressIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndAddressNameIndexData_AddressNameIndexData::kAtomFieldNumber;
#endif  // !_MSC_VER

OsmAndAddressNameIndexData_AddressNameIndexData::OsmAndAddressNameIndexData_AddressNameIndexData()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndAddressNameIndexData_AddressNameIndexData::InitAsDefaultInstance() {
}

OsmAndAddressNameIndexData_AddressNameIndexData::OsmAndAddressNameIndexData_AddressNameIndexData(const OsmAndAddressNameIndexData_AddressNameIndexData& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndAddressNameIndexData_AddressNameIndexData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndAddressNameIndexData_AddressNameIndexData::~OsmAndAddressNameIndexData_AddressNameIndexData() {
  SharedDtor();
}

void OsmAndAddressNameIndexData_AddressNameIndexData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndAddressNameIndexData_AddressNameIndexData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndAddressNameIndexData_AddressNameIndexData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndAddressNameIndexData_AddressNameIndexData_descriptor_;
}

const OsmAndAddressNameIndexData_AddressNameIndexData& OsmAndAddressNameIndexData_AddressNameIndexData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndAddressNameIndexData_AddressNameIndexData* OsmAndAddressNameIndexData_AddressNameIndexData::default_instance_ = NULL;

OsmAndAddressNameIndexData_AddressNameIndexData* OsmAndAddressNameIndexData_AddressNameIndexData::New() const {
  return new OsmAndAddressNameIndexData_AddressNameIndexData;
}

void OsmAndAddressNameIndexData_AddressNameIndexData::Clear() {
  atom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndAddressNameIndexData_AddressNameIndexData::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OsmAnd.OBF.AddressNameIndexDataAtom atom = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atom:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_atom;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndAddressNameIndexData_AddressNameIndexData::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // repeated .OsmAnd.OBF.AddressNameIndexDataAtom atom = 4;
  for (int i = 0; i < this->atom_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->atom(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndAddressNameIndexData_AddressNameIndexData::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // repeated .OsmAnd.OBF.AddressNameIndexDataAtom atom = 4;
  for (int i = 0; i < this->atom_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->atom(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndAddressNameIndexData_AddressNameIndexData::ByteSize() const {
  int total_size = 0;
  
  // repeated .OsmAnd.OBF.AddressNameIndexDataAtom atom = 4;
  total_size += 1 * this->atom_size();
  for (int i = 0; i < this->atom_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atom(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndAddressNameIndexData_AddressNameIndexData::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndAddressNameIndexData_AddressNameIndexData* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndAddressNameIndexData_AddressNameIndexData*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndAddressNameIndexData_AddressNameIndexData::MergeFrom(const OsmAndAddressNameIndexData_AddressNameIndexData& from) {
  GOOGLE_CHECK_NE(&from, this);
  atom_.MergeFrom(from.atom_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndAddressNameIndexData_AddressNameIndexData::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndAddressNameIndexData_AddressNameIndexData::CopyFrom(const OsmAndAddressNameIndexData_AddressNameIndexData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndAddressNameIndexData_AddressNameIndexData::IsInitialized() const {
  
  for (int i = 0; i < atom_size(); i++) {
    if (!this->atom(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndAddressNameIndexData_AddressNameIndexData::Swap(OsmAndAddressNameIndexData_AddressNameIndexData* other) {
  if (other != this) {
    atom_.Swap(&other->atom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndAddressNameIndexData_AddressNameIndexData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndAddressNameIndexData_AddressNameIndexData_descriptor_;
  metadata.reflection = OsmAndAddressNameIndexData_AddressNameIndexData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OsmAndAddressNameIndexData::kTableFieldNumber;
const int OsmAndAddressNameIndexData::kAtomFieldNumber;
#endif  // !_MSC_VER

OsmAndAddressNameIndexData::OsmAndAddressNameIndexData()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndAddressNameIndexData::InitAsDefaultInstance() {
  table_ = const_cast< ::OsmAnd::OBF::IndexedStringTable*>(&::OsmAnd::OBF::IndexedStringTable::default_instance());
}

OsmAndAddressNameIndexData::OsmAndAddressNameIndexData(const OsmAndAddressNameIndexData& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndAddressNameIndexData::SharedCtor() {
  _cached_size_ = 0;
  table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndAddressNameIndexData::~OsmAndAddressNameIndexData() {
  SharedDtor();
}

void OsmAndAddressNameIndexData::SharedDtor() {
  if (this != default_instance_) {
    delete table_;
  }
}

void OsmAndAddressNameIndexData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndAddressNameIndexData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndAddressNameIndexData_descriptor_;
}

const OsmAndAddressNameIndexData& OsmAndAddressNameIndexData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndAddressNameIndexData* OsmAndAddressNameIndexData::default_instance_ = NULL;

OsmAndAddressNameIndexData* OsmAndAddressNameIndexData::New() const {
  return new OsmAndAddressNameIndexData;
}

void OsmAndAddressNameIndexData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table()) {
      if (table_ != NULL) table_->::OsmAnd::OBF::IndexedStringTable::Clear();
    }
  }
  atom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndAddressNameIndexData::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .OsmAnd.OBF.IndexedStringTable table = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_atom;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndAddressNameIndexData.AddressNameIndexData atom = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atom:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_atom;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndAddressNameIndexData::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required .OsmAnd.OBF.IndexedStringTable table = 4;
  if (has_table()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->table(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndAddressNameIndexData.AddressNameIndexData atom = 7;
  for (int i = 0; i < this->atom_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->atom(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndAddressNameIndexData::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required .OsmAnd.OBF.IndexedStringTable table = 4;
  if (has_table()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->table(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndAddressNameIndexData.AddressNameIndexData atom = 7;
  for (int i = 0; i < this->atom_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->atom(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndAddressNameIndexData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .OsmAnd.OBF.IndexedStringTable table = 4;
    if (has_table()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table());
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndAddressNameIndexData.AddressNameIndexData atom = 7;
  total_size += 1 * this->atom_size();
  for (int i = 0; i < this->atom_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atom(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndAddressNameIndexData::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndAddressNameIndexData* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndAddressNameIndexData*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndAddressNameIndexData::MergeFrom(const OsmAndAddressNameIndexData& from) {
  GOOGLE_CHECK_NE(&from, this);
  atom_.MergeFrom(from.atom_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      mutable_table()->::OsmAnd::OBF::IndexedStringTable::MergeFrom(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndAddressNameIndexData::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndAddressNameIndexData::CopyFrom(const OsmAndAddressNameIndexData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndAddressNameIndexData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < atom_size(); i++) {
    if (!this->atom(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndAddressNameIndexData::Swap(OsmAndAddressNameIndexData* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    atom_.Swap(&other->atom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndAddressNameIndexData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndAddressNameIndexData_descriptor_;
  metadata.reflection = OsmAndAddressNameIndexData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddressNameIndexDataAtom::kNameFieldNumber;
const int AddressNameIndexDataAtom::kNameEnFieldNumber;
const int AddressNameIndexDataAtom::kTypeFieldNumber;
const int AddressNameIndexDataAtom::kShiftToIndexFieldNumber;
const int AddressNameIndexDataAtom::kShiftToCityIndexFieldNumber;
#endif  // !_MSC_VER

AddressNameIndexDataAtom::AddressNameIndexDataAtom()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void AddressNameIndexDataAtom::InitAsDefaultInstance() {
}

AddressNameIndexDataAtom::AddressNameIndexDataAtom(const AddressNameIndexDataAtom& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddressNameIndexDataAtom::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  nameen_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressNameIndexDataAtom::~AddressNameIndexDataAtom() {
  SharedDtor();
}

void AddressNameIndexDataAtom::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (nameen_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete nameen_;
  }
  if (this != default_instance_) {
  }
}

void AddressNameIndexDataAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* AddressNameIndexDataAtom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressNameIndexDataAtom_descriptor_;
}

const AddressNameIndexDataAtom& AddressNameIndexDataAtom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

AddressNameIndexDataAtom* AddressNameIndexDataAtom::default_instance_ = NULL;

AddressNameIndexDataAtom* AddressNameIndexDataAtom::New() const {
  return new AddressNameIndexDataAtom;
}

void AddressNameIndexDataAtom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_nameen()) {
      if (nameen_ != &::google::obf_protobuf::internal::kEmptyString) {
        nameen_->clear();
      }
    }
    type_ = 0u;
  }
  shifttoindex_.Clear();
  shifttocityindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressNameIndexDataAtom::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nameEn;
        break;
      }
      
      // optional string nameEn = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameEn:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameen()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->nameen().data(), this->nameen().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shiftToIndex;
        break;
      }
      
      // repeated int32 shiftToIndex = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shiftToIndex:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_shifttoindex())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shifttoindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shiftToIndex;
        if (input->ExpectTag(48)) goto parse_shiftToCityIndex;
        break;
      }
      
      // repeated int32 shiftToCityIndex = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shiftToCityIndex:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_shifttocityindex())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shifttocityindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_shiftToCityIndex;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddressNameIndexDataAtom::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string nameEn = 2;
  if (has_nameen()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->nameen().data(), this->nameen().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      2, this->nameen(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // repeated int32 shiftToIndex = 5;
  for (int i = 0; i < this->shifttoindex_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(
      5, this->shifttoindex(i), output);
  }
  
  // repeated int32 shiftToCityIndex = 6;
  for (int i = 0; i < this->shifttocityindex_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(
      6, this->shifttocityindex(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* AddressNameIndexDataAtom::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string nameEn = 2;
  if (has_nameen()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->nameen().data(), this->nameen().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nameen(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // repeated int32 shiftToIndex = 5;
  for (int i = 0; i < this->shifttoindex_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->shifttoindex(i), target);
  }
  
  // repeated int32 shiftToCityIndex = 6;
  for (int i = 0; i < this->shifttocityindex_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->shifttocityindex(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddressNameIndexDataAtom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string nameEn = 2;
    if (has_nameen()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->nameen());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  // repeated int32 shiftToIndex = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->shifttoindex_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        Int32Size(this->shifttoindex(i));
    }
    total_size += 1 * this->shifttoindex_size() + data_size;
  }
  
  // repeated int32 shiftToCityIndex = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->shifttocityindex_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        Int32Size(this->shifttocityindex(i));
    }
    total_size += 1 * this->shifttocityindex_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressNameIndexDataAtom::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressNameIndexDataAtom* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const AddressNameIndexDataAtom*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressNameIndexDataAtom::MergeFrom(const AddressNameIndexDataAtom& from) {
  GOOGLE_CHECK_NE(&from, this);
  shifttoindex_.MergeFrom(from.shifttoindex_);
  shifttocityindex_.MergeFrom(from.shifttocityindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nameen()) {
      set_nameen(from.nameen());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressNameIndexDataAtom::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressNameIndexDataAtom::CopyFrom(const AddressNameIndexDataAtom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressNameIndexDataAtom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void AddressNameIndexDataAtom::Swap(AddressNameIndexDataAtom* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(nameen_, other->nameen_);
    std::swap(type_, other->type_);
    shifttoindex_.Swap(&other->shifttoindex_);
    shifttocityindex_.Swap(&other->shifttocityindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata AddressNameIndexDataAtom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = AddressNameIndexDataAtom_descriptor_;
  metadata.reflection = AddressNameIndexDataAtom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityIndex::kCityTypeFieldNumber;
const int CityIndex::kNameFieldNumber;
const int CityIndex::kNameEnFieldNumber;
const int CityIndex::kIdFieldNumber;
const int CityIndex::kXFieldNumber;
const int CityIndex::kYFieldNumber;
const int CityIndex::kAttributeTagIdsFieldNumber;
const int CityIndex::kAttributeValuesFieldNumber;
const int CityIndex::kShiftToCityBlockIndexFieldNumber;
#endif  // !_MSC_VER

CityIndex::CityIndex()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void CityIndex::InitAsDefaultInstance() {
}

CityIndex::CityIndex(const CityIndex& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CityIndex::SharedCtor() {
  _cached_size_ = 0;
  city_type_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  name_en_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  id_ = GOOGLE_ULONGLONG(0);
  x_ = 0u;
  y_ = 0u;
  shifttocityblockindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityIndex::~CityIndex() {
  SharedDtor();
}

void CityIndex::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name_en_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_en_;
  }
  if (this != default_instance_) {
  }
}

void CityIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* CityIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityIndex_descriptor_;
}

const CityIndex& CityIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

CityIndex* CityIndex::default_instance_ = NULL;

CityIndex* CityIndex::New() const {
  return new CityIndex;
}

void CityIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_type_ = 0u;
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_name_en()) {
      if (name_en_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_en_->clear();
      }
    }
    id_ = GOOGLE_ULONGLONG(0);
    x_ = 0u;
    y_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    shifttocityblockindex_ = 0u;
  }
  attributetagids_.Clear();
  attributevalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityIndex::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 city_type = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_type_)));
          set_has_city_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name_en;
        break;
      }
      
      // optional string name_en = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en().data(), this->name_en().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }
      
      // optional uint64 id = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_x;
        break;
      }
      
      // required uint32 x = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_y;
        break;
      }
      
      // required uint32 y = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attributeTagIds;
        break;
      }
      
      // repeated uint32 attributeTagIds = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attributeTagIds:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_attributetagids())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attributetagids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attributeTagIds;
        if (input->ExpectTag(66)) goto parse_attributeValues;
        break;
      }
      
      // repeated string attributeValues = 8;
      case 8: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeValues:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attributevalues()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributevalues(0).data(), this->attributevalues(0).length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attributeValues;
        if (input->ExpectTag(85)) goto parse_shiftToCityBlockIndex;
        break;
      }
      
      // optional fixed32 shiftToCityBlockIndex = 10;
      case 10: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shiftToCityBlockIndex:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shifttocityblockindex_)));
          set_has_shifttocityblockindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CityIndex::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // optional uint32 city_type = 1;
  if (has_city_type()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_type(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string name_en = 3;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      3, this->name_en(), output);
  }
  
  // optional uint64 id = 4;
  if (has_id()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }
  
  // required uint32 x = 5;
  if (has_x()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(5, this->x(), output);
  }
  
  // required uint32 y = 6;
  if (has_y()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(6, this->y(), output);
  }
  
  // repeated uint32 attributeTagIds = 7;
  for (int i = 0; i < this->attributetagids_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->attributetagids(i), output);
  }
  
  // repeated string attributeValues = 8;
  for (int i = 0; i < this->attributevalues_size(); i++) {
  ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
    this->attributevalues(i).data(), this->attributevalues(i).length(),
    ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      8, this->attributevalues(i), output);
  }
  
  // optional fixed32 shiftToCityBlockIndex = 10;
  if (has_shifttocityblockindex()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32(10, this->shifttocityblockindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* CityIndex::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // optional uint32 city_type = 1;
  if (has_city_type()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_type(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string name_en = 3;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name_en(), target);
  }
  
  // optional uint64 id = 4;
  if (has_id()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }
  
  // required uint32 x = 5;
  if (has_x()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->x(), target);
  }
  
  // required uint32 y = 6;
  if (has_y()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->y(), target);
  }
  
  // repeated uint32 attributeTagIds = 7;
  for (int i = 0; i < this->attributetagids_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->attributetagids(i), target);
  }
  
  // repeated string attributeValues = 8;
  for (int i = 0; i < this->attributevalues_size(); i++) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributevalues(i).data(), this->attributevalues(i).length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->attributevalues(i), target);
  }
  
  // optional fixed32 shiftToCityBlockIndex = 10;
  if (has_shifttocityblockindex()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->shifttocityblockindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CityIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 city_type = 1;
    if (has_city_type()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->city_type());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string name_en = 3;
    if (has_name_en()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name_en());
    }
    
    // optional uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required uint32 x = 5;
    if (has_x()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // required uint32 y = 6;
    if (has_y()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed32 shiftToCityBlockIndex = 10;
    if (has_shifttocityblockindex()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated uint32 attributeTagIds = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->attributetagids_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        UInt32Size(this->attributetagids(i));
    }
    total_size += 1 * this->attributetagids_size() + data_size;
  }
  
  // repeated string attributeValues = 8;
  total_size += 1 * this->attributevalues_size();
  for (int i = 0; i < this->attributevalues_size(); i++) {
    total_size += ::google::obf_protobuf::internal::WireFormatLite::StringSize(
      this->attributevalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityIndex::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityIndex* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const CityIndex*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityIndex::MergeFrom(const CityIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributetagids_.MergeFrom(from.attributetagids_);
  attributevalues_.MergeFrom(from.attributevalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_type()) {
      set_city_type(from.city_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_name_en()) {
      set_name_en(from.name_en());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shifttocityblockindex()) {
      set_shifttocityblockindex(from.shifttocityblockindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityIndex::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityIndex::CopyFrom(const CityIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000032) != 0x00000032) return false;
  
  return true;
}

void CityIndex::Swap(CityIndex* other) {
  if (other != this) {
    std::swap(city_type_, other->city_type_);
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    attributetagids_.Swap(&other->attributetagids_);
    attributevalues_.Swap(&other->attributevalues_);
    std::swap(shifttocityblockindex_, other->shifttocityblockindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata CityIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = CityIndex_descriptor_;
  metadata.reflection = CityIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityBlockIndex::kShiftToCityIndexFieldNumber;
const int CityBlockIndex::kBuildingsFieldNumber;
const int CityBlockIndex::kStreetsFieldNumber;
#endif  // !_MSC_VER

CityBlockIndex::CityBlockIndex()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void CityBlockIndex::InitAsDefaultInstance() {
}

CityBlockIndex::CityBlockIndex(const CityBlockIndex& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CityBlockIndex::SharedCtor() {
  _cached_size_ = 0;
  shifttocityindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityBlockIndex::~CityBlockIndex() {
  SharedDtor();
}

void CityBlockIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CityBlockIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* CityBlockIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityBlockIndex_descriptor_;
}

const CityBlockIndex& CityBlockIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

CityBlockIndex* CityBlockIndex::default_instance_ = NULL;

CityBlockIndex* CityBlockIndex::New() const {
  return new CityBlockIndex;
}

void CityBlockIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shifttocityindex_ = 0u;
  }
  buildings_.Clear();
  streets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityBlockIndex::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 shiftToCityIndex = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shifttocityindex_)));
          set_has_shifttocityindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_buildings;
        break;
      }
      
      // repeated .OsmAnd.OBF.BuildingIndex buildings = 10;
      case 10: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildings:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_buildings;
        if (input->ExpectTag(98)) goto parse_streets;
        break;
      }
      
      // repeated .OsmAnd.OBF.StreetIndex streets = 12;
      case 12: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_streets:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_streets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_streets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CityBlockIndex::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 shiftToCityIndex = 4;
  if (has_shifttocityindex()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32(4, this->shifttocityindex(), output);
  }
  
  // repeated .OsmAnd.OBF.BuildingIndex buildings = 10;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->buildings(i), output);
  }
  
  // repeated .OsmAnd.OBF.StreetIndex streets = 12;
  for (int i = 0; i < this->streets_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->streets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* CityBlockIndex::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // optional fixed32 shiftToCityIndex = 4;
  if (has_shifttocityindex()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->shifttocityindex(), target);
  }
  
  // repeated .OsmAnd.OBF.BuildingIndex buildings = 10;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->buildings(i), target);
  }
  
  // repeated .OsmAnd.OBF.StreetIndex streets = 12;
  for (int i = 0; i < this->streets_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->streets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CityBlockIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 shiftToCityIndex = 4;
    if (has_shifttocityindex()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .OsmAnd.OBF.BuildingIndex buildings = 10;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }
  
  // repeated .OsmAnd.OBF.StreetIndex streets = 12;
  total_size += 1 * this->streets_size();
  for (int i = 0; i < this->streets_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityBlockIndex::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityBlockIndex* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const CityBlockIndex*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityBlockIndex::MergeFrom(const CityBlockIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildings_.MergeFrom(from.buildings_);
  streets_.MergeFrom(from.streets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shifttocityindex()) {
      set_shifttocityindex(from.shifttocityindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityBlockIndex::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityBlockIndex::CopyFrom(const CityBlockIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityBlockIndex::IsInitialized() const {
  
  for (int i = 0; i < buildings_size(); i++) {
    if (!this->buildings(i).IsInitialized()) return false;
  }
  for (int i = 0; i < streets_size(); i++) {
    if (!this->streets(i).IsInitialized()) return false;
  }
  return true;
}

void CityBlockIndex::Swap(CityBlockIndex* other) {
  if (other != this) {
    std::swap(shifttocityindex_, other->shifttocityindex_);
    buildings_.Swap(&other->buildings_);
    streets_.Swap(&other->streets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata CityBlockIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = CityBlockIndex_descriptor_;
  metadata.reflection = CityBlockIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreetIndex::kNameFieldNumber;
const int StreetIndex::kNameEnFieldNumber;
const int StreetIndex::kXFieldNumber;
const int StreetIndex::kYFieldNumber;
const int StreetIndex::kIdFieldNumber;
const int StreetIndex::kAttributeTagIdsFieldNumber;
const int StreetIndex::kAttributeValuesFieldNumber;
const int StreetIndex::kBuildingsFieldNumber;
const int StreetIndex::kIntersectionsFieldNumber;
#endif  // !_MSC_VER

StreetIndex::StreetIndex()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void StreetIndex::InitAsDefaultInstance() {
}

StreetIndex::StreetIndex(const StreetIndex& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreetIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  name_en_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreetIndex::~StreetIndex() {
  SharedDtor();
}

void StreetIndex::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name_en_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_en_;
  }
  if (this != default_instance_) {
  }
}

void StreetIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* StreetIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreetIndex_descriptor_;
}

const StreetIndex& StreetIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

StreetIndex* StreetIndex::default_instance_ = NULL;

StreetIndex* StreetIndex::New() const {
  return new StreetIndex;
}

void StreetIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_name_en()) {
      if (name_en_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_en_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
  }
  attributetagids_.Clear();
  attributevalues_.Clear();
  buildings_.Clear();
  intersections_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreetIndex::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_en;
        break;
      }
      
      // optional string name_en = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en().data(), this->name_en().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }
      
      // required sint32 x = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }
      
      // required sint32 y = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_intersections;
        break;
      }
      
      // repeated .OsmAnd.OBF.StreetIntersection intersections = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intersections:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intersections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_intersections;
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }
      
      // optional uint64 id = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attributeTagIds;
        break;
      }
      
      // repeated uint32 attributeTagIds = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attributeTagIds:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_attributetagids())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attributetagids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attributeTagIds;
        if (input->ExpectTag(66)) goto parse_attributeValues;
        break;
      }
      
      // repeated string attributeValues = 8;
      case 8: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeValues:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attributevalues()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributevalues(0).data(), this->attributevalues(0).length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attributeValues;
        if (input->ExpectTag(98)) goto parse_buildings;
        break;
      }
      
      // repeated .OsmAnd.OBF.BuildingIndex buildings = 12;
      case 12: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildings:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_buildings;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreetIndex::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string name_en = 2;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      2, this->name_en(), output);
  }
  
  // required sint32 x = 3;
  if (has_x()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(3, this->x(), output);
  }
  
  // required sint32 y = 4;
  if (has_y()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(4, this->y(), output);
  }
  
  // repeated .OsmAnd.OBF.StreetIntersection intersections = 5;
  for (int i = 0; i < this->intersections_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->intersections(i), output);
  }
  
  // optional uint64 id = 6;
  if (has_id()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64(6, this->id(), output);
  }
  
  // repeated uint32 attributeTagIds = 7;
  for (int i = 0; i < this->attributetagids_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->attributetagids(i), output);
  }
  
  // repeated string attributeValues = 8;
  for (int i = 0; i < this->attributevalues_size(); i++) {
  ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
    this->attributevalues(i).data(), this->attributevalues(i).length(),
    ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      8, this->attributevalues(i), output);
  }
  
  // repeated .OsmAnd.OBF.BuildingIndex buildings = 12;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->buildings(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* StreetIndex::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string name_en = 2;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name_en(), target);
  }
  
  // required sint32 x = 3;
  if (has_x()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->x(), target);
  }
  
  // required sint32 y = 4;
  if (has_y()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->y(), target);
  }
  
  // repeated .OsmAnd.OBF.StreetIntersection intersections = 5;
  for (int i = 0; i < this->intersections_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->intersections(i), target);
  }
  
  // optional uint64 id = 6;
  if (has_id()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->id(), target);
  }
  
  // repeated uint32 attributeTagIds = 7;
  for (int i = 0; i < this->attributetagids_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->attributetagids(i), target);
  }
  
  // repeated string attributeValues = 8;
  for (int i = 0; i < this->attributevalues_size(); i++) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributevalues(i).data(), this->attributevalues(i).length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->attributevalues(i), target);
  }
  
  // repeated .OsmAnd.OBF.BuildingIndex buildings = 12;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->buildings(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreetIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string name_en = 2;
    if (has_name_en()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name_en());
    }
    
    // required sint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }
    
    // required sint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }
    
    // optional uint64 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
  }
  // repeated uint32 attributeTagIds = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->attributetagids_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        UInt32Size(this->attributetagids(i));
    }
    total_size += 1 * this->attributetagids_size() + data_size;
  }
  
  // repeated string attributeValues = 8;
  total_size += 1 * this->attributevalues_size();
  for (int i = 0; i < this->attributevalues_size(); i++) {
    total_size += ::google::obf_protobuf::internal::WireFormatLite::StringSize(
      this->attributevalues(i));
  }
  
  // repeated .OsmAnd.OBF.BuildingIndex buildings = 12;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }
  
  // repeated .OsmAnd.OBF.StreetIntersection intersections = 5;
  total_size += 1 * this->intersections_size();
  for (int i = 0; i < this->intersections_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intersections(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetIndex::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreetIndex* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const StreetIndex*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreetIndex::MergeFrom(const StreetIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributetagids_.MergeFrom(from.attributetagids_);
  attributevalues_.MergeFrom(from.attributevalues_);
  buildings_.MergeFrom(from.buildings_);
  intersections_.MergeFrom(from.intersections_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_name_en()) {
      set_name_en(from.name_en());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreetIndex::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetIndex::CopyFrom(const StreetIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  for (int i = 0; i < buildings_size(); i++) {
    if (!this->buildings(i).IsInitialized()) return false;
  }
  for (int i = 0; i < intersections_size(); i++) {
    if (!this->intersections(i).IsInitialized()) return false;
  }
  return true;
}

void StreetIndex::Swap(StreetIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(id_, other->id_);
    attributetagids_.Swap(&other->attributetagids_);
    attributevalues_.Swap(&other->attributevalues_);
    buildings_.Swap(&other->buildings_);
    intersections_.Swap(&other->intersections_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata StreetIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = StreetIndex_descriptor_;
  metadata.reflection = StreetIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreetIntersection::kNameFieldNumber;
const int StreetIntersection::kNameEnFieldNumber;
const int StreetIntersection::kIntersectedXFieldNumber;
const int StreetIntersection::kIntersectedYFieldNumber;
const int StreetIntersection::kAttributeTagIdsFieldNumber;
const int StreetIntersection::kAttributeValuesFieldNumber;
#endif  // !_MSC_VER

StreetIntersection::StreetIntersection()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void StreetIntersection::InitAsDefaultInstance() {
}

StreetIntersection::StreetIntersection(const StreetIntersection& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreetIntersection::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  name_en_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  intersectedx_ = 0;
  intersectedy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreetIntersection::~StreetIntersection() {
  SharedDtor();
}

void StreetIntersection::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name_en_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_en_;
  }
  if (this != default_instance_) {
  }
}

void StreetIntersection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* StreetIntersection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreetIntersection_descriptor_;
}

const StreetIntersection& StreetIntersection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

StreetIntersection* StreetIntersection::default_instance_ = NULL;

StreetIntersection* StreetIntersection::New() const {
  return new StreetIntersection;
}

void StreetIntersection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_name_en()) {
      if (name_en_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_en_->clear();
      }
    }
    intersectedx_ = 0;
    intersectedy_ = 0;
  }
  attributetagids_.Clear();
  attributevalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreetIntersection::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name_en;
        break;
      }
      
      // optional string name_en = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en().data(), this->name_en().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intersectedX;
        break;
      }
      
      // required sint32 intersectedX = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intersectedX:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intersectedx_)));
          set_has_intersectedx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_intersectedY;
        break;
      }
      
      // required sint32 intersectedY = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intersectedY:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intersectedy_)));
          set_has_intersectedy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attributeTagIds;
        break;
      }
      
      // repeated uint32 attributeTagIds = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attributeTagIds:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_attributetagids())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attributetagids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attributeTagIds;
        if (input->ExpectTag(66)) goto parse_attributeValues;
        break;
      }
      
      // repeated string attributeValues = 8;
      case 8: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeValues:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attributevalues()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributevalues(0).data(), this->attributevalues(0).length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attributeValues;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreetIntersection::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required string name = 2;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string name_en = 3;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      3, this->name_en(), output);
  }
  
  // required sint32 intersectedX = 4;
  if (has_intersectedx()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(4, this->intersectedx(), output);
  }
  
  // required sint32 intersectedY = 5;
  if (has_intersectedy()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(5, this->intersectedy(), output);
  }
  
  // repeated uint32 attributeTagIds = 7;
  for (int i = 0; i < this->attributetagids_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->attributetagids(i), output);
  }
  
  // repeated string attributeValues = 8;
  for (int i = 0; i < this->attributevalues_size(); i++) {
  ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
    this->attributevalues(i).data(), this->attributevalues(i).length(),
    ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      8, this->attributevalues(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* StreetIntersection::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required string name = 2;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string name_en = 3;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name_en(), target);
  }
  
  // required sint32 intersectedX = 4;
  if (has_intersectedx()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->intersectedx(), target);
  }
  
  // required sint32 intersectedY = 5;
  if (has_intersectedy()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->intersectedy(), target);
  }
  
  // repeated uint32 attributeTagIds = 7;
  for (int i = 0; i < this->attributetagids_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->attributetagids(i), target);
  }
  
  // repeated string attributeValues = 8;
  for (int i = 0; i < this->attributevalues_size(); i++) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributevalues(i).data(), this->attributevalues(i).length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->attributevalues(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreetIntersection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string name_en = 3;
    if (has_name_en()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name_en());
    }
    
    // required sint32 intersectedX = 4;
    if (has_intersectedx()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->intersectedx());
    }
    
    // required sint32 intersectedY = 5;
    if (has_intersectedy()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->intersectedy());
    }
    
  }
  // repeated uint32 attributeTagIds = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->attributetagids_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        UInt32Size(this->attributetagids(i));
    }
    total_size += 1 * this->attributetagids_size() + data_size;
  }
  
  // repeated string attributeValues = 8;
  total_size += 1 * this->attributevalues_size();
  for (int i = 0; i < this->attributevalues_size(); i++) {
    total_size += ::google::obf_protobuf::internal::WireFormatLite::StringSize(
      this->attributevalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetIntersection::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreetIntersection* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const StreetIntersection*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreetIntersection::MergeFrom(const StreetIntersection& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributetagids_.MergeFrom(from.attributetagids_);
  attributevalues_.MergeFrom(from.attributevalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_name_en()) {
      set_name_en(from.name_en());
    }
    if (from.has_intersectedx()) {
      set_intersectedx(from.intersectedx());
    }
    if (from.has_intersectedy()) {
      set_intersectedy(from.intersectedy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreetIntersection::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetIntersection::CopyFrom(const StreetIntersection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetIntersection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void StreetIntersection::Swap(StreetIntersection* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(intersectedx_, other->intersectedx_);
    std::swap(intersectedy_, other->intersectedy_);
    attributetagids_.Swap(&other->attributetagids_);
    attributevalues_.Swap(&other->attributevalues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata StreetIntersection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = StreetIntersection_descriptor_;
  metadata.reflection = StreetIntersection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingIndex::kNameFieldNumber;
const int BuildingIndex::kNameEnFieldNumber;
const int BuildingIndex::kName2FieldNumber;
const int BuildingIndex::kNameEn2FieldNumber;
const int BuildingIndex::kInterpolationFieldNumber;
const int BuildingIndex::kXFieldNumber;
const int BuildingIndex::kYFieldNumber;
const int BuildingIndex::kX2FieldNumber;
const int BuildingIndex::kY2FieldNumber;
const int BuildingIndex::kIdFieldNumber;
const int BuildingIndex::kPostcodeFieldNumber;
const int BuildingIndex::kAttributeTagIdsFieldNumber;
const int BuildingIndex::kAttributeValuesFieldNumber;
const int BuildingIndex::kAttributeTagIds2FieldNumber;
const int BuildingIndex::kAttributeValues2FieldNumber;
#endif  // !_MSC_VER

BuildingIndex::BuildingIndex()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void BuildingIndex::InitAsDefaultInstance() {
}

BuildingIndex::BuildingIndex(const BuildingIndex& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  name_en_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  name2_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  name_en2_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  interpolation_ = 0;
  x_ = 0;
  y_ = 0;
  x2_ = 0;
  y2_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  postcode_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingIndex::~BuildingIndex() {
  SharedDtor();
}

void BuildingIndex::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name_en_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_en_;
  }
  if (name2_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (name_en2_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_en2_;
  }
  if (postcode_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete postcode_;
  }
  if (this != default_instance_) {
  }
}

void BuildingIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* BuildingIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingIndex_descriptor_;
}

const BuildingIndex& BuildingIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

BuildingIndex* BuildingIndex::default_instance_ = NULL;

BuildingIndex* BuildingIndex::New() const {
  return new BuildingIndex;
}

void BuildingIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_name_en()) {
      if (name_en_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_en_->clear();
      }
    }
    if (has_name2()) {
      if (name2_ != &::google::obf_protobuf::internal::kEmptyString) {
        name2_->clear();
      }
    }
    if (has_name_en2()) {
      if (name_en2_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_en2_->clear();
      }
    }
    interpolation_ = 0;
    x_ = 0;
    y_ = 0;
    x2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    y2_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_postcode()) {
      if (postcode_ != &::google::obf_protobuf::internal::kEmptyString) {
        postcode_->clear();
      }
    }
  }
  attributetagids_.Clear();
  attributevalues_.Clear();
  attributetagids2_.Clear();
  attributevalues2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingIndex::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_en;
        break;
      }
      
      // optional string name_en = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en().data(), this->name_en().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name2;
        break;
      }
      
      // optional string name2 = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name2:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name2()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name2().data(), this->name2().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name_en2;
        break;
      }
      
      // optional string name_en2 = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en2:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en2()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en2().data(), this->name_en2().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_interpolation;
        break;
      }
      
      // optional sint32 interpolation = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpolation:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &interpolation_)));
          set_has_interpolation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_x;
        break;
      }
      
      // required sint32 x = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_y;
        break;
      }
      
      // required sint32 y = 8;
      case 8: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_x2;
        break;
      }
      
      // optional sint32 x2 = 9;
      case 9: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x2:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_y2;
        break;
      }
      
      // optional sint32 y2 = 10;
      case 10: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y2:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_id;
        break;
      }
      
      // optional uint64 id = 13;
      case 13: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_postcode;
        break;
      }
      
      // optional string postcode = 14;
      case 14: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postcode:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postcode()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->postcode().data(), this->postcode().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_attributeTagIds;
        break;
      }
      
      // repeated uint32 attributeTagIds = 15;
      case 15: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attributeTagIds:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_attributetagids())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attributetagids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_attributeTagIds;
        if (input->ExpectTag(130)) goto parse_attributeValues;
        break;
      }
      
      // repeated string attributeValues = 16;
      case 16: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeValues:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attributevalues()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributevalues(0).data(), this->attributevalues(0).length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_attributeValues;
        if (input->ExpectTag(136)) goto parse_attributeTagIds2;
        break;
      }
      
      // repeated uint32 attributeTagIds2 = 17;
      case 17: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attributeTagIds2:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_attributetagids2())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attributetagids2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_attributeTagIds2;
        if (input->ExpectTag(146)) goto parse_attributeValues2;
        break;
      }
      
      // repeated string attributeValues2 = 18;
      case 18: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeValues2:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attributevalues2()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributevalues2(0).data(), this->attributevalues2(0).length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_attributeValues2;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingIndex::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string name_en = 2;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      2, this->name_en(), output);
  }
  
  // optional string name2 = 3;
  if (has_name2()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      3, this->name2(), output);
  }
  
  // optional string name_en2 = 4;
  if (has_name_en2()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en2().data(), this->name_en2().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      4, this->name_en2(), output);
  }
  
  // optional sint32 interpolation = 5;
  if (has_interpolation()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(5, this->interpolation(), output);
  }
  
  // required sint32 x = 7;
  if (has_x()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(7, this->x(), output);
  }
  
  // required sint32 y = 8;
  if (has_y()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(8, this->y(), output);
  }
  
  // optional sint32 x2 = 9;
  if (has_x2()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(9, this->x2(), output);
  }
  
  // optional sint32 y2 = 10;
  if (has_y2()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(10, this->y2(), output);
  }
  
  // optional uint64 id = 13;
  if (has_id()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64(13, this->id(), output);
  }
  
  // optional string postcode = 14;
  if (has_postcode()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      14, this->postcode(), output);
  }
  
  // repeated uint32 attributeTagIds = 15;
  for (int i = 0; i < this->attributetagids_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->attributetagids(i), output);
  }
  
  // repeated string attributeValues = 16;
  for (int i = 0; i < this->attributevalues_size(); i++) {
  ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
    this->attributevalues(i).data(), this->attributevalues(i).length(),
    ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      16, this->attributevalues(i), output);
  }
  
  // repeated uint32 attributeTagIds2 = 17;
  for (int i = 0; i < this->attributetagids2_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->attributetagids2(i), output);
  }
  
  // repeated string attributeValues2 = 18;
  for (int i = 0; i < this->attributevalues2_size(); i++) {
  ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
    this->attributevalues2(i).data(), this->attributevalues2(i).length(),
    ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      18, this->attributevalues2(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* BuildingIndex::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string name_en = 2;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name_en(), target);
  }
  
  // optional string name2 = 3;
  if (has_name2()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name2(), target);
  }
  
  // optional string name_en2 = 4;
  if (has_name_en2()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en2().data(), this->name_en2().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name_en2(), target);
  }
  
  // optional sint32 interpolation = 5;
  if (has_interpolation()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->interpolation(), target);
  }
  
  // required sint32 x = 7;
  if (has_x()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->x(), target);
  }
  
  // required sint32 y = 8;
  if (has_y()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->y(), target);
  }
  
  // optional sint32 x2 = 9;
  if (has_x2()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->x2(), target);
  }
  
  // optional sint32 y2 = 10;
  if (has_y2()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->y2(), target);
  }
  
  // optional uint64 id = 13;
  if (has_id()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->id(), target);
  }
  
  // optional string postcode = 14;
  if (has_postcode()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->postcode(), target);
  }
  
  // repeated uint32 attributeTagIds = 15;
  for (int i = 0; i < this->attributetagids_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->attributetagids(i), target);
  }
  
  // repeated string attributeValues = 16;
  for (int i = 0; i < this->attributevalues_size(); i++) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributevalues(i).data(), this->attributevalues(i).length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->attributevalues(i), target);
  }
  
  // repeated uint32 attributeTagIds2 = 17;
  for (int i = 0; i < this->attributetagids2_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->attributetagids2(i), target);
  }
  
  // repeated string attributeValues2 = 18;
  for (int i = 0; i < this->attributevalues2_size(); i++) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributevalues2(i).data(), this->attributevalues2(i).length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->attributevalues2(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string name_en = 2;
    if (has_name_en()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name_en());
    }
    
    // optional string name2 = 3;
    if (has_name2()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name2());
    }
    
    // optional string name_en2 = 4;
    if (has_name_en2()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name_en2());
    }
    
    // optional sint32 interpolation = 5;
    if (has_interpolation()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->interpolation());
    }
    
    // required sint32 x = 7;
    if (has_x()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }
    
    // required sint32 y = 8;
    if (has_y()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }
    
    // optional sint32 x2 = 9;
    if (has_x2()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->x2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 y2 = 10;
    if (has_y2()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->y2());
    }
    
    // optional uint64 id = 13;
    if (has_id()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // optional string postcode = 14;
    if (has_postcode()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->postcode());
    }
    
  }
  // repeated uint32 attributeTagIds = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->attributetagids_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        UInt32Size(this->attributetagids(i));
    }
    total_size += 1 * this->attributetagids_size() + data_size;
  }
  
  // repeated string attributeValues = 16;
  total_size += 2 * this->attributevalues_size();
  for (int i = 0; i < this->attributevalues_size(); i++) {
    total_size += ::google::obf_protobuf::internal::WireFormatLite::StringSize(
      this->attributevalues(i));
  }
  
  // repeated uint32 attributeTagIds2 = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->attributetagids2_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        UInt32Size(this->attributetagids2(i));
    }
    total_size += 2 * this->attributetagids2_size() + data_size;
  }
  
  // repeated string attributeValues2 = 18;
  total_size += 2 * this->attributevalues2_size();
  for (int i = 0; i < this->attributevalues2_size(); i++) {
    total_size += ::google::obf_protobuf::internal::WireFormatLite::StringSize(
      this->attributevalues2(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingIndex::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingIndex* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const BuildingIndex*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingIndex::MergeFrom(const BuildingIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributetagids_.MergeFrom(from.attributetagids_);
  attributevalues_.MergeFrom(from.attributevalues_);
  attributetagids2_.MergeFrom(from.attributetagids2_);
  attributevalues2_.MergeFrom(from.attributevalues2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_name_en()) {
      set_name_en(from.name_en());
    }
    if (from.has_name2()) {
      set_name2(from.name2());
    }
    if (from.has_name_en2()) {
      set_name_en2(from.name_en2());
    }
    if (from.has_interpolation()) {
      set_interpolation(from.interpolation());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_y2()) {
      set_y2(from.y2());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_postcode()) {
      set_postcode(from.postcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingIndex::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingIndex::CopyFrom(const BuildingIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000061) != 0x00000061) return false;
  
  return true;
}

void BuildingIndex::Swap(BuildingIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(name2_, other->name2_);
    std::swap(name_en2_, other->name_en2_);
    std::swap(interpolation_, other->interpolation_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(x2_, other->x2_);
    std::swap(y2_, other->y2_);
    std::swap(id_, other->id_);
    std::swap(postcode_, other->postcode_);
    attributetagids_.Swap(&other->attributetagids_);
    attributevalues_.Swap(&other->attributevalues_);
    attributetagids2_.Swap(&other->attributetagids2_);
    attributevalues2_.Swap(&other->attributevalues2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata BuildingIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = BuildingIndex_descriptor_;
  metadata.reflection = BuildingIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportRoutes::kRoutesFieldNumber;
#endif  // !_MSC_VER

TransportRoutes::TransportRoutes()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void TransportRoutes::InitAsDefaultInstance() {
}

TransportRoutes::TransportRoutes(const TransportRoutes& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportRoutes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportRoutes::~TransportRoutes() {
  SharedDtor();
}

void TransportRoutes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransportRoutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* TransportRoutes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportRoutes_descriptor_;
}

const TransportRoutes& TransportRoutes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

TransportRoutes* TransportRoutes::default_instance_ = NULL;

TransportRoutes* TransportRoutes::New() const {
  return new TransportRoutes;
}

void TransportRoutes::Clear() {
  routes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportRoutes::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OsmAnd.OBF.TransportRoute routes = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_routes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportRoutes::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // repeated .OsmAnd.OBF.TransportRoute routes = 6;
  for (int i = 0; i < this->routes_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->routes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* TransportRoutes::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // repeated .OsmAnd.OBF.TransportRoute routes = 6;
  for (int i = 0; i < this->routes_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->routes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportRoutes::ByteSize() const {
  int total_size = 0;
  
  // repeated .OsmAnd.OBF.TransportRoute routes = 6;
  total_size += 1 * this->routes_size();
  for (int i = 0; i < this->routes_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRoutes::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportRoutes* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const TransportRoutes*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportRoutes::MergeFrom(const TransportRoutes& from) {
  GOOGLE_CHECK_NE(&from, this);
  routes_.MergeFrom(from.routes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportRoutes::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRoutes::CopyFrom(const TransportRoutes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRoutes::IsInitialized() const {
  
  for (int i = 0; i < routes_size(); i++) {
    if (!this->routes(i).IsInitialized()) return false;
  }
  return true;
}

void TransportRoutes::Swap(TransportRoutes* other) {
  if (other != this) {
    routes_.Swap(&other->routes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata TransportRoutes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = TransportRoutes_descriptor_;
  metadata.reflection = TransportRoutes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportRoute::kIdFieldNumber;
const int TransportRoute::kTypeFieldNumber;
const int TransportRoute::kOperatorFieldNumber;
const int TransportRoute::kRefFieldNumber;
const int TransportRoute::kNameFieldNumber;
const int TransportRoute::kNameEnFieldNumber;
const int TransportRoute::kDistanceFieldNumber;
const int TransportRoute::kDirectStopsFieldNumber;
const int TransportRoute::kReverseStopsFieldNumber;
#endif  // !_MSC_VER

TransportRoute::TransportRoute()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void TransportRoute::InitAsDefaultInstance() {
}

TransportRoute::TransportRoute(const TransportRoute& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportRoute::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  operator__ = 0u;
  ref_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  name_ = 0u;
  name_en_ = 0u;
  distance_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportRoute::~TransportRoute() {
  SharedDtor();
}

void TransportRoute::SharedDtor() {
  if (ref_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete ref_;
  }
  if (this != default_instance_) {
  }
}

void TransportRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* TransportRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportRoute_descriptor_;
}

const TransportRoute& TransportRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

TransportRoute* TransportRoute::default_instance_ = NULL;

TransportRoute* TransportRoute::New() const {
  return new TransportRoute;
}

void TransportRoute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    operator__ = 0u;
    if (has_ref()) {
      if (ref_ != &::google::obf_protobuf::internal::kEmptyString) {
        ref_->clear();
      }
    }
    name_ = 0u;
    name_en_ = 0u;
    distance_ = 0u;
  }
  directstops_.Clear();
  reversestops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportRoute::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operator;
        break;
      }
      
      // optional uint32 operator = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operator:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operator__)));
          set_has_operator_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ref;
        break;
      }
      
      // optional string ref = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->ref().data(), this->ref().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_name;
        break;
      }
      
      // optional uint32 name = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_name_en;
        break;
      }
      
      // optional uint32 name_en = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_en:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_en_)));
          set_has_name_en();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_distance;
        break;
      }
      
      // optional uint32 distance = 8;
      case 8: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_directStops;
        break;
      }
      
      // repeated .OsmAnd.OBF.TransportRouteStop directStops = 15;
      case 15: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directStops:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_directstops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_directStops;
        if (input->ExpectTag(130)) goto parse_reverseStops;
        break;
      }
      
      // repeated .OsmAnd.OBF.TransportRouteStop reverseStops = 16;
      case 16: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reverseStops:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reversestops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_reverseStops;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportRoute::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // optional uint32 type = 3;
  if (has_type()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // optional uint32 operator = 4;
  if (has_operator_()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(4, this->operator_(), output);
  }
  
  // optional string ref = 5;
  if (has_ref()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      5, this->ref(), output);
  }
  
  // optional uint32 name = 6;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(6, this->name(), output);
  }
  
  // optional uint32 name_en = 7;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(7, this->name_en(), output);
  }
  
  // optional uint32 distance = 8;
  if (has_distance()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(8, this->distance(), output);
  }
  
  // repeated .OsmAnd.OBF.TransportRouteStop directStops = 15;
  for (int i = 0; i < this->directstops_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->directstops(i), output);
  }
  
  // repeated .OsmAnd.OBF.TransportRouteStop reverseStops = 16;
  for (int i = 0; i < this->reversestops_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->reversestops(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* TransportRoute::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // optional uint32 operator = 4;
  if (has_operator_()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operator_(), target);
  }
  
  // optional string ref = 5;
  if (has_ref()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ref(), target);
  }
  
  // optional uint32 name = 6;
  if (has_name()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->name(), target);
  }
  
  // optional uint32 name_en = 7;
  if (has_name_en()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->name_en(), target);
  }
  
  // optional uint32 distance = 8;
  if (has_distance()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->distance(), target);
  }
  
  // repeated .OsmAnd.OBF.TransportRouteStop directStops = 15;
  for (int i = 0; i < this->directstops_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->directstops(i), target);
  }
  
  // repeated .OsmAnd.OBF.TransportRouteStop reverseStops = 16;
  for (int i = 0; i < this->reversestops_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->reversestops(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportRoute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 operator = 4;
    if (has_operator_()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->operator_());
    }
    
    // optional string ref = 5;
    if (has_ref()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }
    
    // optional uint32 name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }
    
    // optional uint32 name_en = 7;
    if (has_name_en()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->name_en());
    }
    
    // optional uint32 distance = 8;
    if (has_distance()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->distance());
    }
    
  }
  // repeated .OsmAnd.OBF.TransportRouteStop directStops = 15;
  total_size += 1 * this->directstops_size();
  for (int i = 0; i < this->directstops_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->directstops(i));
  }
  
  // repeated .OsmAnd.OBF.TransportRouteStop reverseStops = 16;
  total_size += 2 * this->reversestops_size();
  for (int i = 0; i < this->reversestops_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reversestops(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRoute::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportRoute* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const TransportRoute*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportRoute::MergeFrom(const TransportRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  directstops_.MergeFrom(from.directstops_);
  reversestops_.MergeFrom(from.reversestops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_name_en()) {
      set_name_en(from.name_en());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportRoute::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRoute::CopyFrom(const TransportRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < directstops_size(); i++) {
    if (!this->directstops(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reversestops_size(); i++) {
    if (!this->reversestops(i).IsInitialized()) return false;
  }
  return true;
}

void TransportRoute::Swap(TransportRoute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(operator__, other->operator__);
    std::swap(ref_, other->ref_);
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(distance_, other->distance_);
    directstops_.Swap(&other->directstops_);
    reversestops_.Swap(&other->reversestops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata TransportRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = TransportRoute_descriptor_;
  metadata.reflection = TransportRoute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportRouteStop::kIdFieldNumber;
const int TransportRouteStop::kDxFieldNumber;
const int TransportRouteStop::kDyFieldNumber;
const int TransportRouteStop::kNameFieldNumber;
const int TransportRouteStop::kNameEnFieldNumber;
#endif  // !_MSC_VER

TransportRouteStop::TransportRouteStop()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void TransportRouteStop::InitAsDefaultInstance() {
}

TransportRouteStop::TransportRouteStop(const TransportRouteStop& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportRouteStop::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  dx_ = 0;
  dy_ = 0;
  name_ = 0u;
  name_en_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportRouteStop::~TransportRouteStop() {
  SharedDtor();
}

void TransportRouteStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransportRouteStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* TransportRouteStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportRouteStop_descriptor_;
}

const TransportRouteStop& TransportRouteStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

TransportRouteStop* TransportRouteStop::default_instance_ = NULL;

TransportRouteStop* TransportRouteStop::New() const {
  return new TransportRouteStop;
}

void TransportRouteStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    dx_ = 0;
    dy_ = 0;
    name_ = 0u;
    name_en_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportRouteStop::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 id = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dx;
        break;
      }
      
      // required sint32 dx = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dx:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dx_)));
          set_has_dx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dy;
        break;
      }
      
      // required sint32 dy = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dy:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dy_)));
          set_has_dy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_name;
        break;
      }
      
      // required uint32 name = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_name_en;
        break;
      }
      
      // optional uint32 name_en = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_en:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_en_)));
          set_has_name_en();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportRouteStop::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required sint64 id = 1;
  if (has_id()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt64(1, this->id(), output);
  }
  
  // required sint32 dx = 2;
  if (has_dx()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(2, this->dx(), output);
  }
  
  // required sint32 dy = 3;
  if (has_dy()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(3, this->dy(), output);
  }
  
  // required uint32 name = 6;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(6, this->name(), output);
  }
  
  // optional uint32 name_en = 7;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(7, this->name_en(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* TransportRouteStop::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required sint64 id = 1;
  if (has_id()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->id(), target);
  }
  
  // required sint32 dx = 2;
  if (has_dx()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dx(), target);
  }
  
  // required sint32 dy = 3;
  if (has_dy()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->dy(), target);
  }
  
  // required uint32 name = 6;
  if (has_name()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->name(), target);
  }
  
  // optional uint32 name_en = 7;
  if (has_name_en()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->name_en(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportRouteStop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }
    
    // required sint32 dx = 2;
    if (has_dx()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->dx());
    }
    
    // required sint32 dy = 3;
    if (has_dy()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->dy());
    }
    
    // required uint32 name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }
    
    // optional uint32 name_en = 7;
    if (has_name_en()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->name_en());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRouteStop::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportRouteStop* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const TransportRouteStop*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportRouteStop::MergeFrom(const TransportRouteStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_dx()) {
      set_dx(from.dx());
    }
    if (from.has_dy()) {
      set_dy(from.dy());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_name_en()) {
      set_name_en(from.name_en());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportRouteStop::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRouteStop::CopyFrom(const TransportRouteStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRouteStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TransportRouteStop::Swap(TransportRouteStop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(dx_, other->dx_);
    std::swap(dy_, other->dy_);
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata TransportRouteStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = TransportRouteStop_descriptor_;
  metadata.reflection = TransportRouteStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportStop::kDxFieldNumber;
const int TransportStop::kDyFieldNumber;
const int TransportStop::kIdFieldNumber;
const int TransportStop::kNameFieldNumber;
const int TransportStop::kNameEnFieldNumber;
const int TransportStop::kRoutesFieldNumber;
#endif  // !_MSC_VER

TransportStop::TransportStop()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void TransportStop::InitAsDefaultInstance() {
}

TransportStop::TransportStop(const TransportStop& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportStop::SharedCtor() {
  _cached_size_ = 0;
  dx_ = 0;
  dy_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = 0u;
  name_en_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportStop::~TransportStop() {
  SharedDtor();
}

void TransportStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransportStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* TransportStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportStop_descriptor_;
}

const TransportStop& TransportStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

TransportStop* TransportStop::default_instance_ = NULL;

TransportStop* TransportStop::New() const {
  return new TransportStop;
}

void TransportStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dx_ = 0;
    dy_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    name_ = 0u;
    name_en_ = 0u;
  }
  routes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportStop::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 dx = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dx_)));
          set_has_dx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dy;
        break;
      }
      
      // required sint32 dy = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dy:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dy_)));
          set_has_dy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }
      
      // required sint64 id = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_name;
        break;
      }
      
      // required uint32 name = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_name_en;
        break;
      }
      
      // optional uint32 name_en = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_en:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_en_)));
          set_has_name_en();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_routes;
        break;
      }
      
      // repeated uint32 routes = 16;
      case 16: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routes:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_routes())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_routes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_routes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportStop::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required sint32 dx = 1;
  if (has_dx()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(1, this->dx(), output);
  }
  
  // required sint32 dy = 2;
  if (has_dy()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(2, this->dy(), output);
  }
  
  // required sint64 id = 5;
  if (has_id()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt64(5, this->id(), output);
  }
  
  // required uint32 name = 6;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(6, this->name(), output);
  }
  
  // optional uint32 name_en = 7;
  if (has_name_en()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(7, this->name_en(), output);
  }
  
  // repeated uint32 routes = 16;
  for (int i = 0; i < this->routes_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->routes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* TransportStop::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required sint32 dx = 1;
  if (has_dx()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->dx(), target);
  }
  
  // required sint32 dy = 2;
  if (has_dy()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dy(), target);
  }
  
  // required sint64 id = 5;
  if (has_id()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->id(), target);
  }
  
  // required uint32 name = 6;
  if (has_name()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->name(), target);
  }
  
  // optional uint32 name_en = 7;
  if (has_name_en()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->name_en(), target);
  }
  
  // repeated uint32 routes = 16;
  for (int i = 0; i < this->routes_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->routes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportStop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 dx = 1;
    if (has_dx()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->dx());
    }
    
    // required sint32 dy = 2;
    if (has_dy()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->dy());
    }
    
    // required sint64 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }
    
    // required uint32 name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }
    
    // optional uint32 name_en = 7;
    if (has_name_en()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->name_en());
    }
    
  }
  // repeated uint32 routes = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->routes_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        UInt32Size(this->routes(i));
    }
    total_size += 2 * this->routes_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportStop::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportStop* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const TransportStop*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportStop::MergeFrom(const TransportStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  routes_.MergeFrom(from.routes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dx()) {
      set_dx(from.dx());
    }
    if (from.has_dy()) {
      set_dy(from.dy());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_name_en()) {
      set_name_en(from.name_en());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportStop::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportStop::CopyFrom(const TransportStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TransportStop::Swap(TransportStop* other) {
  if (other != this) {
    std::swap(dx_, other->dx_);
    std::swap(dy_, other->dy_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    routes_.Swap(&other->routes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata TransportStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = TransportStop_descriptor_;
  metadata.reflection = TransportStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportStopsTree::kLeftFieldNumber;
const int TransportStopsTree::kRightFieldNumber;
const int TransportStopsTree::kTopFieldNumber;
const int TransportStopsTree::kBottomFieldNumber;
const int TransportStopsTree::kSubtreesFieldNumber;
const int TransportStopsTree::kLeafsFieldNumber;
const int TransportStopsTree::kBaseIdFieldNumber;
#endif  // !_MSC_VER

TransportStopsTree::TransportStopsTree()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void TransportStopsTree::InitAsDefaultInstance() {
}

TransportStopsTree::TransportStopsTree(const TransportStopsTree& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportStopsTree::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  baseid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportStopsTree::~TransportStopsTree() {
  SharedDtor();
}

void TransportStopsTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransportStopsTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* TransportStopsTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportStopsTree_descriptor_;
}

const TransportStopsTree& TransportStopsTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

TransportStopsTree* TransportStopsTree::default_instance_ = NULL;

TransportStopsTree* TransportStopsTree::New() const {
  return new TransportStopsTree;
}

void TransportStopsTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0;
    right_ = 0;
    top_ = 0;
    bottom_ = 0;
    baseid_ = GOOGLE_ULONGLONG(0);
  }
  subtrees_.Clear();
  leafs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportStopsTree::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 left = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }
      
      // required sint32 right = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }
      
      // required sint32 top = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }
      
      // required sint32 bottom = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_subtrees;
        break;
      }
      
      // repeated .OsmAnd.OBF.TransportStopsTree subtrees = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtrees:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subtrees()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_subtrees;
        if (input->ExpectTag(66)) goto parse_leafs;
        break;
      }
      
      // repeated .OsmAnd.OBF.TransportStop leafs = 8;
      case 8: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leafs:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leafs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_leafs;
        if (input->ExpectTag(128)) goto parse_baseId;
        break;
      }
      
      // optional uint64 baseId = 16;
      case 16: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseId:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &baseid_)));
          set_has_baseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportStopsTree::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required sint32 left = 1;
  if (has_left()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(1, this->left(), output);
  }
  
  // required sint32 right = 2;
  if (has_right()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(2, this->right(), output);
  }
  
  // required sint32 top = 3;
  if (has_top()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(3, this->top(), output);
  }
  
  // required sint32 bottom = 4;
  if (has_bottom()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(4, this->bottom(), output);
  }
  
  // repeated .OsmAnd.OBF.TransportStopsTree subtrees = 7;
  for (int i = 0; i < this->subtrees_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->subtrees(i), output);
  }
  
  // repeated .OsmAnd.OBF.TransportStop leafs = 8;
  for (int i = 0; i < this->leafs_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->leafs(i), output);
  }
  
  // optional uint64 baseId = 16;
  if (has_baseid()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64(16, this->baseid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* TransportStopsTree::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required sint32 left = 1;
  if (has_left()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->left(), target);
  }
  
  // required sint32 right = 2;
  if (has_right()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->right(), target);
  }
  
  // required sint32 top = 3;
  if (has_top()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->top(), target);
  }
  
  // required sint32 bottom = 4;
  if (has_bottom()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->bottom(), target);
  }
  
  // repeated .OsmAnd.OBF.TransportStopsTree subtrees = 7;
  for (int i = 0; i < this->subtrees_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->subtrees(i), target);
  }
  
  // repeated .OsmAnd.OBF.TransportStop leafs = 8;
  for (int i = 0; i < this->leafs_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->leafs(i), target);
  }
  
  // optional uint64 baseId = 16;
  if (has_baseid()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->baseid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportStopsTree::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->left());
    }
    
    // required sint32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->right());
    }
    
    // required sint32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->top());
    }
    
    // required sint32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->bottom());
    }
    
    // optional uint64 baseId = 16;
    if (has_baseid()) {
      total_size += 2 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt64Size(
          this->baseid());
    }
    
  }
  // repeated .OsmAnd.OBF.TransportStopsTree subtrees = 7;
  total_size += 1 * this->subtrees_size();
  for (int i = 0; i < this->subtrees_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subtrees(i));
  }
  
  // repeated .OsmAnd.OBF.TransportStop leafs = 8;
  total_size += 1 * this->leafs_size();
  for (int i = 0; i < this->leafs_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leafs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportStopsTree::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportStopsTree* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const TransportStopsTree*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportStopsTree::MergeFrom(const TransportStopsTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  subtrees_.MergeFrom(from.subtrees_);
  leafs_.MergeFrom(from.leafs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
    if (from.has_baseid()) {
      set_baseid(from.baseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportStopsTree::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportStopsTree::CopyFrom(const TransportStopsTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportStopsTree::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < subtrees_size(); i++) {
    if (!this->subtrees(i).IsInitialized()) return false;
  }
  for (int i = 0; i < leafs_size(); i++) {
    if (!this->leafs(i).IsInitialized()) return false;
  }
  return true;
}

void TransportStopsTree::Swap(TransportStopsTree* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    subtrees_.Swap(&other->subtrees_);
    leafs_.Swap(&other->leafs_);
    std::swap(baseid_, other->baseid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata TransportStopsTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = TransportStopsTree_descriptor_;
  metadata.reflection = TransportStopsTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndTransportIndex::kNameFieldNumber;
const int OsmAndTransportIndex::kRoutesFieldNumber;
const int OsmAndTransportIndex::kStopsFieldNumber;
const int OsmAndTransportIndex::kStringTableFieldNumber;
#endif  // !_MSC_VER

OsmAndTransportIndex::OsmAndTransportIndex()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndTransportIndex::InitAsDefaultInstance() {
  routes_ = const_cast< ::OsmAnd::OBF::TransportRoutes*>(&::OsmAnd::OBF::TransportRoutes::default_instance());
  stops_ = const_cast< ::OsmAnd::OBF::TransportStopsTree*>(&::OsmAnd::OBF::TransportStopsTree::default_instance());
  stringtable_ = const_cast< ::OsmAnd::OBF::StringTable*>(&::OsmAnd::OBF::StringTable::default_instance());
}

OsmAndTransportIndex::OsmAndTransportIndex(const OsmAndTransportIndex& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndTransportIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  routes_ = NULL;
  stops_ = NULL;
  stringtable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndTransportIndex::~OsmAndTransportIndex() {
  SharedDtor();
}

void OsmAndTransportIndex::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete routes_;
    delete stops_;
    delete stringtable_;
  }
}

void OsmAndTransportIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndTransportIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndTransportIndex_descriptor_;
}

const OsmAndTransportIndex& OsmAndTransportIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndTransportIndex* OsmAndTransportIndex::default_instance_ = NULL;

OsmAndTransportIndex* OsmAndTransportIndex::New() const {
  return new OsmAndTransportIndex;
}

void OsmAndTransportIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_routes()) {
      if (routes_ != NULL) routes_->::OsmAnd::OBF::TransportRoutes::Clear();
    }
    if (has_stops()) {
      if (stops_ != NULL) stops_->::OsmAnd::OBF::TransportStopsTree::Clear();
    }
    if (has_stringtable()) {
      if (stringtable_ != NULL) stringtable_->::OsmAnd::OBF::StringTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndTransportIndex::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_routes;
        break;
      }
      
      // optional .OsmAnd.OBF.TransportRoutes routes = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stops;
        break;
      }
      
      // optional .OsmAnd.OBF.TransportStopsTree stops = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stops:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stringTable;
        break;
      }
      
      // required .OsmAnd.OBF.StringTable stringTable = 9;
      case 9: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringTable:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndTransportIndex::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional .OsmAnd.OBF.TransportRoutes routes = 3;
  if (has_routes()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->routes(), output);
  }
  
  // optional .OsmAnd.OBF.TransportStopsTree stops = 6;
  if (has_stops()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stops(), output);
  }
  
  // required .OsmAnd.OBF.StringTable stringTable = 9;
  if (has_stringtable()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->stringtable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndTransportIndex::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional .OsmAnd.OBF.TransportRoutes routes = 3;
  if (has_routes()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->routes(), target);
  }
  
  // optional .OsmAnd.OBF.TransportStopsTree stops = 6;
  if (has_stops()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stops(), target);
  }
  
  // required .OsmAnd.OBF.StringTable stringTable = 9;
  if (has_stringtable()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->stringtable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndTransportIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .OsmAnd.OBF.TransportRoutes routes = 3;
    if (has_routes()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routes());
    }
    
    // optional .OsmAnd.OBF.TransportStopsTree stops = 6;
    if (has_stops()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stops());
    }
    
    // required .OsmAnd.OBF.StringTable stringTable = 9;
    if (has_stringtable()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stringtable());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndTransportIndex::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndTransportIndex* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndTransportIndex*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndTransportIndex::MergeFrom(const OsmAndTransportIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_routes()) {
      mutable_routes()->::OsmAnd::OBF::TransportRoutes::MergeFrom(from.routes());
    }
    if (from.has_stops()) {
      mutable_stops()->::OsmAnd::OBF::TransportStopsTree::MergeFrom(from.stops());
    }
    if (from.has_stringtable()) {
      mutable_stringtable()->::OsmAnd::OBF::StringTable::MergeFrom(from.stringtable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndTransportIndex::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndTransportIndex::CopyFrom(const OsmAndTransportIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndTransportIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  
  if (has_routes()) {
    if (!this->routes().IsInitialized()) return false;
  }
  if (has_stops()) {
    if (!this->stops().IsInitialized()) return false;
  }
  return true;
}

void OsmAndTransportIndex::Swap(OsmAndTransportIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(routes_, other->routes_);
    std::swap(stops_, other->stops_);
    std::swap(stringtable_, other->stringtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndTransportIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndTransportIndex_descriptor_;
  metadata.reflection = OsmAndTransportIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndPoiIndex::kNameFieldNumber;
const int OsmAndPoiIndex::kBoundariesFieldNumber;
const int OsmAndPoiIndex::kCategoriesTableFieldNumber;
const int OsmAndPoiIndex::kNameIndexFieldNumber;
const int OsmAndPoiIndex::kSubtypesTableFieldNumber;
const int OsmAndPoiIndex::kBoxesFieldNumber;
const int OsmAndPoiIndex::kPoiDataFieldNumber;
#endif  // !_MSC_VER

OsmAndPoiIndex::OsmAndPoiIndex()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndPoiIndex::InitAsDefaultInstance() {
  boundaries_ = const_cast< ::OsmAnd::OBF::OsmAndTileBox*>(&::OsmAnd::OBF::OsmAndTileBox::default_instance());
  nameindex_ = const_cast< ::OsmAnd::OBF::OsmAndPoiNameIndex*>(&::OsmAnd::OBF::OsmAndPoiNameIndex::default_instance());
  subtypestable_ = const_cast< ::OsmAnd::OBF::OsmAndSubtypesTable*>(&::OsmAnd::OBF::OsmAndSubtypesTable::default_instance());
}

OsmAndPoiIndex::OsmAndPoiIndex(const OsmAndPoiIndex& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndPoiIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  boundaries_ = NULL;
  nameindex_ = NULL;
  subtypestable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndPoiIndex::~OsmAndPoiIndex() {
  SharedDtor();
}

void OsmAndPoiIndex::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete boundaries_;
    delete nameindex_;
    delete subtypestable_;
  }
}

void OsmAndPoiIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndPoiIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndPoiIndex_descriptor_;
}

const OsmAndPoiIndex& OsmAndPoiIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndPoiIndex* OsmAndPoiIndex::default_instance_ = NULL;

OsmAndPoiIndex* OsmAndPoiIndex::New() const {
  return new OsmAndPoiIndex;
}

void OsmAndPoiIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_boundaries()) {
      if (boundaries_ != NULL) boundaries_->::OsmAnd::OBF::OsmAndTileBox::Clear();
    }
    if (has_nameindex()) {
      if (nameindex_ != NULL) nameindex_->::OsmAnd::OBF::OsmAndPoiNameIndex::Clear();
    }
    if (has_subtypestable()) {
      if (subtypestable_ != NULL) subtypestable_->::OsmAnd::OBF::OsmAndSubtypesTable::Clear();
    }
  }
  categoriestable_.Clear();
  boxes_.Clear();
  poidata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndPoiIndex::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boundaries;
        break;
      }
      
      // required .OsmAnd.OBF.OsmAndTileBox boundaries = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boundaries:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundaries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_categoriesTable;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndCategoryTable categoriesTable = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categoriesTable:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categoriestable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_categoriesTable;
        if (input->ExpectTag(34)) goto parse_nameIndex;
        break;
      }
      
      // optional .OsmAnd.OBF.OsmAndPoiNameIndex nameIndex = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameIndex:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nameindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subtypesTable;
        break;
      }
      
      // optional .OsmAnd.OBF.OsmAndSubtypesTable subtypesTable = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtypesTable:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subtypestable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_boxes;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndPoiBox boxes = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_boxes;
        if (input->ExpectTag(74)) goto parse_poiData;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndPoiBoxData poiData = 9;
      case 9: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiData:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poidata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_poiData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndPoiIndex::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .OsmAnd.OBF.OsmAndTileBox boundaries = 2;
  if (has_boundaries()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boundaries(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndCategoryTable categoriesTable = 3;
  for (int i = 0; i < this->categoriestable_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->categoriestable(i), output);
  }
  
  // optional .OsmAnd.OBF.OsmAndPoiNameIndex nameIndex = 4;
  if (has_nameindex()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nameindex(), output);
  }
  
  // optional .OsmAnd.OBF.OsmAndSubtypesTable subtypesTable = 5;
  if (has_subtypestable()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subtypestable(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiBox boxes = 6;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->boxes(i), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiBoxData poiData = 9;
  for (int i = 0; i < this->poidata_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->poidata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndPoiIndex::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .OsmAnd.OBF.OsmAndTileBox boundaries = 2;
  if (has_boundaries()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boundaries(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndCategoryTable categoriesTable = 3;
  for (int i = 0; i < this->categoriestable_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->categoriestable(i), target);
  }
  
  // optional .OsmAnd.OBF.OsmAndPoiNameIndex nameIndex = 4;
  if (has_nameindex()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nameindex(), target);
  }
  
  // optional .OsmAnd.OBF.OsmAndSubtypesTable subtypesTable = 5;
  if (has_subtypestable()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subtypestable(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiBox boxes = 6;
  for (int i = 0; i < this->boxes_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->boxes(i), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiBoxData poiData = 9;
  for (int i = 0; i < this->poidata_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->poidata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndPoiIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .OsmAnd.OBF.OsmAndTileBox boundaries = 2;
    if (has_boundaries()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundaries());
    }
    
    // optional .OsmAnd.OBF.OsmAndPoiNameIndex nameIndex = 4;
    if (has_nameindex()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nameindex());
    }
    
    // optional .OsmAnd.OBF.OsmAndSubtypesTable subtypesTable = 5;
    if (has_subtypestable()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subtypestable());
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndCategoryTable categoriesTable = 3;
  total_size += 1 * this->categoriestable_size();
  for (int i = 0; i < this->categoriestable_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->categoriestable(i));
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiBox boxes = 6;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiBoxData poiData = 9;
  total_size += 1 * this->poidata_size();
  for (int i = 0; i < this->poidata_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poidata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndPoiIndex::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndPoiIndex* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndPoiIndex*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndPoiIndex::MergeFrom(const OsmAndPoiIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  categoriestable_.MergeFrom(from.categoriestable_);
  boxes_.MergeFrom(from.boxes_);
  poidata_.MergeFrom(from.poidata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_boundaries()) {
      mutable_boundaries()->::OsmAnd::OBF::OsmAndTileBox::MergeFrom(from.boundaries());
    }
    if (from.has_nameindex()) {
      mutable_nameindex()->::OsmAnd::OBF::OsmAndPoiNameIndex::MergeFrom(from.nameindex());
    }
    if (from.has_subtypestable()) {
      mutable_subtypestable()->::OsmAnd::OBF::OsmAndSubtypesTable::MergeFrom(from.subtypestable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndPoiIndex::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndPoiIndex::CopyFrom(const OsmAndPoiIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndPoiIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_boundaries()) {
    if (!this->boundaries().IsInitialized()) return false;
  }
  for (int i = 0; i < categoriestable_size(); i++) {
    if (!this->categoriestable(i).IsInitialized()) return false;
  }
  if (has_nameindex()) {
    if (!this->nameindex().IsInitialized()) return false;
  }
  if (has_subtypestable()) {
    if (!this->subtypestable().IsInitialized()) return false;
  }
  for (int i = 0; i < boxes_size(); i++) {
    if (!this->boxes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < poidata_size(); i++) {
    if (!this->poidata(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndPoiIndex::Swap(OsmAndPoiIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(boundaries_, other->boundaries_);
    categoriestable_.Swap(&other->categoriestable_);
    std::swap(nameindex_, other->nameindex_);
    std::swap(subtypestable_, other->subtypestable_);
    boxes_.Swap(&other->boxes_);
    poidata_.Swap(&other->poidata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndPoiIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndPoiIndex_descriptor_;
  metadata.reflection = OsmAndPoiIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndPoiNameIndex_OsmAndPoiNameIndexData::kAtomsFieldNumber;
#endif  // !_MSC_VER

OsmAndPoiNameIndex_OsmAndPoiNameIndexData::OsmAndPoiNameIndex_OsmAndPoiNameIndexData()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndPoiNameIndex_OsmAndPoiNameIndexData::InitAsDefaultInstance() {
}

OsmAndPoiNameIndex_OsmAndPoiNameIndexData::OsmAndPoiNameIndex_OsmAndPoiNameIndexData(const OsmAndPoiNameIndex_OsmAndPoiNameIndexData& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndPoiNameIndex_OsmAndPoiNameIndexData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndPoiNameIndex_OsmAndPoiNameIndexData::~OsmAndPoiNameIndex_OsmAndPoiNameIndexData() {
  SharedDtor();
}

void OsmAndPoiNameIndex_OsmAndPoiNameIndexData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndPoiNameIndex_OsmAndPoiNameIndexData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndPoiNameIndex_OsmAndPoiNameIndexData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndPoiNameIndex_OsmAndPoiNameIndexData_descriptor_;
}

const OsmAndPoiNameIndex_OsmAndPoiNameIndexData& OsmAndPoiNameIndex_OsmAndPoiNameIndexData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndPoiNameIndex_OsmAndPoiNameIndexData* OsmAndPoiNameIndex_OsmAndPoiNameIndexData::default_instance_ = NULL;

OsmAndPoiNameIndex_OsmAndPoiNameIndexData* OsmAndPoiNameIndex_OsmAndPoiNameIndexData::New() const {
  return new OsmAndPoiNameIndex_OsmAndPoiNameIndexData;
}

void OsmAndPoiNameIndex_OsmAndPoiNameIndexData::Clear() {
  atoms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndPoiNameIndex_OsmAndPoiNameIndexData::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OsmAnd.OBF.OsmAndPoiNameIndexDataAtom atoms = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atoms:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atoms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_atoms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndPoiNameIndex_OsmAndPoiNameIndexData::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // repeated .OsmAnd.OBF.OsmAndPoiNameIndexDataAtom atoms = 3;
  for (int i = 0; i < this->atoms_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->atoms(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndPoiNameIndex_OsmAndPoiNameIndexData::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // repeated .OsmAnd.OBF.OsmAndPoiNameIndexDataAtom atoms = 3;
  for (int i = 0; i < this->atoms_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->atoms(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndPoiNameIndex_OsmAndPoiNameIndexData::ByteSize() const {
  int total_size = 0;
  
  // repeated .OsmAnd.OBF.OsmAndPoiNameIndexDataAtom atoms = 3;
  total_size += 1 * this->atoms_size();
  for (int i = 0; i < this->atoms_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atoms(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndPoiNameIndex_OsmAndPoiNameIndexData::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndPoiNameIndex_OsmAndPoiNameIndexData* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndPoiNameIndex_OsmAndPoiNameIndexData*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndPoiNameIndex_OsmAndPoiNameIndexData::MergeFrom(const OsmAndPoiNameIndex_OsmAndPoiNameIndexData& from) {
  GOOGLE_CHECK_NE(&from, this);
  atoms_.MergeFrom(from.atoms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndPoiNameIndex_OsmAndPoiNameIndexData::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndPoiNameIndex_OsmAndPoiNameIndexData::CopyFrom(const OsmAndPoiNameIndex_OsmAndPoiNameIndexData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndPoiNameIndex_OsmAndPoiNameIndexData::IsInitialized() const {
  
  return true;
}

void OsmAndPoiNameIndex_OsmAndPoiNameIndexData::Swap(OsmAndPoiNameIndex_OsmAndPoiNameIndexData* other) {
  if (other != this) {
    atoms_.Swap(&other->atoms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndPoiNameIndex_OsmAndPoiNameIndexData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndPoiNameIndex_OsmAndPoiNameIndexData_descriptor_;
  metadata.reflection = OsmAndPoiNameIndex_OsmAndPoiNameIndexData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OsmAndPoiNameIndex::kTableFieldNumber;
const int OsmAndPoiNameIndex::kDataFieldNumber;
#endif  // !_MSC_VER

OsmAndPoiNameIndex::OsmAndPoiNameIndex()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndPoiNameIndex::InitAsDefaultInstance() {
  table_ = const_cast< ::OsmAnd::OBF::IndexedStringTable*>(&::OsmAnd::OBF::IndexedStringTable::default_instance());
}

OsmAndPoiNameIndex::OsmAndPoiNameIndex(const OsmAndPoiNameIndex& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndPoiNameIndex::SharedCtor() {
  _cached_size_ = 0;
  table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndPoiNameIndex::~OsmAndPoiNameIndex() {
  SharedDtor();
}

void OsmAndPoiNameIndex::SharedDtor() {
  if (this != default_instance_) {
    delete table_;
  }
}

void OsmAndPoiNameIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndPoiNameIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndPoiNameIndex_descriptor_;
}

const OsmAndPoiNameIndex& OsmAndPoiNameIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndPoiNameIndex* OsmAndPoiNameIndex::default_instance_ = NULL;

OsmAndPoiNameIndex* OsmAndPoiNameIndex::New() const {
  return new OsmAndPoiNameIndex;
}

void OsmAndPoiNameIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table()) {
      if (table_ != NULL) table_->::OsmAnd::OBF::IndexedStringTable::Clear();
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndPoiNameIndex::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .OsmAnd.OBF.IndexedStringTable table = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndPoiNameIndex.OsmAndPoiNameIndexData data = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndPoiNameIndex::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required .OsmAnd.OBF.IndexedStringTable table = 3;
  if (has_table()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiNameIndex.OsmAndPoiNameIndexData data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndPoiNameIndex::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required .OsmAnd.OBF.IndexedStringTable table = 3;
  if (has_table()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiNameIndex.OsmAndPoiNameIndexData data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndPoiNameIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .OsmAnd.OBF.IndexedStringTable table = 3;
    if (has_table()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table());
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndPoiNameIndex.OsmAndPoiNameIndexData data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndPoiNameIndex::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndPoiNameIndex* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndPoiNameIndex*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndPoiNameIndex::MergeFrom(const OsmAndPoiNameIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      mutable_table()->::OsmAnd::OBF::IndexedStringTable::MergeFrom(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndPoiNameIndex::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndPoiNameIndex::CopyFrom(const OsmAndPoiNameIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndPoiNameIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OsmAndPoiNameIndex::Swap(OsmAndPoiNameIndex* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndPoiNameIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndPoiNameIndex_descriptor_;
  metadata.reflection = OsmAndPoiNameIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndPoiNameIndexDataAtom::kZoomFieldNumber;
const int OsmAndPoiNameIndexDataAtom::kXFieldNumber;
const int OsmAndPoiNameIndexDataAtom::kYFieldNumber;
const int OsmAndPoiNameIndexDataAtom::kShiftToFieldNumber;
#endif  // !_MSC_VER

OsmAndPoiNameIndexDataAtom::OsmAndPoiNameIndexDataAtom()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndPoiNameIndexDataAtom::InitAsDefaultInstance() {
}

OsmAndPoiNameIndexDataAtom::OsmAndPoiNameIndexDataAtom(const OsmAndPoiNameIndexDataAtom& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndPoiNameIndexDataAtom::SharedCtor() {
  _cached_size_ = 0;
  zoom_ = 0u;
  x_ = 0u;
  y_ = 0u;
  shiftto_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndPoiNameIndexDataAtom::~OsmAndPoiNameIndexDataAtom() {
  SharedDtor();
}

void OsmAndPoiNameIndexDataAtom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndPoiNameIndexDataAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndPoiNameIndexDataAtom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndPoiNameIndexDataAtom_descriptor_;
}

const OsmAndPoiNameIndexDataAtom& OsmAndPoiNameIndexDataAtom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndPoiNameIndexDataAtom* OsmAndPoiNameIndexDataAtom::default_instance_ = NULL;

OsmAndPoiNameIndexDataAtom* OsmAndPoiNameIndexDataAtom::New() const {
  return new OsmAndPoiNameIndexDataAtom;
}

void OsmAndPoiNameIndexDataAtom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoom_ = 0u;
    x_ = 0u;
    y_ = 0u;
    shiftto_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndPoiNameIndexDataAtom::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoom = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoom_)));
          set_has_zoom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_shiftTo;
        break;
      }
      
      // optional fixed32 shiftTo = 14;
      case 14: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shiftTo:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shiftto_)));
          set_has_shiftto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndPoiNameIndexDataAtom::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zoom = 2;
  if (has_zoom()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoom(), output);
  }
  
  // optional uint32 x = 3;
  if (has_x()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }
  
  // optional uint32 y = 4;
  if (has_y()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }
  
  // optional fixed32 shiftTo = 14;
  if (has_shiftto()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32(14, this->shiftto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndPoiNameIndexDataAtom::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // optional uint32 zoom = 2;
  if (has_zoom()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoom(), target);
  }
  
  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }
  
  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }
  
  // optional fixed32 shiftTo = 14;
  if (has_shiftto()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->shiftto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndPoiNameIndexDataAtom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoom = 2;
    if (has_zoom()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->zoom());
    }
    
    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
    // optional fixed32 shiftTo = 14;
    if (has_shiftto()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndPoiNameIndexDataAtom::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndPoiNameIndexDataAtom* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndPoiNameIndexDataAtom*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndPoiNameIndexDataAtom::MergeFrom(const OsmAndPoiNameIndexDataAtom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoom()) {
      set_zoom(from.zoom());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_shiftto()) {
      set_shiftto(from.shiftto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndPoiNameIndexDataAtom::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndPoiNameIndexDataAtom::CopyFrom(const OsmAndPoiNameIndexDataAtom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndPoiNameIndexDataAtom::IsInitialized() const {
  
  return true;
}

void OsmAndPoiNameIndexDataAtom::Swap(OsmAndPoiNameIndexDataAtom* other) {
  if (other != this) {
    std::swap(zoom_, other->zoom_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(shiftto_, other->shiftto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndPoiNameIndexDataAtom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndPoiNameIndexDataAtom_descriptor_;
  metadata.reflection = OsmAndPoiNameIndexDataAtom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndCategoryTable::kCategoryFieldNumber;
const int OsmAndCategoryTable::kSubcategoriesFieldNumber;
#endif  // !_MSC_VER

OsmAndCategoryTable::OsmAndCategoryTable()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndCategoryTable::InitAsDefaultInstance() {
}

OsmAndCategoryTable::OsmAndCategoryTable(const OsmAndCategoryTable& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndCategoryTable::SharedCtor() {
  _cached_size_ = 0;
  category_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndCategoryTable::~OsmAndCategoryTable() {
  SharedDtor();
}

void OsmAndCategoryTable::SharedDtor() {
  if (category_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete category_;
  }
  if (this != default_instance_) {
  }
}

void OsmAndCategoryTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndCategoryTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndCategoryTable_descriptor_;
}

const OsmAndCategoryTable& OsmAndCategoryTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndCategoryTable* OsmAndCategoryTable::default_instance_ = NULL;

OsmAndCategoryTable* OsmAndCategoryTable::New() const {
  return new OsmAndCategoryTable;
}

void OsmAndCategoryTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_category()) {
      if (category_ != &::google::obf_protobuf::internal::kEmptyString) {
        category_->clear();
      }
    }
  }
  subcategories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndCategoryTable::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string category = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->category().data(), this->category().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subcategories;
        break;
      }
      
      // repeated string subcategories = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subcategories:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subcategories()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->subcategories(0).data(), this->subcategories(0).length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subcategories;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndCategoryTable::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required string category = 1;
  if (has_category()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      1, this->category(), output);
  }
  
  // repeated string subcategories = 3;
  for (int i = 0; i < this->subcategories_size(); i++) {
  ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
    this->subcategories(i).data(), this->subcategories(i).length(),
    ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      3, this->subcategories(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndCategoryTable::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required string category = 1;
  if (has_category()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }
  
  // repeated string subcategories = 3;
  for (int i = 0; i < this->subcategories_size(); i++) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->subcategories(i).data(), this->subcategories(i).length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->subcategories(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndCategoryTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string category = 1;
    if (has_category()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }
    
  }
  // repeated string subcategories = 3;
  total_size += 1 * this->subcategories_size();
  for (int i = 0; i < this->subcategories_size(); i++) {
    total_size += ::google::obf_protobuf::internal::WireFormatLite::StringSize(
      this->subcategories(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndCategoryTable::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndCategoryTable* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndCategoryTable*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndCategoryTable::MergeFrom(const OsmAndCategoryTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  subcategories_.MergeFrom(from.subcategories_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category()) {
      set_category(from.category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndCategoryTable::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndCategoryTable::CopyFrom(const OsmAndCategoryTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndCategoryTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OsmAndCategoryTable::Swap(OsmAndCategoryTable* other) {
  if (other != this) {
    std::swap(category_, other->category_);
    subcategories_.Swap(&other->subcategories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndCategoryTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndCategoryTable_descriptor_;
  metadata.reflection = OsmAndCategoryTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndSubtypesTable::kSubtypesFieldNumber;
#endif  // !_MSC_VER

OsmAndSubtypesTable::OsmAndSubtypesTable()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndSubtypesTable::InitAsDefaultInstance() {
}

OsmAndSubtypesTable::OsmAndSubtypesTable(const OsmAndSubtypesTable& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndSubtypesTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndSubtypesTable::~OsmAndSubtypesTable() {
  SharedDtor();
}

void OsmAndSubtypesTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndSubtypesTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndSubtypesTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndSubtypesTable_descriptor_;
}

const OsmAndSubtypesTable& OsmAndSubtypesTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndSubtypesTable* OsmAndSubtypesTable::default_instance_ = NULL;

OsmAndSubtypesTable* OsmAndSubtypesTable::New() const {
  return new OsmAndSubtypesTable;
}

void OsmAndSubtypesTable::Clear() {
  subtypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndSubtypesTable::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OsmAnd.OBF.OsmAndPoiSubtype subtypes = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtypes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subtypes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_subtypes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndSubtypesTable::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // repeated .OsmAnd.OBF.OsmAndPoiSubtype subtypes = 4;
  for (int i = 0; i < this->subtypes_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->subtypes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndSubtypesTable::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // repeated .OsmAnd.OBF.OsmAndPoiSubtype subtypes = 4;
  for (int i = 0; i < this->subtypes_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->subtypes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndSubtypesTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .OsmAnd.OBF.OsmAndPoiSubtype subtypes = 4;
  total_size += 1 * this->subtypes_size();
  for (int i = 0; i < this->subtypes_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subtypes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndSubtypesTable::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndSubtypesTable* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndSubtypesTable*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndSubtypesTable::MergeFrom(const OsmAndSubtypesTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  subtypes_.MergeFrom(from.subtypes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndSubtypesTable::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndSubtypesTable::CopyFrom(const OsmAndSubtypesTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndSubtypesTable::IsInitialized() const {
  
  for (int i = 0; i < subtypes_size(); i++) {
    if (!this->subtypes(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndSubtypesTable::Swap(OsmAndSubtypesTable* other) {
  if (other != this) {
    subtypes_.Swap(&other->subtypes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndSubtypesTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndSubtypesTable_descriptor_;
  metadata.reflection = OsmAndSubtypesTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndPoiSubtype::kNameFieldNumber;
const int OsmAndPoiSubtype::kTagnameFieldNumber;
const int OsmAndPoiSubtype::kIsTextFieldNumber;
const int OsmAndPoiSubtype::kFrequencyFieldNumber;
const int OsmAndPoiSubtype::kSubtypeValuesSizeFieldNumber;
const int OsmAndPoiSubtype::kSubtypeValueFieldNumber;
#endif  // !_MSC_VER

OsmAndPoiSubtype::OsmAndPoiSubtype()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndPoiSubtype::InitAsDefaultInstance() {
}

OsmAndPoiSubtype::OsmAndPoiSubtype(const OsmAndPoiSubtype& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndPoiSubtype::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  tagname_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  istext_ = false;
  frequency_ = 0u;
  subtypevaluessize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndPoiSubtype::~OsmAndPoiSubtype() {
  SharedDtor();
}

void OsmAndPoiSubtype::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (tagname_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete tagname_;
  }
  if (this != default_instance_) {
  }
}

void OsmAndPoiSubtype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndPoiSubtype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndPoiSubtype_descriptor_;
}

const OsmAndPoiSubtype& OsmAndPoiSubtype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndPoiSubtype* OsmAndPoiSubtype::default_instance_ = NULL;

OsmAndPoiSubtype* OsmAndPoiSubtype::New() const {
  return new OsmAndPoiSubtype;
}

void OsmAndPoiSubtype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_tagname()) {
      if (tagname_ != &::google::obf_protobuf::internal::kEmptyString) {
        tagname_->clear();
      }
    }
    istext_ = false;
    frequency_ = 0u;
    subtypevaluessize_ = 0u;
  }
  subtypevalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndPoiSubtype::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tagname;
        break;
      }
      
      // optional string tagname = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tagname:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagname()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->tagname().data(), this->tagname().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isText;
        break;
      }
      
      // required bool isText = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isText:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::obf_protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istext_)));
          set_has_istext();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frequency;
        break;
      }
      
      // optional uint32 frequency = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frequency:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_subtypeValuesSize;
        break;
      }
      
      // optional uint32 subtypeValuesSize = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtypeValuesSize:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtypevaluessize_)));
          set_has_subtypevaluessize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_subtypeValue;
        break;
      }
      
      // repeated string subtypeValue = 8;
      case 8: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtypeValue:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subtypevalue()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtypevalue(0).data(), this->subtypevalue(0).length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_subtypeValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndPoiSubtype::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string tagname = 2;
  if (has_tagname()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->tagname().data(), this->tagname().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      2, this->tagname(), output);
  }
  
  // required bool isText = 3;
  if (has_istext()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBool(3, this->istext(), output);
  }
  
  // optional uint32 frequency = 5;
  if (has_frequency()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(5, this->frequency(), output);
  }
  
  // optional uint32 subtypeValuesSize = 6;
  if (has_subtypevaluessize()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(6, this->subtypevaluessize(), output);
  }
  
  // repeated string subtypeValue = 8;
  for (int i = 0; i < this->subtypevalue_size(); i++) {
  ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
    this->subtypevalue(i).data(), this->subtypevalue(i).length(),
    ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      8, this->subtypevalue(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndPoiSubtype::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string tagname = 2;
  if (has_tagname()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->tagname().data(), this->tagname().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tagname(), target);
  }
  
  // required bool isText = 3;
  if (has_istext()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istext(), target);
  }
  
  // optional uint32 frequency = 5;
  if (has_frequency()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->frequency(), target);
  }
  
  // optional uint32 subtypeValuesSize = 6;
  if (has_subtypevaluessize()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->subtypevaluessize(), target);
  }
  
  // repeated string subtypeValue = 8;
  for (int i = 0; i < this->subtypevalue_size(); i++) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtypevalue(i).data(), this->subtypevalue(i).length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->subtypevalue(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndPoiSubtype::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string tagname = 2;
    if (has_tagname()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->tagname());
    }
    
    // required bool isText = 3;
    if (has_istext()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 frequency = 5;
    if (has_frequency()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency());
    }
    
    // optional uint32 subtypeValuesSize = 6;
    if (has_subtypevaluessize()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->subtypevaluessize());
    }
    
  }
  // repeated string subtypeValue = 8;
  total_size += 1 * this->subtypevalue_size();
  for (int i = 0; i < this->subtypevalue_size(); i++) {
    total_size += ::google::obf_protobuf::internal::WireFormatLite::StringSize(
      this->subtypevalue(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndPoiSubtype::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndPoiSubtype* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndPoiSubtype*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndPoiSubtype::MergeFrom(const OsmAndPoiSubtype& from) {
  GOOGLE_CHECK_NE(&from, this);
  subtypevalue_.MergeFrom(from.subtypevalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tagname()) {
      set_tagname(from.tagname());
    }
    if (from.has_istext()) {
      set_istext(from.istext());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_subtypevaluessize()) {
      set_subtypevaluessize(from.subtypevaluessize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndPoiSubtype::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndPoiSubtype::CopyFrom(const OsmAndPoiSubtype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndPoiSubtype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void OsmAndPoiSubtype::Swap(OsmAndPoiSubtype* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(tagname_, other->tagname_);
    std::swap(istext_, other->istext_);
    std::swap(frequency_, other->frequency_);
    std::swap(subtypevaluessize_, other->subtypevaluessize_);
    subtypevalue_.Swap(&other->subtypevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndPoiSubtype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndPoiSubtype_descriptor_;
  metadata.reflection = OsmAndPoiSubtype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndPoiBox::kZoomFieldNumber;
const int OsmAndPoiBox::kLeftFieldNumber;
const int OsmAndPoiBox::kTopFieldNumber;
const int OsmAndPoiBox::kCategoriesFieldNumber;
const int OsmAndPoiBox::kSubBoxesFieldNumber;
const int OsmAndPoiBox::kShiftToDataFieldNumber;
#endif  // !_MSC_VER

OsmAndPoiBox::OsmAndPoiBox()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndPoiBox::InitAsDefaultInstance() {
  categories_ = const_cast< ::OsmAnd::OBF::OsmAndPoiCategories*>(&::OsmAnd::OBF::OsmAndPoiCategories::default_instance());
}

OsmAndPoiBox::OsmAndPoiBox(const OsmAndPoiBox& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndPoiBox::SharedCtor() {
  _cached_size_ = 0;
  zoom_ = 0u;
  left_ = 0;
  top_ = 0;
  categories_ = NULL;
  shifttodata_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndPoiBox::~OsmAndPoiBox() {
  SharedDtor();
}

void OsmAndPoiBox::SharedDtor() {
  if (this != default_instance_) {
    delete categories_;
  }
}

void OsmAndPoiBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndPoiBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndPoiBox_descriptor_;
}

const OsmAndPoiBox& OsmAndPoiBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndPoiBox* OsmAndPoiBox::default_instance_ = NULL;

OsmAndPoiBox* OsmAndPoiBox::New() const {
  return new OsmAndPoiBox;
}

void OsmAndPoiBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoom_ = 0u;
    left_ = 0;
    top_ = 0;
    if (has_categories()) {
      if (categories_ != NULL) categories_->::OsmAnd::OBF::OsmAndPoiCategories::Clear();
    }
    shifttodata_ = 0u;
  }
  subboxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndPoiBox::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zoom = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoom_)));
          set_has_zoom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left;
        break;
      }
      
      // required sint32 left = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }
      
      // required sint32 top = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_categories;
        break;
      }
      
      // optional .OsmAnd.OBF.OsmAndPoiCategories categories = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categories:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_categories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_subBoxes;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndPoiBox subBoxes = 10;
      case 10: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subBoxes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subboxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_subBoxes;
        if (input->ExpectTag(117)) goto parse_shiftToData;
        break;
      }
      
      // optional fixed32 shiftToData = 14;
      case 14: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shiftToData:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shifttodata_)));
          set_has_shifttodata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndPoiBox::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required uint32 zoom = 1;
  if (has_zoom()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoom(), output);
  }
  
  // required sint32 left = 2;
  if (has_left()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(2, this->left(), output);
  }
  
  // required sint32 top = 3;
  if (has_top()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(3, this->top(), output);
  }
  
  // optional .OsmAnd.OBF.OsmAndPoiCategories categories = 4;
  if (has_categories()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->categories(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiBox subBoxes = 10;
  for (int i = 0; i < this->subboxes_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->subboxes(i), output);
  }
  
  // optional fixed32 shiftToData = 14;
  if (has_shifttodata()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32(14, this->shifttodata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndPoiBox::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required uint32 zoom = 1;
  if (has_zoom()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoom(), target);
  }
  
  // required sint32 left = 2;
  if (has_left()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->left(), target);
  }
  
  // required sint32 top = 3;
  if (has_top()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->top(), target);
  }
  
  // optional .OsmAnd.OBF.OsmAndPoiCategories categories = 4;
  if (has_categories()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->categories(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiBox subBoxes = 10;
  for (int i = 0; i < this->subboxes_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->subboxes(i), target);
  }
  
  // optional fixed32 shiftToData = 14;
  if (has_shifttodata()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->shifttodata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndPoiBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zoom = 1;
    if (has_zoom()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->zoom());
    }
    
    // required sint32 left = 2;
    if (has_left()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->left());
    }
    
    // required sint32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->top());
    }
    
    // optional .OsmAnd.OBF.OsmAndPoiCategories categories = 4;
    if (has_categories()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories());
    }
    
    // optional fixed32 shiftToData = 14;
    if (has_shifttodata()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndPoiBox subBoxes = 10;
  total_size += 1 * this->subboxes_size();
  for (int i = 0; i < this->subboxes_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subboxes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndPoiBox::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndPoiBox* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndPoiBox*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndPoiBox::MergeFrom(const OsmAndPoiBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  subboxes_.MergeFrom(from.subboxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoom()) {
      set_zoom(from.zoom());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_categories()) {
      mutable_categories()->::OsmAnd::OBF::OsmAndPoiCategories::MergeFrom(from.categories());
    }
    if (from.has_shifttodata()) {
      set_shifttodata(from.shifttodata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndPoiBox::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndPoiBox::CopyFrom(const OsmAndPoiBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndPoiBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < subboxes_size(); i++) {
    if (!this->subboxes(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndPoiBox::Swap(OsmAndPoiBox* other) {
  if (other != this) {
    std::swap(zoom_, other->zoom_);
    std::swap(left_, other->left_);
    std::swap(top_, other->top_);
    std::swap(categories_, other->categories_);
    subboxes_.Swap(&other->subboxes_);
    std::swap(shifttodata_, other->shifttodata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndPoiBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndPoiBox_descriptor_;
  metadata.reflection = OsmAndPoiBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndPoiCategories::kCategoriesFieldNumber;
const int OsmAndPoiCategories::kSubcategoriesFieldNumber;
#endif  // !_MSC_VER

OsmAndPoiCategories::OsmAndPoiCategories()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndPoiCategories::InitAsDefaultInstance() {
}

OsmAndPoiCategories::OsmAndPoiCategories(const OsmAndPoiCategories& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndPoiCategories::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndPoiCategories::~OsmAndPoiCategories() {
  SharedDtor();
}

void OsmAndPoiCategories::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndPoiCategories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndPoiCategories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndPoiCategories_descriptor_;
}

const OsmAndPoiCategories& OsmAndPoiCategories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndPoiCategories* OsmAndPoiCategories::default_instance_ = NULL;

OsmAndPoiCategories* OsmAndPoiCategories::New() const {
  return new OsmAndPoiCategories;
}

void OsmAndPoiCategories::Clear() {
  categories_.Clear();
  subcategories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndPoiCategories::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 categories = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_categories:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_categories())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_categories())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_categories;
        if (input->ExpectTag(40)) goto parse_subcategories;
        break;
      }
      
      // repeated uint32 subcategories = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subcategories:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_subcategories())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subcategories())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_subcategories;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndPoiCategories::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 categories = 3;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->categories(i), output);
  }
  
  // repeated uint32 subcategories = 5;
  for (int i = 0; i < this->subcategories_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->subcategories(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndPoiCategories::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // repeated uint32 categories = 3;
  for (int i = 0; i < this->categories_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->categories(i), target);
  }
  
  // repeated uint32 subcategories = 5;
  for (int i = 0; i < this->subcategories_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->subcategories(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndPoiCategories::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 categories = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->categories_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        UInt32Size(this->categories(i));
    }
    total_size += 1 * this->categories_size() + data_size;
  }
  
  // repeated uint32 subcategories = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->subcategories_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        UInt32Size(this->subcategories(i));
    }
    total_size += 1 * this->subcategories_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndPoiCategories::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndPoiCategories* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndPoiCategories*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndPoiCategories::MergeFrom(const OsmAndPoiCategories& from) {
  GOOGLE_CHECK_NE(&from, this);
  categories_.MergeFrom(from.categories_);
  subcategories_.MergeFrom(from.subcategories_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndPoiCategories::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndPoiCategories::CopyFrom(const OsmAndPoiCategories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndPoiCategories::IsInitialized() const {
  
  return true;
}

void OsmAndPoiCategories::Swap(OsmAndPoiCategories* other) {
  if (other != this) {
    categories_.Swap(&other->categories_);
    subcategories_.Swap(&other->subcategories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndPoiCategories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndPoiCategories_descriptor_;
  metadata.reflection = OsmAndPoiCategories_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndPoiBoxData::kZoomFieldNumber;
const int OsmAndPoiBoxData::kXFieldNumber;
const int OsmAndPoiBoxData::kYFieldNumber;
const int OsmAndPoiBoxData::kPoiDataFieldNumber;
#endif  // !_MSC_VER

OsmAndPoiBoxData::OsmAndPoiBoxData()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndPoiBoxData::InitAsDefaultInstance() {
}

OsmAndPoiBoxData::OsmAndPoiBoxData(const OsmAndPoiBoxData& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndPoiBoxData::SharedCtor() {
  _cached_size_ = 0;
  zoom_ = 0u;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndPoiBoxData::~OsmAndPoiBoxData() {
  SharedDtor();
}

void OsmAndPoiBoxData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndPoiBoxData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndPoiBoxData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndPoiBoxData_descriptor_;
}

const OsmAndPoiBoxData& OsmAndPoiBoxData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndPoiBoxData* OsmAndPoiBoxData::default_instance_ = NULL;

OsmAndPoiBoxData* OsmAndPoiBoxData::New() const {
  return new OsmAndPoiBoxData;
}

void OsmAndPoiBoxData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoom_ = 0u;
    x_ = 0u;
    y_ = 0u;
  }
  poidata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndPoiBoxData::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoom = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoom_)));
          set_has_zoom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_poiData;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndPoiBoxDataAtom poiData = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiData:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poidata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_poiData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndPoiBoxData::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zoom = 1;
  if (has_zoom()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoom(), output);
  }
  
  // optional uint32 x = 2;
  if (has_x()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }
  
  // optional uint32 y = 3;
  if (has_y()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiBoxDataAtom poiData = 5;
  for (int i = 0; i < this->poidata_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->poidata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndPoiBoxData::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // optional uint32 zoom = 1;
  if (has_zoom()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoom(), target);
  }
  
  // optional uint32 x = 2;
  if (has_x()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }
  
  // optional uint32 y = 3;
  if (has_y()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndPoiBoxDataAtom poiData = 5;
  for (int i = 0; i < this->poidata_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->poidata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndPoiBoxData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoom = 1;
    if (has_zoom()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->zoom());
    }
    
    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndPoiBoxDataAtom poiData = 5;
  total_size += 1 * this->poidata_size();
  for (int i = 0; i < this->poidata_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poidata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndPoiBoxData::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndPoiBoxData* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndPoiBoxData*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndPoiBoxData::MergeFrom(const OsmAndPoiBoxData& from) {
  GOOGLE_CHECK_NE(&from, this);
  poidata_.MergeFrom(from.poidata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoom()) {
      set_zoom(from.zoom());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndPoiBoxData::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndPoiBoxData::CopyFrom(const OsmAndPoiBoxData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndPoiBoxData::IsInitialized() const {
  
  for (int i = 0; i < poidata_size(); i++) {
    if (!this->poidata(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndPoiBoxData::Swap(OsmAndPoiBoxData* other) {
  if (other != this) {
    std::swap(zoom_, other->zoom_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    poidata_.Swap(&other->poidata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndPoiBoxData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndPoiBoxData_descriptor_;
  metadata.reflection = OsmAndPoiBoxData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndPoiBoxDataAtom::kDxFieldNumber;
const int OsmAndPoiBoxDataAtom::kDyFieldNumber;
const int OsmAndPoiBoxDataAtom::kCategoriesFieldNumber;
const int OsmAndPoiBoxDataAtom::kSubcategoriesFieldNumber;
const int OsmAndPoiBoxDataAtom::kNameFieldNumber;
const int OsmAndPoiBoxDataAtom::kNameEnFieldNumber;
const int OsmAndPoiBoxDataAtom::kIdFieldNumber;
const int OsmAndPoiBoxDataAtom::kOpeningHoursFieldNumber;
const int OsmAndPoiBoxDataAtom::kSiteFieldNumber;
const int OsmAndPoiBoxDataAtom::kPhoneFieldNumber;
const int OsmAndPoiBoxDataAtom::kNoteFieldNumber;
const int OsmAndPoiBoxDataAtom::kTextCategoriesFieldNumber;
const int OsmAndPoiBoxDataAtom::kTextValuesFieldNumber;
#endif  // !_MSC_VER

OsmAndPoiBoxDataAtom::OsmAndPoiBoxDataAtom()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndPoiBoxDataAtom::InitAsDefaultInstance() {
}

OsmAndPoiBoxDataAtom::OsmAndPoiBoxDataAtom(const OsmAndPoiBoxDataAtom& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndPoiBoxDataAtom::SharedCtor() {
  _cached_size_ = 0;
  dx_ = 0;
  dy_ = 0;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  nameen_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  id_ = GOOGLE_ULONGLONG(0);
  openinghours_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  site_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  note_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndPoiBoxDataAtom::~OsmAndPoiBoxDataAtom() {
  SharedDtor();
}

void OsmAndPoiBoxDataAtom::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (nameen_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete nameen_;
  }
  if (openinghours_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete openinghours_;
  }
  if (site_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete site_;
  }
  if (phone_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (note_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete note_;
  }
  if (this != default_instance_) {
  }
}

void OsmAndPoiBoxDataAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndPoiBoxDataAtom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndPoiBoxDataAtom_descriptor_;
}

const OsmAndPoiBoxDataAtom& OsmAndPoiBoxDataAtom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndPoiBoxDataAtom* OsmAndPoiBoxDataAtom::default_instance_ = NULL;

OsmAndPoiBoxDataAtom* OsmAndPoiBoxDataAtom::New() const {
  return new OsmAndPoiBoxDataAtom;
}

void OsmAndPoiBoxDataAtom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dx_ = 0;
    dy_ = 0;
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_nameen()) {
      if (nameen_ != &::google::obf_protobuf::internal::kEmptyString) {
        nameen_->clear();
      }
    }
    id_ = GOOGLE_ULONGLONG(0);
    if (has_openinghours()) {
      if (openinghours_ != &::google::obf_protobuf::internal::kEmptyString) {
        openinghours_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_site()) {
      if (site_ != &::google::obf_protobuf::internal::kEmptyString) {
        site_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::obf_protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_note()) {
      if (note_ != &::google::obf_protobuf::internal::kEmptyString) {
        note_->clear();
      }
    }
  }
  categories_.Clear();
  subcategories_.Clear();
  textcategories_.Clear();
  textvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndPoiBoxDataAtom::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 dx = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dx_)));
          set_has_dx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dy;
        break;
      }
      
      // required sint32 dy = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dy:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dy_)));
          set_has_dy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_categories;
        break;
      }
      
      // repeated uint32 categories = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_categories:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_categories())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_categories())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_categories;
        if (input->ExpectTag(40)) goto parse_subcategories;
        break;
      }
      
      // repeated uint32 subcategories = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subcategories:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_subcategories())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subcategories())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_subcategories;
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // optional string name = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nameEn;
        break;
      }
      
      // optional string nameEn = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameEn:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameen()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->nameen().data(), this->nameen().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }
      
      // optional uint64 id = 8;
      case 8: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_openingHours;
        break;
      }
      
      // optional string openingHours = 10;
      case 10: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openingHours:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openinghours()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->openinghours().data(), this->openinghours().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_site;
        break;
      }
      
      // optional string site = 11;
      case 11: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_site:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->site().data(), this->site().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_phone;
        break;
      }
      
      // optional string phone = 12;
      case 12: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_note;
        break;
      }
      
      // optional string note = 13;
      case 13: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_note:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->note().data(), this->note().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_textCategories;
        break;
      }
      
      // repeated uint32 textCategories = 14;
      case 14: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textCategories:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_textcategories())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_textcategories())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_textCategories;
        if (input->ExpectTag(122)) goto parse_textValues;
        break;
      }
      
      // repeated string textValues = 15;
      case 15: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textValues:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->add_textvalues()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->textvalues(0).data(), this->textvalues(0).length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_textValues;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndPoiBoxDataAtom::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required sint32 dx = 2;
  if (has_dx()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(2, this->dx(), output);
  }
  
  // required sint32 dy = 3;
  if (has_dy()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(3, this->dy(), output);
  }
  
  // repeated uint32 categories = 4;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->categories(i), output);
  }
  
  // repeated uint32 subcategories = 5;
  for (int i = 0; i < this->subcategories_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->subcategories(i), output);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }
  
  // optional string nameEn = 7;
  if (has_nameen()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->nameen().data(), this->nameen().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      7, this->nameen(), output);
  }
  
  // optional uint64 id = 8;
  if (has_id()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64(8, this->id(), output);
  }
  
  // optional string openingHours = 10;
  if (has_openinghours()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->openinghours().data(), this->openinghours().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      10, this->openinghours(), output);
  }
  
  // optional string site = 11;
  if (has_site()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->site().data(), this->site().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      11, this->site(), output);
  }
  
  // optional string phone = 12;
  if (has_phone()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      12, this->phone(), output);
  }
  
  // optional string note = 13;
  if (has_note()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      13, this->note(), output);
  }
  
  // repeated uint32 textCategories = 14;
  for (int i = 0; i < this->textcategories_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->textcategories(i), output);
  }
  
  // repeated string textValues = 15;
  for (int i = 0; i < this->textvalues_size(); i++) {
  ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
    this->textvalues(i).data(), this->textvalues(i).length(),
    ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      15, this->textvalues(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndPoiBoxDataAtom::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required sint32 dx = 2;
  if (has_dx()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dx(), target);
  }
  
  // required sint32 dy = 3;
  if (has_dy()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->dy(), target);
  }
  
  // repeated uint32 categories = 4;
  for (int i = 0; i < this->categories_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->categories(i), target);
  }
  
  // repeated uint32 subcategories = 5;
  for (int i = 0; i < this->subcategories_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->subcategories(i), target);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }
  
  // optional string nameEn = 7;
  if (has_nameen()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->nameen().data(), this->nameen().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nameen(), target);
  }
  
  // optional uint64 id = 8;
  if (has_id()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->id(), target);
  }
  
  // optional string openingHours = 10;
  if (has_openinghours()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->openinghours().data(), this->openinghours().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->openinghours(), target);
  }
  
  // optional string site = 11;
  if (has_site()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->site().data(), this->site().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->site(), target);
  }
  
  // optional string phone = 12;
  if (has_phone()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->phone(), target);
  }
  
  // optional string note = 13;
  if (has_note()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->note(), target);
  }
  
  // repeated uint32 textCategories = 14;
  for (int i = 0; i < this->textcategories_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->textcategories(i), target);
  }
  
  // repeated string textValues = 15;
  for (int i = 0; i < this->textvalues_size(); i++) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->textvalues(i).data(), this->textvalues(i).length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->textvalues(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndPoiBoxDataAtom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 dx = 2;
    if (has_dx()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->dx());
    }
    
    // required sint32 dy = 3;
    if (has_dy()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->dy());
    }
    
    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string nameEn = 7;
    if (has_nameen()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->nameen());
    }
    
    // optional uint64 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // optional string openingHours = 10;
    if (has_openinghours()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->openinghours());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string site = 11;
    if (has_site()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->site());
    }
    
    // optional string phone = 12;
    if (has_phone()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
    // optional string note = 13;
    if (has_note()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }
    
  }
  // repeated uint32 categories = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->categories_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        UInt32Size(this->categories(i));
    }
    total_size += 1 * this->categories_size() + data_size;
  }
  
  // repeated uint32 subcategories = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->subcategories_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        UInt32Size(this->subcategories(i));
    }
    total_size += 1 * this->subcategories_size() + data_size;
  }
  
  // repeated uint32 textCategories = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->textcategories_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        UInt32Size(this->textcategories(i));
    }
    total_size += 1 * this->textcategories_size() + data_size;
  }
  
  // repeated string textValues = 15;
  total_size += 1 * this->textvalues_size();
  for (int i = 0; i < this->textvalues_size(); i++) {
    total_size += ::google::obf_protobuf::internal::WireFormatLite::StringSize(
      this->textvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndPoiBoxDataAtom::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndPoiBoxDataAtom* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndPoiBoxDataAtom*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndPoiBoxDataAtom::MergeFrom(const OsmAndPoiBoxDataAtom& from) {
  GOOGLE_CHECK_NE(&from, this);
  categories_.MergeFrom(from.categories_);
  subcategories_.MergeFrom(from.subcategories_);
  textcategories_.MergeFrom(from.textcategories_);
  textvalues_.MergeFrom(from.textvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dx()) {
      set_dx(from.dx());
    }
    if (from.has_dy()) {
      set_dy(from.dy());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nameen()) {
      set_nameen(from.nameen());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_openinghours()) {
      set_openinghours(from.openinghours());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_site()) {
      set_site(from.site());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndPoiBoxDataAtom::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndPoiBoxDataAtom::CopyFrom(const OsmAndPoiBoxDataAtom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndPoiBoxDataAtom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OsmAndPoiBoxDataAtom::Swap(OsmAndPoiBoxDataAtom* other) {
  if (other != this) {
    std::swap(dx_, other->dx_);
    std::swap(dy_, other->dy_);
    categories_.Swap(&other->categories_);
    subcategories_.Swap(&other->subcategories_);
    std::swap(name_, other->name_);
    std::swap(nameen_, other->nameen_);
    std::swap(id_, other->id_);
    std::swap(openinghours_, other->openinghours_);
    std::swap(site_, other->site_);
    std::swap(phone_, other->phone_);
    std::swap(note_, other->note_);
    textcategories_.Swap(&other->textcategories_);
    textvalues_.Swap(&other->textvalues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndPoiBoxDataAtom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndPoiBoxDataAtom_descriptor_;
  metadata.reflection = OsmAndPoiBoxDataAtom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IdTable::kRouteIdFieldNumber;
#endif  // !_MSC_VER

IdTable::IdTable()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void IdTable::InitAsDefaultInstance() {
}

IdTable::IdTable(const IdTable& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IdTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdTable::~IdTable() {
  SharedDtor();
}

void IdTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IdTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* IdTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdTable_descriptor_;
}

const IdTable& IdTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

IdTable* IdTable::default_instance_ = NULL;

IdTable* IdTable::New() const {
  return new IdTable;
}

void IdTable::Clear() {
  routeid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IdTable::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 routeId = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routeId:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::obf_protobuf::int64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_routeid())));
        } else if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::obf_protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::obf_protobuf::int64, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_routeid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_routeId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IdTable::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 routeId = 1;
  for (int i = 0; i < this->routeid_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->routeid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* IdTable::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // repeated sint64 routeId = 1;
  for (int i = 0; i < this->routeid_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->routeid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IdTable::ByteSize() const {
  int total_size = 0;
  
  // repeated sint64 routeId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->routeid_size(); i++) {
      data_size += ::google::obf_protobuf::internal::WireFormatLite::
        SInt64Size(this->routeid(i));
    }
    total_size += 1 * this->routeid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdTable::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IdTable* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const IdTable*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IdTable::MergeFrom(const IdTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  routeid_.MergeFrom(from.routeid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IdTable::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdTable::CopyFrom(const IdTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdTable::IsInitialized() const {
  
  return true;
}

void IdTable::Swap(IdTable* other) {
  if (other != this) {
    routeid_.Swap(&other->routeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata IdTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = IdTable_descriptor_;
  metadata.reflection = IdTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RestrictionData::kTypeFieldNumber;
const int RestrictionData::kFromFieldNumber;
const int RestrictionData::kToFieldNumber;
const int RestrictionData::kViaFieldNumber;
#endif  // !_MSC_VER

RestrictionData::RestrictionData()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void RestrictionData::InitAsDefaultInstance() {
}

RestrictionData::RestrictionData(const RestrictionData& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RestrictionData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  from_ = 0;
  to_ = 0;
  via_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestrictionData::~RestrictionData() {
  SharedDtor();
}

void RestrictionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RestrictionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* RestrictionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestrictionData_descriptor_;
}

const RestrictionData& RestrictionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

RestrictionData* RestrictionData::default_instance_ = NULL;

RestrictionData* RestrictionData::New() const {
  return new RestrictionData;
}

void RestrictionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    from_ = 0;
    to_ = 0;
    via_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestrictionData::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from;
        break;
      }
      
      // required int32 from = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to;
        break;
      }
      
      // required int32 to = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_via;
        break;
      }
      
      // optional int32 via = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_via:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &via_)));
          set_has_via();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RestrictionData::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 from = 2;
  if (has_from()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(2, this->from(), output);
  }
  
  // required int32 to = 3;
  if (has_to()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(3, this->to(), output);
  }
  
  // optional int32 via = 4;
  if (has_via()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(4, this->via(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* RestrictionData::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int32 from = 2;
  if (has_from()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from(), target);
  }
  
  // required int32 to = 3;
  if (has_to()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->to(), target);
  }
  
  // optional int32 via = 4;
  if (has_via()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->via(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RestrictionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }
    
    // required int32 to = 3;
    if (has_to()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::Int32Size(
          this->to());
    }
    
    // optional int32 via = 4;
    if (has_via()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::Int32Size(
          this->via());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestrictionData::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestrictionData* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const RestrictionData*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestrictionData::MergeFrom(const RestrictionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_via()) {
      set_via(from.via());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestrictionData::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestrictionData::CopyFrom(const RestrictionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestrictionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RestrictionData::Swap(RestrictionData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(via_, other->via_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata RestrictionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = RestrictionData_descriptor_;
  metadata.reflection = RestrictionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouteData::kPointsFieldNumber;
const int RouteData::kPointTypesFieldNumber;
const int RouteData::kTypesFieldNumber;
const int RouteData::kRouteIdFieldNumber;
const int RouteData::kStringNamesFieldNumber;
#endif  // !_MSC_VER

RouteData::RouteData()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void RouteData::InitAsDefaultInstance() {
}

RouteData::RouteData(const RouteData& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RouteData::SharedCtor() {
  _cached_size_ = 0;
  points_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  pointtypes_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  types_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  routeid_ = 0;
  stringnames_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteData::~RouteData() {
  SharedDtor();
}

void RouteData::SharedDtor() {
  if (points_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete points_;
  }
  if (pointtypes_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete pointtypes_;
  }
  if (types_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete types_;
  }
  if (stringnames_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete stringnames_;
  }
  if (this != default_instance_) {
  }
}

void RouteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* RouteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteData_descriptor_;
}

const RouteData& RouteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

RouteData* RouteData::default_instance_ = NULL;

RouteData* RouteData::New() const {
  return new RouteData;
}

void RouteData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_points()) {
      if (points_ != &::google::obf_protobuf::internal::kEmptyString) {
        points_->clear();
      }
    }
    if (has_pointtypes()) {
      if (pointtypes_ != &::google::obf_protobuf::internal::kEmptyString) {
        pointtypes_->clear();
      }
    }
    if (has_types()) {
      if (types_ != &::google::obf_protobuf::internal::kEmptyString) {
        types_->clear();
      }
    }
    routeid_ = 0;
    if (has_stringnames()) {
      if (stringnames_ != &::google::obf_protobuf::internal::kEmptyString) {
        stringnames_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteData::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes points = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pointTypes;
        break;
      }
      
      // optional bytes pointTypes = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointTypes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pointtypes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_types;
        break;
      }
      
      // required bytes types = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_types:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_routeId;
        break;
      }
      
      // required int32 routeId = 12;
      case 12: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routeId:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routeid_)));
          set_has_routeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_stringNames;
        break;
      }
      
      // optional bytes stringNames = 14;
      case 14: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringNames:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stringnames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RouteData::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required bytes points = 1;
  if (has_points()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBytes(
      1, this->points(), output);
  }
  
  // optional bytes pointTypes = 4;
  if (has_pointtypes()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBytes(
      4, this->pointtypes(), output);
  }
  
  // required bytes types = 7;
  if (has_types()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBytes(
      7, this->types(), output);
  }
  
  // required int32 routeId = 12;
  if (has_routeid()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteInt32(12, this->routeid(), output);
  }
  
  // optional bytes stringNames = 14;
  if (has_stringnames()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteBytes(
      14, this->stringnames(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* RouteData::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required bytes points = 1;
  if (has_points()) {
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->points(), target);
  }
  
  // optional bytes pointTypes = 4;
  if (has_pointtypes()) {
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pointtypes(), target);
  }
  
  // required bytes types = 7;
  if (has_types()) {
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->types(), target);
  }
  
  // required int32 routeId = 12;
  if (has_routeid()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->routeid(), target);
  }
  
  // optional bytes stringNames = 14;
  if (has_stringnames()) {
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->stringnames(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RouteData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes points = 1;
    if (has_points()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::BytesSize(
          this->points());
    }
    
    // optional bytes pointTypes = 4;
    if (has_pointtypes()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::BytesSize(
          this->pointtypes());
    }
    
    // required bytes types = 7;
    if (has_types()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::BytesSize(
          this->types());
    }
    
    // required int32 routeId = 12;
    if (has_routeid()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::Int32Size(
          this->routeid());
    }
    
    // optional bytes stringNames = 14;
    if (has_stringnames()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::BytesSize(
          this->stringnames());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteData::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteData* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const RouteData*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteData::MergeFrom(const RouteData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_pointtypes()) {
      set_pointtypes(from.pointtypes());
    }
    if (from.has_types()) {
      set_types(from.types());
    }
    if (from.has_routeid()) {
      set_routeid(from.routeid());
    }
    if (from.has_stringnames()) {
      set_stringnames(from.stringnames());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteData::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteData::CopyFrom(const RouteData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void RouteData::Swap(RouteData* other) {
  if (other != this) {
    std::swap(points_, other->points_);
    std::swap(pointtypes_, other->pointtypes_);
    std::swap(types_, other->types_);
    std::swap(routeid_, other->routeid_);
    std::swap(stringnames_, other->stringnames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata RouteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = RouteData_descriptor_;
  metadata.reflection = RouteData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsmAndRoutingIndex_RouteEncodingRule::kTagFieldNumber;
const int OsmAndRoutingIndex_RouteEncodingRule::kValueFieldNumber;
const int OsmAndRoutingIndex_RouteEncodingRule::kIdFieldNumber;
#endif  // !_MSC_VER

OsmAndRoutingIndex_RouteEncodingRule::OsmAndRoutingIndex_RouteEncodingRule()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndRoutingIndex_RouteEncodingRule::InitAsDefaultInstance() {
}

OsmAndRoutingIndex_RouteEncodingRule::OsmAndRoutingIndex_RouteEncodingRule(const OsmAndRoutingIndex_RouteEncodingRule& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndRoutingIndex_RouteEncodingRule::SharedCtor() {
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndRoutingIndex_RouteEncodingRule::~OsmAndRoutingIndex_RouteEncodingRule() {
  SharedDtor();
}

void OsmAndRoutingIndex_RouteEncodingRule::SharedDtor() {
  if (tag_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (value_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void OsmAndRoutingIndex_RouteEncodingRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndRoutingIndex_RouteEncodingRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndRoutingIndex_RouteEncodingRule_descriptor_;
}

const OsmAndRoutingIndex_RouteEncodingRule& OsmAndRoutingIndex_RouteEncodingRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndRoutingIndex_RouteEncodingRule* OsmAndRoutingIndex_RouteEncodingRule::default_instance_ = NULL;

OsmAndRoutingIndex_RouteEncodingRule* OsmAndRoutingIndex_RouteEncodingRule::New() const {
  return new OsmAndRoutingIndex_RouteEncodingRule;
}

void OsmAndRoutingIndex_RouteEncodingRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tag()) {
      if (tag_ != &::google::obf_protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::obf_protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndRoutingIndex_RouteEncodingRule::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }
      
      // required string value = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndRoutingIndex_RouteEncodingRule::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required string tag = 3;
  if (has_tag()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      3, this->tag(), output);
  }
  
  // required string value = 5;
  if (has_value()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      5, this->value(), output);
  }
  
  // optional uint32 id = 7;
  if (has_id()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32(7, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndRoutingIndex_RouteEncodingRule::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required string tag = 3;
  if (has_tag()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }
  
  // required string value = 5;
  if (has_value()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }
  
  // optional uint32 id = 7;
  if (has_id()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndRoutingIndex_RouteEncodingRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }
    
    // required string value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional uint32 id = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndRoutingIndex_RouteEncodingRule::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndRoutingIndex_RouteEncodingRule* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndRoutingIndex_RouteEncodingRule*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndRoutingIndex_RouteEncodingRule::MergeFrom(const OsmAndRoutingIndex_RouteEncodingRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndRoutingIndex_RouteEncodingRule::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndRoutingIndex_RouteEncodingRule::CopyFrom(const OsmAndRoutingIndex_RouteEncodingRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndRoutingIndex_RouteEncodingRule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OsmAndRoutingIndex_RouteEncodingRule::Swap(OsmAndRoutingIndex_RouteEncodingRule* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(value_, other->value_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndRoutingIndex_RouteEncodingRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndRoutingIndex_RouteEncodingRule_descriptor_;
  metadata.reflection = OsmAndRoutingIndex_RouteEncodingRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OsmAndRoutingIndex_RouteDataBox::kLeftFieldNumber;
const int OsmAndRoutingIndex_RouteDataBox::kRightFieldNumber;
const int OsmAndRoutingIndex_RouteDataBox::kTopFieldNumber;
const int OsmAndRoutingIndex_RouteDataBox::kBottomFieldNumber;
const int OsmAndRoutingIndex_RouteDataBox::kShiftToDataFieldNumber;
const int OsmAndRoutingIndex_RouteDataBox::kBoxesFieldNumber;
#endif  // !_MSC_VER

OsmAndRoutingIndex_RouteDataBox::OsmAndRoutingIndex_RouteDataBox()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndRoutingIndex_RouteDataBox::InitAsDefaultInstance() {
}

OsmAndRoutingIndex_RouteDataBox::OsmAndRoutingIndex_RouteDataBox(const OsmAndRoutingIndex_RouteDataBox& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndRoutingIndex_RouteDataBox::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  shifttodata_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndRoutingIndex_RouteDataBox::~OsmAndRoutingIndex_RouteDataBox() {
  SharedDtor();
}

void OsmAndRoutingIndex_RouteDataBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsmAndRoutingIndex_RouteDataBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndRoutingIndex_RouteDataBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndRoutingIndex_RouteDataBox_descriptor_;
}

const OsmAndRoutingIndex_RouteDataBox& OsmAndRoutingIndex_RouteDataBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndRoutingIndex_RouteDataBox* OsmAndRoutingIndex_RouteDataBox::default_instance_ = NULL;

OsmAndRoutingIndex_RouteDataBox* OsmAndRoutingIndex_RouteDataBox::New() const {
  return new OsmAndRoutingIndex_RouteDataBox;
}

void OsmAndRoutingIndex_RouteDataBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0;
    right_ = 0;
    top_ = 0;
    bottom_ = 0;
    shifttodata_ = 0u;
  }
  boxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndRoutingIndex_RouteDataBox::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 left = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }
      
      // required sint32 right = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }
      
      // required sint32 top = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }
      
      // required sint32 bottom = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::int32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_shiftToData;
        break;
      }
      
      // optional fixed32 shiftToData = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shiftToData:
          DO_((::google::obf_protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::obf_protobuf::uint32, ::google::obf_protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shifttodata_)));
          set_has_shifttodata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox boxes = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndRoutingIndex_RouteDataBox::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required sint32 left = 1;
  if (has_left()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(1, this->left(), output);
  }
  
  // required sint32 right = 2;
  if (has_right()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(2, this->right(), output);
  }
  
  // required sint32 top = 3;
  if (has_top()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(3, this->top(), output);
  }
  
  // required sint32 bottom = 4;
  if (has_bottom()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32(4, this->bottom(), output);
  }
  
  // optional fixed32 shiftToData = 5;
  if (has_shifttodata()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32(5, this->shifttodata(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->boxes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndRoutingIndex_RouteDataBox::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required sint32 left = 1;
  if (has_left()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->left(), target);
  }
  
  // required sint32 right = 2;
  if (has_right()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->right(), target);
  }
  
  // required sint32 top = 3;
  if (has_top()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->top(), target);
  }
  
  // required sint32 bottom = 4;
  if (has_bottom()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->bottom(), target);
  }
  
  // optional fixed32 shiftToData = 5;
  if (has_shifttodata()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->shifttodata(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->boxes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndRoutingIndex_RouteDataBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->left());
    }
    
    // required sint32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->right());
    }
    
    // required sint32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->top());
    }
    
    // required sint32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::SInt32Size(
          this->bottom());
    }
    
    // optional fixed32 shiftToData = 5;
    if (has_shifttodata()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox boxes = 7;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndRoutingIndex_RouteDataBox::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndRoutingIndex_RouteDataBox* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndRoutingIndex_RouteDataBox*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndRoutingIndex_RouteDataBox::MergeFrom(const OsmAndRoutingIndex_RouteDataBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxes_.MergeFrom(from.boxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
    if (from.has_shifttodata()) {
      set_shifttodata(from.shifttodata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndRoutingIndex_RouteDataBox::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndRoutingIndex_RouteDataBox::CopyFrom(const OsmAndRoutingIndex_RouteDataBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndRoutingIndex_RouteDataBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < boxes_size(); i++) {
    if (!this->boxes(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndRoutingIndex_RouteDataBox::Swap(OsmAndRoutingIndex_RouteDataBox* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(shifttodata_, other->shifttodata_);
    boxes_.Swap(&other->boxes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndRoutingIndex_RouteDataBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndRoutingIndex_RouteDataBox_descriptor_;
  metadata.reflection = OsmAndRoutingIndex_RouteDataBox_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OsmAndRoutingIndex_RouteDataBlock::kIdTableFieldNumber;
const int OsmAndRoutingIndex_RouteDataBlock::kDataObjectsFieldNumber;
const int OsmAndRoutingIndex_RouteDataBlock::kRestrictionsFieldNumber;
const int OsmAndRoutingIndex_RouteDataBlock::kStringTableFieldNumber;
#endif  // !_MSC_VER

OsmAndRoutingIndex_RouteDataBlock::OsmAndRoutingIndex_RouteDataBlock()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndRoutingIndex_RouteDataBlock::InitAsDefaultInstance() {
  idtable_ = const_cast< ::OsmAnd::OBF::IdTable*>(&::OsmAnd::OBF::IdTable::default_instance());
  stringtable_ = const_cast< ::OsmAnd::OBF::StringTable*>(&::OsmAnd::OBF::StringTable::default_instance());
}

OsmAndRoutingIndex_RouteDataBlock::OsmAndRoutingIndex_RouteDataBlock(const OsmAndRoutingIndex_RouteDataBlock& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndRoutingIndex_RouteDataBlock::SharedCtor() {
  _cached_size_ = 0;
  idtable_ = NULL;
  stringtable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndRoutingIndex_RouteDataBlock::~OsmAndRoutingIndex_RouteDataBlock() {
  SharedDtor();
}

void OsmAndRoutingIndex_RouteDataBlock::SharedDtor() {
  if (this != default_instance_) {
    delete idtable_;
    delete stringtable_;
  }
}

void OsmAndRoutingIndex_RouteDataBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndRoutingIndex_RouteDataBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndRoutingIndex_RouteDataBlock_descriptor_;
}

const OsmAndRoutingIndex_RouteDataBlock& OsmAndRoutingIndex_RouteDataBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndRoutingIndex_RouteDataBlock* OsmAndRoutingIndex_RouteDataBlock::default_instance_ = NULL;

OsmAndRoutingIndex_RouteDataBlock* OsmAndRoutingIndex_RouteDataBlock::New() const {
  return new OsmAndRoutingIndex_RouteDataBlock;
}

void OsmAndRoutingIndex_RouteDataBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_idtable()) {
      if (idtable_ != NULL) idtable_->::OsmAnd::OBF::IdTable::Clear();
    }
    if (has_stringtable()) {
      if (stringtable_ != NULL) stringtable_->::OsmAnd::OBF::StringTable::Clear();
    }
  }
  dataobjects_.Clear();
  restrictions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndRoutingIndex_RouteDataBlock::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OsmAnd.OBF.IdTable idTable = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_idtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dataObjects;
        break;
      }
      
      // repeated .OsmAnd.OBF.RouteData dataObjects = 6;
      case 6: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataObjects:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataobjects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dataObjects;
        if (input->ExpectTag(58)) goto parse_restrictions;
        break;
      }
      
      // repeated .OsmAnd.OBF.RestrictionData restrictions = 7;
      case 7: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_restrictions:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_restrictions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_restrictions;
        if (input->ExpectTag(66)) goto parse_stringTable;
        break;
      }
      
      // optional .OsmAnd.OBF.StringTable stringTable = 8;
      case 8: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringTable:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndRoutingIndex_RouteDataBlock::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // optional .OsmAnd.OBF.IdTable idTable = 5;
  if (has_idtable()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->idtable(), output);
  }
  
  // repeated .OsmAnd.OBF.RouteData dataObjects = 6;
  for (int i = 0; i < this->dataobjects_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dataobjects(i), output);
  }
  
  // repeated .OsmAnd.OBF.RestrictionData restrictions = 7;
  for (int i = 0; i < this->restrictions_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->restrictions(i), output);
  }
  
  // optional .OsmAnd.OBF.StringTable stringTable = 8;
  if (has_stringtable()) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->stringtable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndRoutingIndex_RouteDataBlock::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // optional .OsmAnd.OBF.IdTable idTable = 5;
  if (has_idtable()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->idtable(), target);
  }
  
  // repeated .OsmAnd.OBF.RouteData dataObjects = 6;
  for (int i = 0; i < this->dataobjects_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dataobjects(i), target);
  }
  
  // repeated .OsmAnd.OBF.RestrictionData restrictions = 7;
  for (int i = 0; i < this->restrictions_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->restrictions(i), target);
  }
  
  // optional .OsmAnd.OBF.StringTable stringTable = 8;
  if (has_stringtable()) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->stringtable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndRoutingIndex_RouteDataBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OsmAnd.OBF.IdTable idTable = 5;
    if (has_idtable()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->idtable());
    }
    
    // optional .OsmAnd.OBF.StringTable stringTable = 8;
    if (has_stringtable()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stringtable());
    }
    
  }
  // repeated .OsmAnd.OBF.RouteData dataObjects = 6;
  total_size += 1 * this->dataobjects_size();
  for (int i = 0; i < this->dataobjects_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dataobjects(i));
  }
  
  // repeated .OsmAnd.OBF.RestrictionData restrictions = 7;
  total_size += 1 * this->restrictions_size();
  for (int i = 0; i < this->restrictions_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->restrictions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndRoutingIndex_RouteDataBlock::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndRoutingIndex_RouteDataBlock* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndRoutingIndex_RouteDataBlock*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndRoutingIndex_RouteDataBlock::MergeFrom(const OsmAndRoutingIndex_RouteDataBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  dataobjects_.MergeFrom(from.dataobjects_);
  restrictions_.MergeFrom(from.restrictions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idtable()) {
      mutable_idtable()->::OsmAnd::OBF::IdTable::MergeFrom(from.idtable());
    }
    if (from.has_stringtable()) {
      mutable_stringtable()->::OsmAnd::OBF::StringTable::MergeFrom(from.stringtable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndRoutingIndex_RouteDataBlock::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndRoutingIndex_RouteDataBlock::CopyFrom(const OsmAndRoutingIndex_RouteDataBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndRoutingIndex_RouteDataBlock::IsInitialized() const {
  
  for (int i = 0; i < dataobjects_size(); i++) {
    if (!this->dataobjects(i).IsInitialized()) return false;
  }
  for (int i = 0; i < restrictions_size(); i++) {
    if (!this->restrictions(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndRoutingIndex_RouteDataBlock::Swap(OsmAndRoutingIndex_RouteDataBlock* other) {
  if (other != this) {
    std::swap(idtable_, other->idtable_);
    dataobjects_.Swap(&other->dataobjects_);
    restrictions_.Swap(&other->restrictions_);
    std::swap(stringtable_, other->stringtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndRoutingIndex_RouteDataBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndRoutingIndex_RouteDataBlock_descriptor_;
  metadata.reflection = OsmAndRoutingIndex_RouteDataBlock_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OsmAndRoutingIndex::kNameFieldNumber;
const int OsmAndRoutingIndex::kRulesFieldNumber;
const int OsmAndRoutingIndex::kRootBoxesFieldNumber;
const int OsmAndRoutingIndex::kBasemapBoxesFieldNumber;
const int OsmAndRoutingIndex::kBlocksFieldNumber;
#endif  // !_MSC_VER

OsmAndRoutingIndex::OsmAndRoutingIndex()
  : ::google::obf_protobuf::Message() {
  SharedCtor();
}

void OsmAndRoutingIndex::InitAsDefaultInstance() {
}

OsmAndRoutingIndex::OsmAndRoutingIndex(const OsmAndRoutingIndex& from)
  : ::google::obf_protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsmAndRoutingIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::obf_protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsmAndRoutingIndex::~OsmAndRoutingIndex() {
  SharedDtor();
}

void OsmAndRoutingIndex::SharedDtor() {
  if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void OsmAndRoutingIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::obf_protobuf::Descriptor* OsmAndRoutingIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsmAndRoutingIndex_descriptor_;
}

const OsmAndRoutingIndex& OsmAndRoutingIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OBF_2eproto();  return *default_instance_;
}

OsmAndRoutingIndex* OsmAndRoutingIndex::default_instance_ = NULL;

OsmAndRoutingIndex* OsmAndRoutingIndex::New() const {
  return new OsmAndRoutingIndex;
}

void OsmAndRoutingIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::obf_protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  rules_.Clear();
  rootboxes_.Clear();
  basemapboxes_.Clear();
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsmAndRoutingIndex::MergePartialFromCodedStream(
    ::google::obf_protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::obf_protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::obf_protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::obf_protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rules;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteEncodingRule rules = 2;
      case 2: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rules;
        if (input->ExpectTag(26)) goto parse_rootBoxes;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox rootBoxes = 3;
      case 3: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rootBoxes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rootboxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rootBoxes;
        if (input->ExpectTag(34)) goto parse_basemapBoxes;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox basemapBoxes = 4;
      case 4: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basemapBoxes:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basemapboxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_basemapBoxes;
        if (input->ExpectTag(42)) goto parse_blocks;
        break;
      }
      
      // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBlock blocks = 5;
      case 5: {
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::obf_protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::obf_protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::obf_protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::obf_protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsmAndRoutingIndex::SerializeWithCachedSizes(
    ::google::obf_protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    ::google::obf_protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteEncodingRule rules = 2;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rules(i), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox rootBoxes = 3;
  for (int i = 0; i < this->rootboxes_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rootboxes(i), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox basemapBoxes = 4;
  for (int i = 0; i < this->basemapboxes_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->basemapboxes(i), output);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBlock blocks = 5;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::obf_protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->blocks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::obf_protobuf::uint8* OsmAndRoutingIndex::SerializeWithCachedSizesToArray(
    ::google::obf_protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::obf_protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::obf_protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::obf_protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteEncodingRule rules = 2;
  for (int i = 0; i < this->rules_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rules(i), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox rootBoxes = 3;
  for (int i = 0; i < this->rootboxes_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rootboxes(i), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox basemapBoxes = 4;
  for (int i = 0; i < this->basemapboxes_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->basemapboxes(i), target);
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBlock blocks = 5;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::obf_protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->blocks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::obf_protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsmAndRoutingIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::obf_protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteEncodingRule rules = 2;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rules(i));
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox rootBoxes = 3;
  total_size += 1 * this->rootboxes_size();
  for (int i = 0; i < this->rootboxes_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rootboxes(i));
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBox basemapBoxes = 4;
  total_size += 1 * this->basemapboxes_size();
  for (int i = 0; i < this->basemapboxes_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basemapboxes(i));
  }
  
  // repeated .OsmAnd.OBF.OsmAndRoutingIndex.RouteDataBlock blocks = 5;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::obf_protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsmAndRoutingIndex::MergeFrom(const ::google::obf_protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsmAndRoutingIndex* source =
    ::google::obf_protobuf::internal::dynamic_cast_if_available<const OsmAndRoutingIndex*>(
      &from);
  if (source == NULL) {
    ::google::obf_protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsmAndRoutingIndex::MergeFrom(const OsmAndRoutingIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  rules_.MergeFrom(from.rules_);
  rootboxes_.MergeFrom(from.rootboxes_);
  basemapboxes_.MergeFrom(from.basemapboxes_);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsmAndRoutingIndex::CopyFrom(const ::google::obf_protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmAndRoutingIndex::CopyFrom(const OsmAndRoutingIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmAndRoutingIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < rules_size(); i++) {
    if (!this->rules(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rootboxes_size(); i++) {
    if (!this->rootboxes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < basemapboxes_size(); i++) {
    if (!this->basemapboxes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void OsmAndRoutingIndex::Swap(OsmAndRoutingIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    rules_.Swap(&other->rules_);
    rootboxes_.Swap(&other->rootboxes_);
    basemapboxes_.Swap(&other->basemapboxes_);
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::obf_protobuf::Metadata OsmAndRoutingIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::obf_protobuf::Metadata metadata;
  metadata.descriptor = OsmAndRoutingIndex_descriptor_;
  metadata.reflection = OsmAndRoutingIndex_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OBF
}  // namespace OsmAnd

// @@protoc_insertion_point(global_scope)
